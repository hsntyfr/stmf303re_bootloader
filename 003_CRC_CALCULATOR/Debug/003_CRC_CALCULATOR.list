
003_CRC_CALCULATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003264  08003264  00004264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800329c  0800329c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800329c  0800329c  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800329c  0800329c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800329c  0800329c  0000429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032a0  080032a0  000042a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080032a4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000cc  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000965c  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017d2  00000000  00000000  0000e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  0000fe70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000561  00000000  00000000  00010580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f291  00000000  00000000  00010ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a31f  00000000  00000000  0002fd72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd064  00000000  00000000  0003a091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f70f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b4c  00000000  00000000  000f7138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  000f8c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800324c 	.word	0x0800324c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800324c 	.word	0x0800324c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fa1b 	bl	8000614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f839 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f8db 	bl	800039c <MX_GPIO_Init>
  MX_CRC_Init();
 80001e6:	f000 f887 	bl	80002f8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80001ea:	f000 f8a7 	bl	800033c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t data8[] = {0x00, 0x00, 0x05, 0x51};
 80001ee:	4b16      	ldr	r3, [pc, #88]	@ (8000248 <main+0x74>)
 80001f0:	60fb      	str	r3, [r7, #12]
  uint32_t data32 = 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60bb      	str	r3, [r7, #8]
  uint32_t crc = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	607b      	str	r3, [r7, #4]

  // 2 byte veriyi 32-bit'e yerleştir (LSB-first / little endian)
  data32 |= data8[0];
 80001fa:	7b3b      	ldrb	r3, [r7, #12]
 80001fc:	461a      	mov	r2, r3
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	4313      	orrs	r3, r2
 8000202:	60bb      	str	r3, [r7, #8]
  data32 |= (data8[1] << 8);
 8000204:	7b7b      	ldrb	r3, [r7, #13]
 8000206:	021a      	lsls	r2, r3, #8
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	4313      	orrs	r3, r2
 800020c:	60bb      	str	r3, [r7, #8]
  data32 |= (data8[2] << 16);
 800020e:	7bbb      	ldrb	r3, [r7, #14]
 8000210:	041a      	lsls	r2, r3, #16
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	4313      	orrs	r3, r2
 8000216:	60bb      	str	r3, [r7, #8]
  data32 |= (data8[3] << 24);
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	061a      	lsls	r2, r3, #24
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	4313      	orrs	r3, r2
 8000220:	60bb      	str	r3, [r7, #8]

  // CRC hesapla
  crc = HAL_CRC_Accumulate(&hcrc, &data32, 1);
 8000222:	f107 0308 	add.w	r3, r7, #8
 8000226:	2201      	movs	r2, #1
 8000228:	4619      	mov	r1, r3
 800022a:	4808      	ldr	r0, [pc, #32]	@ (800024c <main+0x78>)
 800022c:	f000 fba2 	bl	8000974 <HAL_CRC_Accumulate>
 8000230:	4603      	mov	r3, r0
 8000232:	607b      	str	r3, [r7, #4]

  // UART ile gönder
  HAL_UART_Transmit(&huart1, (uint8_t *)&crc, 4, HAL_MAX_DELAY);
 8000234:	1d39      	adds	r1, r7, #4
 8000236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800023a:	2204      	movs	r2, #4
 800023c:	4804      	ldr	r0, [pc, #16]	@ (8000250 <main+0x7c>)
 800023e:	f002 fb5f 	bl	8002900 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000242:	bf00      	nop
 8000244:	e7fd      	b.n	8000242 <main+0x6e>
 8000246:	bf00      	nop
 8000248:	51050000 	.word	0x51050000
 800024c:	20000028 	.word	0x20000028
 8000250:	2000004c 	.word	0x2000004c

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b0a6      	sub	sp, #152	@ 0x98
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800025e:	2228      	movs	r2, #40	@ 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f002 ffc5 	bl	80031f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2258      	movs	r2, #88	@ 0x58
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f002 ffb7 	bl	80031f2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000284:	2302      	movs	r3, #2
 8000286:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028c:	2310      	movs	r3, #16
 800028e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000292:	2300      	movs	r3, #0
 8000294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fe8f 	bl	8000fc0 <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a8:	f000 f89c 	bl	80003e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b0:	2300      	movs	r3, #0
 80002b2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fe9e 	bl	8002008 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002d2:	f000 f887 	bl	80003e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002d6:	2301      	movs	r3, #1
 80002d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f002 f8a3 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002ec:	f000 f87a 	bl	80003e4 <Error_Handler>
  }
}
 80002f0:	bf00      	nop
 80002f2:	3798      	adds	r7, #152	@ 0x98
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000334 <MX_CRC_Init+0x3c>)
 80002fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000338 <MX_CRC_Init+0x40>)
 8000300:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000302:	4b0c      	ldr	r3, [pc, #48]	@ (8000334 <MX_CRC_Init+0x3c>)
 8000304:	2200      	movs	r2, #0
 8000306:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000308:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <MX_CRC_Init+0x3c>)
 800030a:	2200      	movs	r2, #0
 800030c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800030e:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <MX_CRC_Init+0x3c>)
 8000310:	2200      	movs	r2, #0
 8000312:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000314:	4b07      	ldr	r3, [pc, #28]	@ (8000334 <MX_CRC_Init+0x3c>)
 8000316:	2200      	movs	r2, #0
 8000318:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800031a:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <MX_CRC_Init+0x3c>)
 800031c:	2201      	movs	r2, #1
 800031e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000320:	4804      	ldr	r0, [pc, #16]	@ (8000334 <MX_CRC_Init+0x3c>)
 8000322:	f000 fac3 	bl	80008ac <HAL_CRC_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800032c:	f000 f85a 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000028 	.word	0x20000028
 8000338:	40023000 	.word	0x40023000

0800033c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000340:	4b14      	ldr	r3, [pc, #80]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000342:	4a15      	ldr	r2, [pc, #84]	@ (8000398 <MX_USART1_UART_Init+0x5c>)
 8000344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000346:	4b13      	ldr	r3, [pc, #76]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000348:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800034c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000372:	4b08      	ldr	r3, [pc, #32]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000374:	2200      	movs	r2, #0
 8000376:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 800037a:	2200      	movs	r2, #0
 800037c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800037e:	4805      	ldr	r0, [pc, #20]	@ (8000394 <MX_USART1_UART_Init+0x58>)
 8000380:	f002 fa70 	bl	8002864 <HAL_UART_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800038a:	f000 f82b 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	2000004c 	.word	0x2000004c
 8000398:	40013800 	.word	0x40013800

0800039c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a2:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <MX_GPIO_Init+0x44>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a0e      	ldr	r2, [pc, #56]	@ (80003e0 <MX_GPIO_Init+0x44>)
 80003a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <MX_GPIO_Init+0x44>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ba:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <MX_GPIO_Init+0x44>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a08      	ldr	r2, [pc, #32]	@ (80003e0 <MX_GPIO_Init+0x44>)
 80003c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <MX_GPIO_Init+0x44>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <Error_Handler+0x8>

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <HAL_MspInit+0x44>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000434 <HAL_MspInit+0x44>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <HAL_MspInit+0x44>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b09      	ldr	r3, [pc, #36]	@ (8000434 <HAL_MspInit+0x44>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a08      	ldr	r2, [pc, #32]	@ (8000434 <HAL_MspInit+0x44>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <HAL_MspInit+0x44>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000

08000438 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a0a      	ldr	r2, [pc, #40]	@ (8000470 <HAL_CRC_MspInit+0x38>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d10b      	bne.n	8000462 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800044a:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <HAL_CRC_MspInit+0x3c>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a09      	ldr	r2, [pc, #36]	@ (8000474 <HAL_CRC_MspInit+0x3c>)
 8000450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <HAL_CRC_MspInit+0x3c>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40023000 	.word	0x40023000
 8000474:	40021000 	.word	0x40021000

08000478 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	@ 0x28
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a26      	ldr	r2, [pc, #152]	@ (8000530 <HAL_UART_MspInit+0xb8>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d145      	bne.n	8000526 <HAL_UART_MspInit+0xae>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800049a:	4b26      	ldr	r3, [pc, #152]	@ (8000534 <HAL_UART_MspInit+0xbc>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a25      	ldr	r2, [pc, #148]	@ (8000534 <HAL_UART_MspInit+0xbc>)
 80004a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b23      	ldr	r3, [pc, #140]	@ (8000534 <HAL_UART_MspInit+0xbc>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b2:	4b20      	ldr	r3, [pc, #128]	@ (8000534 <HAL_UART_MspInit+0xbc>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a1f      	ldr	r2, [pc, #124]	@ (8000534 <HAL_UART_MspInit+0xbc>)
 80004b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b1d      	ldr	r3, [pc, #116]	@ (8000534 <HAL_UART_MspInit+0xbc>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000534 <HAL_UART_MspInit+0xbc>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a19      	ldr	r2, [pc, #100]	@ (8000534 <HAL_UART_MspInit+0xbc>)
 80004d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b17      	ldr	r3, [pc, #92]	@ (8000534 <HAL_UART_MspInit+0xbc>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC5     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004e2:	2320      	movs	r3, #32
 80004e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e6:	2302      	movs	r3, #2
 80004e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ee:	2303      	movs	r3, #3
 80004f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004f2:	2307      	movs	r3, #7
 80004f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4619      	mov	r1, r3
 80004fc:	480e      	ldr	r0, [pc, #56]	@ (8000538 <HAL_UART_MspInit+0xc0>)
 80004fe:	f000 fbd5 	bl	8000cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000502:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000508:	2302      	movs	r3, #2
 800050a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000510:	2303      	movs	r3, #3
 8000512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000514:	2307      	movs	r3, #7
 8000516:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	4619      	mov	r1, r3
 800051e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000522:	f000 fbc3 	bl	8000cac <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000526:	bf00      	nop
 8000528:	3728      	adds	r7, #40	@ 0x28
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40013800 	.word	0x40013800
 8000534:	40021000 	.word	0x40021000
 8000538:	48000800 	.word	0x48000800

0800053c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <NMI_Handler+0x4>

08000544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <HardFault_Handler+0x4>

0800054c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <MemManage_Handler+0x4>

08000554 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <BusFault_Handler+0x4>

0800055c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <UsageFault_Handler+0x4>

08000564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000592:	f000 f885 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <SystemInit+0x20>)
 80005a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005a6:	4a05      	ldr	r2, [pc, #20]	@ (80005bc <SystemInit+0x20>)
 80005a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c4:	f7ff ffea 	bl	800059c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c8:	480c      	ldr	r0, [pc, #48]	@ (80005fc <LoopForever+0x6>)
  ldr r1, =_edata
 80005ca:	490d      	ldr	r1, [pc, #52]	@ (8000600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000604 <LoopForever+0xe>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d0:	e002      	b.n	80005d8 <LoopCopyDataInit>

080005d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d6:	3304      	adds	r3, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005dc:	d3f9      	bcc.n	80005d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	@ (8000608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e0:	4c0a      	ldr	r4, [pc, #40]	@ (800060c <LoopForever+0x16>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e4:	e001      	b.n	80005ea <LoopFillZerobss>

080005e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e8:	3204      	adds	r2, #4

080005ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ec:	d3fb      	bcc.n	80005e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ee:	f002 fe09 	bl	8003204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005f2:	f7ff fdef 	bl	80001d4 <main>

080005f6 <LoopForever>:

LoopForever:
    b LoopForever
 80005f6:	e7fe      	b.n	80005f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000604:	080032a4 	.word	0x080032a4
  ldr r2, =_sbss
 8000608:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800060c:	200000d8 	.word	0x200000d8

08000610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_2_IRQHandler>
	...

08000614 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <HAL_Init+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a07      	ldr	r2, [pc, #28]	@ (800063c <HAL_Init+0x28>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f90d 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	200f      	movs	r0, #15
 800062c:	f000 f808 	bl	8000640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f7ff fede 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <HAL_InitTick+0x54>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <HAL_InitTick+0x58>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f917 	bl	8000892 <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80a      	bhi.n	800068a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800067c:	f000 f8ed 	bl	800085a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4a06      	ldr	r2, [pc, #24]	@ (800069c <HAL_InitTick+0x5c>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	20000008 	.word	0x20000008
 800069c:	20000004 	.word	0x20000004

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <HAL_IncTick+0x20>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <HAL_IncTick+0x24>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <HAL_IncTick+0x24>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000008 	.word	0x20000008
 80006c4:	200000d4 	.word	0x200000d4

080006c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80006cc:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <HAL_GetTick+0x14>)
 80006ce:	681b      	ldr	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	200000d4 	.word	0x200000d4

080006e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000712:	4a04      	ldr	r2, [pc, #16]	@ (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	60d3      	str	r3, [r2, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <__NVIC_GetPriorityGrouping+0x18>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	f003 0307 	and.w	r3, r3, #7
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	db0a      	blt.n	800076e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	b2da      	uxtb	r2, r3
 800075c:	490c      	ldr	r1, [pc, #48]	@ (8000790 <__NVIC_SetPriority+0x4c>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	0112      	lsls	r2, r2, #4
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	440b      	add	r3, r1
 8000768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800076c:	e00a      	b.n	8000784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4908      	ldr	r1, [pc, #32]	@ (8000794 <__NVIC_SetPriority+0x50>)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	f003 030f 	and.w	r3, r3, #15
 800077a:	3b04      	subs	r3, #4
 800077c:	0112      	lsls	r2, r2, #4
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	440b      	add	r3, r1
 8000782:	761a      	strb	r2, [r3, #24]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000e100 	.word	0xe000e100
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000798:	b480      	push	{r7}
 800079a:	b089      	sub	sp, #36	@ 0x24
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	f1c3 0307 	rsb	r3, r3, #7
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	bf28      	it	cs
 80007b6:	2304      	movcs	r3, #4
 80007b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	3304      	adds	r3, #4
 80007be:	2b06      	cmp	r3, #6
 80007c0:	d902      	bls.n	80007c8 <NVIC_EncodePriority+0x30>
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3b03      	subs	r3, #3
 80007c6:	e000      	b.n	80007ca <NVIC_EncodePriority+0x32>
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007d0:	69bb      	ldr	r3, [r7, #24]
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43da      	mvns	r2, r3
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	401a      	ands	r2, r3
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	43d9      	mvns	r1, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	4313      	orrs	r3, r2
         );
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3724      	adds	r7, #36	@ 0x24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000810:	d301      	bcc.n	8000816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000812:	2301      	movs	r3, #1
 8000814:	e00f      	b.n	8000836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000816:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <SysTick_Config+0x40>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081e:	210f      	movs	r1, #15
 8000820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000824:	f7ff ff8e 	bl	8000744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <SysTick_Config+0x40>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082e:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <SysTick_Config+0x40>)
 8000830:	2207      	movs	r2, #7
 8000832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	e000e010 	.word	0xe000e010

08000844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff47 	bl	80006e0 <__NVIC_SetPriorityGrouping>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800086c:	f7ff ff5c 	bl	8000728 <__NVIC_GetPriorityGrouping>
 8000870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	6978      	ldr	r0, [r7, #20]
 8000878:	f7ff ff8e 	bl	8000798 <NVIC_EncodePriority>
 800087c:	4602      	mov	r2, r0
 800087e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff5d 	bl	8000744 <__NVIC_SetPriority>
}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffb0 	bl	8000800 <SysTick_Config>
 80008a0:	4603      	mov	r3, r0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d101      	bne.n	80008be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e054      	b.n	8000968 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	7f5b      	ldrb	r3, [r3, #29]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d105      	bne.n	80008d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fdb2 	bl	8000438 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2202      	movs	r2, #2
 80008d8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	791b      	ldrb	r3, [r3, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d10c      	bne.n	80008fc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a22      	ldr	r2, [pc, #136]	@ (8000970 <HAL_CRC_Init+0xc4>)
 80008e8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	689a      	ldr	r2, [r3, #8]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f022 0218 	bic.w	r2, r2, #24
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	e00c      	b.n	8000916 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6899      	ldr	r1, [r3, #8]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	461a      	mov	r2, r3
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f000 f942 	bl	8000b90 <HAL_CRCEx_Polynomial_Set>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e028      	b.n	8000968 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	795b      	ldrb	r3, [r3, #5]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d105      	bne.n	800092a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	e004      	b.n	8000934 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	6912      	ldr	r2, [r2, #16]
 8000932:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	695a      	ldr	r2, [r3, #20]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	430a      	orrs	r2, r1
 8000948:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	699a      	ldr	r2, [r3, #24]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	430a      	orrs	r2, r1
 800095e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2201      	movs	r2, #1
 8000964:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	04c11db7 	.word	0x04c11db7

08000974 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000980:	2300      	movs	r3, #0
 8000982:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2202      	movs	r2, #2
 8000988:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d006      	beq.n	80009a0 <HAL_CRC_Accumulate+0x2c>
 8000992:	2b03      	cmp	r3, #3
 8000994:	d829      	bhi.n	80009ea <HAL_CRC_Accumulate+0x76>
 8000996:	2b01      	cmp	r3, #1
 8000998:	d019      	beq.n	80009ce <HAL_CRC_Accumulate+0x5a>
 800099a:	2b02      	cmp	r3, #2
 800099c:	d01e      	beq.n	80009dc <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 800099e:	e024      	b.n	80009ea <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	e00a      	b.n	80009bc <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	441a      	add	r2, r3
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d3f0      	bcc.n	80009a6 <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	613b      	str	r3, [r7, #16]
      break;
 80009cc:	e00e      	b.n	80009ec <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f000 f812 	bl	80009fc <CRC_Handle_8>
 80009d8:	6138      	str	r0, [r7, #16]
      break;
 80009da:	e007      	b.n	80009ec <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	68b9      	ldr	r1, [r7, #8]
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f000 f89b 	bl	8000b1c <CRC_Handle_16>
 80009e6:	6138      	str	r0, [r7, #16]
      break;
 80009e8:	e000      	b.n	80009ec <HAL_CRC_Accumulate+0x78>
      break;
 80009ea:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2201      	movs	r2, #1
 80009f0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80009f2:	693b      	ldr	r3, [r7, #16]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	@ 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
 8000a0c:	e023      	b.n	8000a56 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	4413      	add	r3, r2
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	3301      	adds	r3, #1
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	440b      	add	r3, r1
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000a28:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	3302      	adds	r3, #2
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	440b      	add	r3, r1
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8000a38:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	3303      	adds	r3, #3
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	440b      	add	r3, r1
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8000a4c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000a4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	3301      	adds	r3, #1
 8000a54:	61fb      	str	r3, [r7, #28]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	089b      	lsrs	r3, r3, #2
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d3d6      	bcc.n	8000a0e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0303 	and.w	r3, r3, #3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d04f      	beq.n	8000b0a <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d107      	bne.n	8000a84 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	6812      	ldr	r2, [r2, #0]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d117      	bne.n	8000abe <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	4413      	add	r3, r2
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	021b      	lsls	r3, r3, #8
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	68b9      	ldr	r1, [r7, #8]
 8000aa6:	440b      	add	r3, r1
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b21b      	sxth	r3, r3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	8b7a      	ldrh	r2, [r7, #26]
 8000abc:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d120      	bne.n	8000b0a <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	68ba      	ldr	r2, [r7, #8]
 8000ace:	4413      	add	r3, r2
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b21b      	sxth	r3, r3
 8000ad4:	021b      	lsls	r3, r3, #8
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	3301      	adds	r3, #1
 8000ade:	68b9      	ldr	r1, [r7, #8]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	8b7a      	ldrh	r2, [r7, #26]
 8000af6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	3302      	adds	r3, #2
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	4413      	add	r3, r2
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	6812      	ldr	r2, [r2, #0]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3724      	adds	r7, #36	@ 0x24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b087      	sub	sp, #28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e013      	b.n	8000b56 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	041a      	lsls	r2, r3, #16
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	3302      	adds	r3, #2
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	440b      	add	r3, r1
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3301      	adds	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	085b      	lsrs	r3, r3, #1
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d3e6      	bcc.n	8000b2e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d009      	beq.n	8000b7e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	4413      	add	r3, r2
 8000b78:	881a      	ldrh	r2, [r3, #0]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	371c      	adds	r7, #28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000ba0:	231f      	movs	r3, #31
 8000ba2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	75fb      	strb	r3, [r7, #23]
 8000bb2:	e063      	b.n	8000c7c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000bb4:	bf00      	nop
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	1e5a      	subs	r2, r3, #1
 8000bba:	613a      	str	r2, [r7, #16]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d009      	beq.n	8000bd4 <HAL_CRCEx_Polynomial_Set+0x44>
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	f003 031f 	and.w	r3, r3, #31
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0f0      	beq.n	8000bb6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b18      	cmp	r3, #24
 8000bd8:	d846      	bhi.n	8000c68 <HAL_CRCEx_Polynomial_Set+0xd8>
 8000bda:	a201      	add	r2, pc, #4	@ (adr r2, 8000be0 <HAL_CRCEx_Polynomial_Set+0x50>)
 8000bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be0:	08000c6f 	.word	0x08000c6f
 8000be4:	08000c69 	.word	0x08000c69
 8000be8:	08000c69 	.word	0x08000c69
 8000bec:	08000c69 	.word	0x08000c69
 8000bf0:	08000c69 	.word	0x08000c69
 8000bf4:	08000c69 	.word	0x08000c69
 8000bf8:	08000c69 	.word	0x08000c69
 8000bfc:	08000c69 	.word	0x08000c69
 8000c00:	08000c5d 	.word	0x08000c5d
 8000c04:	08000c69 	.word	0x08000c69
 8000c08:	08000c69 	.word	0x08000c69
 8000c0c:	08000c69 	.word	0x08000c69
 8000c10:	08000c69 	.word	0x08000c69
 8000c14:	08000c69 	.word	0x08000c69
 8000c18:	08000c69 	.word	0x08000c69
 8000c1c:	08000c69 	.word	0x08000c69
 8000c20:	08000c51 	.word	0x08000c51
 8000c24:	08000c69 	.word	0x08000c69
 8000c28:	08000c69 	.word	0x08000c69
 8000c2c:	08000c69 	.word	0x08000c69
 8000c30:	08000c69 	.word	0x08000c69
 8000c34:	08000c69 	.word	0x08000c69
 8000c38:	08000c69 	.word	0x08000c69
 8000c3c:	08000c69 	.word	0x08000c69
 8000c40:	08000c45 	.word	0x08000c45
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d913      	bls.n	8000c72 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000c4e:	e010      	b.n	8000c72 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	2b07      	cmp	r3, #7
 8000c54:	d90f      	bls.n	8000c76 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000c5a:	e00c      	b.n	8000c76 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	2b0f      	cmp	r3, #15
 8000c60:	d90b      	bls.n	8000c7a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000c66:	e008      	b.n	8000c7a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	75fb      	strb	r3, [r7, #23]
        break;
 8000c6c:	e006      	b.n	8000c7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000c6e:	bf00      	nop
 8000c70:	e004      	b.n	8000c7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000c72:	bf00      	nop
 8000c74:	e002      	b.n	8000c7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000c76:	bf00      	nop
 8000c78:	e000      	b.n	8000c7c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000c7a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10d      	bne.n	8000c9e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f023 0118 	bic.w	r1, r3, #24
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	371c      	adds	r7, #28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cba:	e160      	b.n	8000f7e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 8152 	beq.w	8000f78 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d005      	beq.n	8000cec <HAL_GPIO_Init+0x40>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d130      	bne.n	8000d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	68da      	ldr	r2, [r3, #12]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d22:	2201      	movs	r2, #1
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	f003 0201 	and.w	r2, r3, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d017      	beq.n	8000d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d123      	bne.n	8000dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	08da      	lsrs	r2, r3, #3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3208      	adds	r2, #8
 8000d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	691a      	ldr	r2, [r3, #16]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	f003 0307 	and.w	r3, r3, #7
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	08da      	lsrs	r2, r3, #3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3208      	adds	r2, #8
 8000dd8:	6939      	ldr	r1, [r7, #16]
 8000dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0203 	and.w	r2, r3, #3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 80ac 	beq.w	8000f78 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e20:	4b5e      	ldr	r3, [pc, #376]	@ (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a5d      	ldr	r2, [pc, #372]	@ (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b5b      	ldr	r3, [pc, #364]	@ (8000f9c <HAL_GPIO_Init+0x2f0>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e38:	4a59      	ldr	r2, [pc, #356]	@ (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	3302      	adds	r3, #2
 8000e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e62:	d025      	beq.n	8000eb0 <HAL_GPIO_Init+0x204>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a4f      	ldr	r2, [pc, #316]	@ (8000fa4 <HAL_GPIO_Init+0x2f8>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d01f      	beq.n	8000eac <HAL_GPIO_Init+0x200>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a4e      	ldr	r2, [pc, #312]	@ (8000fa8 <HAL_GPIO_Init+0x2fc>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d019      	beq.n	8000ea8 <HAL_GPIO_Init+0x1fc>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a4d      	ldr	r2, [pc, #308]	@ (8000fac <HAL_GPIO_Init+0x300>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d013      	beq.n	8000ea4 <HAL_GPIO_Init+0x1f8>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a4c      	ldr	r2, [pc, #304]	@ (8000fb0 <HAL_GPIO_Init+0x304>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d00d      	beq.n	8000ea0 <HAL_GPIO_Init+0x1f4>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a4b      	ldr	r2, [pc, #300]	@ (8000fb4 <HAL_GPIO_Init+0x308>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d007      	beq.n	8000e9c <HAL_GPIO_Init+0x1f0>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8000fb8 <HAL_GPIO_Init+0x30c>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d101      	bne.n	8000e98 <HAL_GPIO_Init+0x1ec>
 8000e94:	2306      	movs	r3, #6
 8000e96:	e00c      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000e98:	2307      	movs	r3, #7
 8000e9a:	e00a      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	e008      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	e006      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e004      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	e002      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <HAL_GPIO_Init+0x206>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	f002 0203 	and.w	r2, r2, #3
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	4093      	lsls	r3, r2
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ec2:	4937      	ldr	r1, [pc, #220]	@ (8000fa0 <HAL_GPIO_Init+0x2f4>)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ef4:	4a31      	ldr	r2, [pc, #196]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000efa:	4b30      	ldr	r3, [pc, #192]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f1e:	4a27      	ldr	r2, [pc, #156]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f24:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f48:	4a1c      	ldr	r2, [pc, #112]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f72:	4a12      	ldr	r2, [pc, #72]	@ (8000fbc <HAL_GPIO_Init+0x310>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa22 f303 	lsr.w	r3, r2, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f47f ae97 	bne.w	8000cbc <HAL_GPIO_Init+0x10>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	48000800 	.word	0x48000800
 8000fac:	48000c00 	.word	0x48000c00
 8000fb0:	48001000 	.word	0x48001000
 8000fb4:	48001400 	.word	0x48001400
 8000fb8:	48001800 	.word	0x48001800
 8000fbc:	40010400 	.word	0x40010400

08000fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fcc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fd0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fd6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f001 b80a 	b.w	8001ffa <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f000 8161 	beq.w	80012be <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ffc:	4bae      	ldr	r3, [pc, #696]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 030c 	and.w	r3, r3, #12
 8001004:	2b04      	cmp	r3, #4
 8001006:	d00c      	beq.n	8001022 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001008:	4bab      	ldr	r3, [pc, #684]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 030c 	and.w	r3, r3, #12
 8001010:	2b08      	cmp	r3, #8
 8001012:	d157      	bne.n	80010c4 <HAL_RCC_OscConfig+0x104>
 8001014:	4ba8      	ldr	r3, [pc, #672]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800101c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001020:	d150      	bne.n	80010c4 <HAL_RCC_OscConfig+0x104>
 8001022:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001026:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800102a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800102e:	fa93 f3a3 	rbit	r3, r3
 8001032:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001036:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b3f      	cmp	r3, #63	@ 0x3f
 8001042:	d802      	bhi.n	800104a <HAL_RCC_OscConfig+0x8a>
 8001044:	4b9c      	ldr	r3, [pc, #624]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	e015      	b.n	8001076 <HAL_RCC_OscConfig+0xb6>
 800104a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800104e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001052:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001056:	fa93 f3a3 	rbit	r3, r3
 800105a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800105e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001062:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001066:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800106a:	fa93 f3a3 	rbit	r3, r3
 800106e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001072:	4b91      	ldr	r3, [pc, #580]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001076:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800107a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800107e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001082:	fa92 f2a2 	rbit	r2, r2
 8001086:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800108a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800108e:	fab2 f282 	clz	r2, r2
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	f042 0220 	orr.w	r2, r2, #32
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	f002 021f 	and.w	r2, r2, #31
 800109e:	2101      	movs	r1, #1
 80010a0:	fa01 f202 	lsl.w	r2, r1, r2
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8108 	beq.w	80012bc <HAL_RCC_OscConfig+0x2fc>
 80010ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f040 80ff 	bne.w	80012bc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	f000 bf9b 	b.w	8001ffa <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010d4:	d106      	bne.n	80010e4 <HAL_RCC_OscConfig+0x124>
 80010d6:	4b78      	ldr	r3, [pc, #480]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a77      	ldr	r2, [pc, #476]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e036      	b.n	8001152 <HAL_RCC_OscConfig+0x192>
 80010e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10c      	bne.n	800110e <HAL_RCC_OscConfig+0x14e>
 80010f4:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a6f      	ldr	r2, [pc, #444]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 80010fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b6d      	ldr	r3, [pc, #436]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a6c      	ldr	r2, [pc, #432]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 8001106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	e021      	b.n	8001152 <HAL_RCC_OscConfig+0x192>
 800110e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001112:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800111e:	d10c      	bne.n	800113a <HAL_RCC_OscConfig+0x17a>
 8001120:	4b65      	ldr	r3, [pc, #404]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a64      	ldr	r2, [pc, #400]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 8001126:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b62      	ldr	r3, [pc, #392]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a61      	ldr	r2, [pc, #388]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 8001132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e00b      	b.n	8001152 <HAL_RCC_OscConfig+0x192>
 800113a:	4b5f      	ldr	r3, [pc, #380]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a5e      	ldr	r2, [pc, #376]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 8001140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b5c      	ldr	r3, [pc, #368]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a5b      	ldr	r2, [pc, #364]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 800114c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001150:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001156:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d054      	beq.n	800120c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001162:	f7ff fab1 	bl	80006c8 <HAL_GetTick>
 8001166:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	e00a      	b.n	8001182 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff faac 	bl	80006c8 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b64      	cmp	r3, #100	@ 0x64
 800117a:	d902      	bls.n	8001182 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	f000 bf3c 	b.w	8001ffa <HAL_RCC_OscConfig+0x103a>
 8001182:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001186:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001196:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	fab3 f383 	clz	r3, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80011a2:	d802      	bhi.n	80011aa <HAL_RCC_OscConfig+0x1ea>
 80011a4:	4b44      	ldr	r3, [pc, #272]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	e015      	b.n	80011d6 <HAL_RCC_OscConfig+0x216>
 80011aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011ae:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80011be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011c2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80011c6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80011d2:	4b39      	ldr	r3, [pc, #228]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 80011d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011da:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80011de:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80011e2:	fa92 f2a2 	rbit	r2, r2
 80011e6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80011ea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80011ee:	fab2 f282 	clz	r2, r2
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	f042 0220 	orr.w	r2, r2, #32
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	f002 021f 	and.w	r2, r2, #31
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	4013      	ands	r3, r2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0b0      	beq.n	800116c <HAL_RCC_OscConfig+0x1ac>
 800120a:	e058      	b.n	80012be <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fa5c 	bl	80006c8 <HAL_GetTick>
 8001210:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001214:	e00a      	b.n	800122c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001216:	f7ff fa57 	bl	80006c8 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	@ 0x64
 8001224:	d902      	bls.n	800122c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	f000 bee7 	b.w	8001ffa <HAL_RCC_OscConfig+0x103a>
 800122c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001230:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001234:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001240:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b3f      	cmp	r3, #63	@ 0x3f
 800124c:	d802      	bhi.n	8001254 <HAL_RCC_OscConfig+0x294>
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	e015      	b.n	8001280 <HAL_RCC_OscConfig+0x2c0>
 8001254:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001258:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001260:	fa93 f3a3 	rbit	r3, r3
 8001264:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001268:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800126c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001270:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001274:	fa93 f3a3 	rbit	r3, r3
 8001278:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <HAL_RCC_OscConfig+0x2f8>)
 800127e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001280:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001284:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001288:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800128c:	fa92 f2a2 	rbit	r2, r2
 8001290:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001294:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001298:	fab2 f282 	clz	r2, r2
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	f042 0220 	orr.w	r2, r2, #32
 80012a2:	b2d2      	uxtb	r2, r2
 80012a4:	f002 021f 	and.w	r2, r2, #31
 80012a8:	2101      	movs	r1, #1
 80012aa:	fa01 f202 	lsl.w	r2, r1, r2
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1b0      	bne.n	8001216 <HAL_RCC_OscConfig+0x256>
 80012b4:	e003      	b.n	80012be <HAL_RCC_OscConfig+0x2fe>
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 816d 	beq.w	80015ae <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012d4:	4bcd      	ldr	r3, [pc, #820]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00c      	beq.n	80012fa <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012e0:	4bca      	ldr	r3, [pc, #808]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d16e      	bne.n	80013ca <HAL_RCC_OscConfig+0x40a>
 80012ec:	4bc7      	ldr	r3, [pc, #796]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80012f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80012f8:	d167      	bne.n	80013ca <HAL_RCC_OscConfig+0x40a>
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001300:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800130c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001310:	fab3 f383 	clz	r3, r3
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b3f      	cmp	r3, #63	@ 0x3f
 8001318:	d802      	bhi.n	8001320 <HAL_RCC_OscConfig+0x360>
 800131a:	4bbc      	ldr	r3, [pc, #752]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	e013      	b.n	8001348 <HAL_RCC_OscConfig+0x388>
 8001320:	2302      	movs	r3, #2
 8001322:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001338:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001344:	4bb1      	ldr	r3, [pc, #708]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 8001346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001348:	2202      	movs	r2, #2
 800134a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800134e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001352:	fa92 f2a2 	rbit	r2, r2
 8001356:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800135a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800135e:	fab2 f282 	clz	r2, r2
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	f042 0220 	orr.w	r2, r2, #32
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	f002 021f 	and.w	r2, r2, #31
 800136e:	2101      	movs	r1, #1
 8001370:	fa01 f202 	lsl.w	r2, r1, r2
 8001374:	4013      	ands	r3, r2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <HAL_RCC_OscConfig+0x3d0>
 800137a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800137e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d002      	beq.n	8001390 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	f000 be35 	b.w	8001ffa <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b9e      	ldr	r3, [pc, #632]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800139c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	21f8      	movs	r1, #248	@ 0xf8
 80013a6:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80013ae:	fa91 f1a1 	rbit	r1, r1
 80013b2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80013b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80013ba:	fab1 f181 	clz	r1, r1
 80013be:	b2c9      	uxtb	r1, r1
 80013c0:	408b      	lsls	r3, r1
 80013c2:	4992      	ldr	r1, [pc, #584]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c8:	e0f1      	b.n	80015ae <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8083 	beq.w	80014e2 <HAL_RCC_OscConfig+0x522>
 80013dc:	2301      	movs	r3, #1
 80013de:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80013ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80013fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	461a      	mov	r2, r3
 8001404:	2301      	movs	r3, #1
 8001406:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001408:	f7ff f95e 	bl	80006c8 <HAL_GetTick>
 800140c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001410:	e00a      	b.n	8001428 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001412:	f7ff f959 	bl	80006c8 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d902      	bls.n	8001428 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	f000 bde9 	b.w	8001ffa <HAL_RCC_OscConfig+0x103a>
 8001428:	2302      	movs	r3, #2
 800142a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001432:	fa93 f3a3 	rbit	r3, r3
 8001436:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800143a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b3f      	cmp	r3, #63	@ 0x3f
 8001446:	d802      	bhi.n	800144e <HAL_RCC_OscConfig+0x48e>
 8001448:	4b70      	ldr	r3, [pc, #448]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	e013      	b.n	8001476 <HAL_RCC_OscConfig+0x4b6>
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001454:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001460:	2302      	movs	r3, #2
 8001462:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001466:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800146a:	fa93 f3a3 	rbit	r3, r3
 800146e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001472:	4b66      	ldr	r3, [pc, #408]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001476:	2202      	movs	r2, #2
 8001478:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800147c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001480:	fa92 f2a2 	rbit	r2, r2
 8001484:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001488:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800148c:	fab2 f282 	clz	r2, r2
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	f042 0220 	orr.w	r2, r2, #32
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	f002 021f 	and.w	r2, r2, #31
 800149c:	2101      	movs	r1, #1
 800149e:	fa01 f202 	lsl.w	r2, r1, r2
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0b4      	beq.n	8001412 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a8:	4b58      	ldr	r3, [pc, #352]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	21f8      	movs	r1, #248	@ 0xf8
 80014be:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80014c6:	fa91 f1a1 	rbit	r1, r1
 80014ca:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80014ce:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80014d2:	fab1 f181 	clz	r1, r1
 80014d6:	b2c9      	uxtb	r1, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	494c      	ldr	r1, [pc, #304]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e065      	b.n	80015ae <HAL_RCC_OscConfig+0x5ee>
 80014e2:	2301      	movs	r3, #1
 80014e4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80014f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f8:	fab3 f383 	clz	r3, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001502:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	461a      	mov	r2, r3
 800150a:	2300      	movs	r3, #0
 800150c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff f8db 	bl	80006c8 <HAL_GetTick>
 8001512:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	e00a      	b.n	800152e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff f8d6 	bl	80006c8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d902      	bls.n	800152e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	f000 bd66 	b.w	8001ffa <HAL_RCC_OscConfig+0x103a>
 800152e:	2302      	movs	r3, #2
 8001530:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001534:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001538:	fa93 f3a3 	rbit	r3, r3
 800153c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001540:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b3f      	cmp	r3, #63	@ 0x3f
 800154c:	d802      	bhi.n	8001554 <HAL_RCC_OscConfig+0x594>
 800154e:	4b2f      	ldr	r3, [pc, #188]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	e013      	b.n	800157c <HAL_RCC_OscConfig+0x5bc>
 8001554:	2302      	movs	r3, #2
 8001556:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800156c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001578:	4b24      	ldr	r3, [pc, #144]	@ (800160c <HAL_RCC_OscConfig+0x64c>)
 800157a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157c:	2202      	movs	r2, #2
 800157e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001582:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001586:	fa92 f2a2 	rbit	r2, r2
 800158a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800158e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001592:	fab2 f282 	clz	r2, r2
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	f042 0220 	orr.w	r2, r2, #32
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	f002 021f 	and.w	r2, r2, #31
 80015a2:	2101      	movs	r1, #1
 80015a4:	fa01 f202 	lsl.w	r2, r1, r2
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1b4      	bne.n	8001518 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8119 	beq.w	80017f6 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 8082 	beq.w	80016da <HAL_RCC_OscConfig+0x71a>
 80015d6:	2301      	movs	r3, #1
 80015d8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015e0:	fa93 f3a3 	rbit	r3, r3
 80015e4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80015e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ec:	fab3 f383 	clz	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_RCC_OscConfig+0x650>)
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	461a      	mov	r2, r3
 80015fc:	2301      	movs	r3, #1
 80015fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff f862 	bl	80006c8 <HAL_GetTick>
 8001604:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001608:	e00f      	b.n	800162a <HAL_RCC_OscConfig+0x66a>
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff f858 	bl	80006c8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d902      	bls.n	800162a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	f000 bce8 	b.w	8001ffa <HAL_RCC_OscConfig+0x103a>
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001634:	fa93 f2a3 	rbit	r2, r3
 8001638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800163c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001646:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800164a:	2202      	movs	r2, #2
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001652:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	fa93 f2a3 	rbit	r2, r3
 800165c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800166e:	2202      	movs	r2, #2
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001676:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	fa93 f2a3 	rbit	r2, r3
 8001680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001684:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001688:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	4bb0      	ldr	r3, [pc, #704]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 800168c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800168e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001692:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001696:	2102      	movs	r1, #2
 8001698:	6019      	str	r1, [r3, #0]
 800169a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800169e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f1a3 	rbit	r1, r3
 80016a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016b0:	6019      	str	r1, [r3, #0]
  return result;
 80016b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d09d      	beq.n	8001614 <HAL_RCC_OscConfig+0x654>
 80016d8:	e08d      	b.n	80017f6 <HAL_RCC_OscConfig+0x836>
 80016da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fa93 f2a3 	rbit	r2, r3
 80016f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016fc:	601a      	str	r2, [r3, #0]
  return result;
 80016fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001702:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001706:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	4b8f      	ldr	r3, [pc, #572]	@ (8001950 <HAL_RCC_OscConfig+0x990>)
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	461a      	mov	r2, r3
 8001718:	2300      	movs	r3, #0
 800171a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171c:	f7fe ffd4 	bl	80006c8 <HAL_GetTick>
 8001720:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	e00a      	b.n	800173c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001726:	f7fe ffcf 	bl	80006c8 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d902      	bls.n	800173c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	f000 bc5f 	b.w	8001ffa <HAL_RCC_OscConfig+0x103a>
 800173c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001740:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001744:	2202      	movs	r2, #2
 8001746:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800174c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	fa93 f2a3 	rbit	r2, r3
 8001756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800175a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001764:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001768:	2202      	movs	r2, #2
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001770:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fa93 f2a3 	rbit	r2, r3
 800177a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001788:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800178c:	2202      	movs	r2, #2
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001794:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	fa93 f2a3 	rbit	r2, r3
 800179e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80017a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a8:	4b68      	ldr	r3, [pc, #416]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 80017aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017b4:	2102      	movs	r1, #2
 80017b6:	6019      	str	r1, [r3, #0]
 80017b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fa93 f1a3 	rbit	r1, r3
 80017c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ca:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017ce:	6019      	str	r1, [r3, #0]
  return result;
 80017d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	f003 031f 	and.w	r3, r3, #31
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d197      	bne.n	8001726 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 819c 	beq.w	8001b44 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b4e      	ldr	r3, [pc, #312]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d116      	bne.n	800184c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b4b      	ldr	r3, [pc, #300]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a4a      	ldr	r2, [pc, #296]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b48      	ldr	r3, [pc, #288]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001832:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001840:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001844:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001846:	2301      	movs	r3, #1
 8001848:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	4b41      	ldr	r3, [pc, #260]	@ (8001954 <HAL_RCC_OscConfig+0x994>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d11a      	bne.n	800188e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001858:	4b3e      	ldr	r3, [pc, #248]	@ (8001954 <HAL_RCC_OscConfig+0x994>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a3d      	ldr	r2, [pc, #244]	@ (8001954 <HAL_RCC_OscConfig+0x994>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001862:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001864:	f7fe ff30 	bl	80006c8 <HAL_GetTick>
 8001868:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	e009      	b.n	8001882 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186e:	f7fe ff2b 	bl	80006c8 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	@ 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e3bb      	b.n	8001ffa <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <HAL_RCC_OscConfig+0x994>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0ef      	beq.n	800186e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001892:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d106      	bne.n	80018ac <HAL_RCC_OscConfig+0x8ec>
 800189e:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4a2a      	ldr	r2, [pc, #168]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6213      	str	r3, [r2, #32]
 80018aa:	e035      	b.n	8001918 <HAL_RCC_OscConfig+0x958>
 80018ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10c      	bne.n	80018d6 <HAL_RCC_OscConfig+0x916>
 80018bc:	4b23      	ldr	r3, [pc, #140]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4a22      	ldr	r2, [pc, #136]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6213      	str	r3, [r2, #32]
 80018c8:	4b20      	ldr	r3, [pc, #128]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4a1f      	ldr	r2, [pc, #124]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 80018ce:	f023 0304 	bic.w	r3, r3, #4
 80018d2:	6213      	str	r3, [r2, #32]
 80018d4:	e020      	b.n	8001918 <HAL_RCC_OscConfig+0x958>
 80018d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x940>
 80018e6:	4b19      	ldr	r3, [pc, #100]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4a18      	ldr	r2, [pc, #96]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6213      	str	r3, [r2, #32]
 80018f2:	4b16      	ldr	r3, [pc, #88]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	4a15      	ldr	r2, [pc, #84]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6213      	str	r3, [r2, #32]
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0x958>
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a11      	ldr	r2, [pc, #68]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a0e      	ldr	r2, [pc, #56]	@ (800194c <HAL_RCC_OscConfig+0x98c>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 8085 	beq.w	8001a34 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7fe fecd 	bl	80006c8 <HAL_GetTick>
 800192e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001932:	e011      	b.n	8001958 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7fe fec8 	bl	80006c8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d907      	bls.n	8001958 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e356      	b.n	8001ffa <HAL_RCC_OscConfig+0x103a>
 800194c:	40021000 	.word	0x40021000
 8001950:	10908120 	.word	0x10908120
 8001954:	40007000 	.word	0x40007000
 8001958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800195c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001960:	2202      	movs	r2, #2
 8001962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001968:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	fa93 f2a3 	rbit	r2, r3
 8001972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001976:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001980:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001984:	2202      	movs	r2, #2
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	fa93 f2a3 	rbit	r2, r3
 8001996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800199e:	601a      	str	r2, [r3, #0]
  return result;
 80019a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019aa:	fab3 f383 	clz	r3, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d102      	bne.n	80019c0 <HAL_RCC_OscConfig+0xa00>
 80019ba:	4b98      	ldr	r3, [pc, #608]	@ (8001c1c <HAL_RCC_OscConfig+0xc5c>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	e013      	b.n	80019e8 <HAL_RCC_OscConfig+0xa28>
 80019c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019de:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	4b8d      	ldr	r3, [pc, #564]	@ (8001c1c <HAL_RCC_OscConfig+0xc5c>)
 80019e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019ec:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80019f0:	2102      	movs	r1, #2
 80019f2:	6011      	str	r1, [r2, #0]
 80019f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019f8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	fa92 f1a2 	rbit	r1, r2
 8001a02:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a06:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001a0a:	6011      	str	r1, [r2, #0]
  return result;
 8001a0c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a10:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	fab2 f282 	clz	r2, r2
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	f002 021f 	and.w	r2, r2, #31
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d080      	beq.n	8001934 <HAL_RCC_OscConfig+0x974>
 8001a32:	e07d      	b.n	8001b30 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a34:	f7fe fe48 	bl	80006c8 <HAL_GetTick>
 8001a38:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3c:	e00b      	b.n	8001a56 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7fe fe43 	bl	80006c8 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e2d1      	b.n	8001ffa <HAL_RCC_OscConfig+0x103a>
 8001a56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001a5e:	2202      	movs	r2, #2
 8001a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a66:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a74:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a82:	2202      	movs	r2, #2
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a8a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fa93 f2a3 	rbit	r2, r3
 8001a94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a98:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001a9c:	601a      	str	r2, [r3, #0]
  return result;
 8001a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001aa6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <HAL_RCC_OscConfig+0xafe>
 8001ab8:	4b58      	ldr	r3, [pc, #352]	@ (8001c1c <HAL_RCC_OscConfig+0xc5c>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	e013      	b.n	8001ae6 <HAL_RCC_OscConfig+0xb26>
 8001abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ace:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	fa93 f2a3 	rbit	r2, r3
 8001ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001adc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8001c1c <HAL_RCC_OscConfig+0xc5c>)
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001aea:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001aee:	2102      	movs	r1, #2
 8001af0:	6011      	str	r1, [r2, #0]
 8001af2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001af6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	fa92 f1a2 	rbit	r1, r2
 8001b00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b04:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001b08:	6011      	str	r1, [r2, #0]
  return result;
 8001b0a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b0e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	fab2 f282 	clz	r2, r2
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	f002 021f 	and.w	r2, r2, #31
 8001b24:	2101      	movs	r1, #1
 8001b26:	fa01 f202 	lsl.w	r2, r1, r2
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d186      	bne.n	8001a3e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b30:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4b38      	ldr	r3, [pc, #224]	@ (8001c1c <HAL_RCC_OscConfig+0xc5c>)
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	4a37      	ldr	r2, [pc, #220]	@ (8001c1c <HAL_RCC_OscConfig+0xc5c>)
 8001b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8251 	beq.w	8001ff8 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b56:	4b31      	ldr	r3, [pc, #196]	@ (8001c1c <HAL_RCC_OscConfig+0xc5c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	f000 820f 	beq.w	8001f82 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	f040 8165 	bne.w	8001e40 <HAL_RCC_OscConfig+0xe80>
 8001b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b7e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b88:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fa93 f2a3 	rbit	r2, r3
 8001b92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b96:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001b9a:	601a      	str	r2, [r3, #0]
  return result;
 8001b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001ba4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bb0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2300      	movs	r3, #0
 8001bba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7fe fd84 	bl	80006c8 <HAL_GetTick>
 8001bc0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc4:	e009      	b.n	8001bda <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc6:	f7fe fd7f 	bl	80006c8 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e20f      	b.n	8001ffa <HAL_RCC_OscConfig+0x103a>
 8001bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bde:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001be2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bec:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bfa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001bfe:	601a      	str	r2, [r3, #0]
  return result;
 8001c00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c04:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c12:	d805      	bhi.n	8001c20 <HAL_RCC_OscConfig+0xc60>
 8001c14:	4b01      	ldr	r3, [pc, #4]	@ (8001c1c <HAL_RCC_OscConfig+0xc5c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	e02a      	b.n	8001c70 <HAL_RCC_OscConfig+0xcb0>
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c24:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c32:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	fa93 f2a3 	rbit	r2, r3
 8001c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c40:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001c4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c58:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	fa93 f2a3 	rbit	r2, r3
 8001c62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c66:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	4bca      	ldr	r3, [pc, #808]	@ (8001f98 <HAL_RCC_OscConfig+0xfd8>)
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c74:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c7c:	6011      	str	r1, [r2, #0]
 8001c7e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c82:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	fa92 f1a2 	rbit	r1, r2
 8001c8c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c90:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001c94:	6011      	str	r1, [r2, #0]
  return result;
 8001c96:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c9a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	fab2 f282 	clz	r2, r2
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f002 021f 	and.w	r2, r2, #31
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d184      	bne.n	8001bc6 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cbc:	4bb6      	ldr	r3, [pc, #728]	@ (8001f98 <HAL_RCC_OscConfig+0xfd8>)
 8001cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc0:	f023 020f 	bic.w	r2, r3, #15
 8001cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	49b1      	ldr	r1, [pc, #708]	@ (8001f98 <HAL_RCC_OscConfig+0xfd8>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001cd6:	4bb0      	ldr	r3, [pc, #704]	@ (8001f98 <HAL_RCC_OscConfig+0xfd8>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6a19      	ldr	r1, [r3, #32]
 8001cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	49a7      	ldr	r1, [pc, #668]	@ (8001f98 <HAL_RCC_OscConfig+0xfd8>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
 8001cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d02:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d06:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d10:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	fa93 f2a3 	rbit	r2, r3
 8001d1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d1e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d22:	601a      	str	r2, [r3, #0]
  return result;
 8001d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d28:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d2c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d38:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2301      	movs	r3, #1
 8001d42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7fe fcc0 	bl	80006c8 <HAL_GetTick>
 8001d48:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d4c:	e009      	b.n	8001d62 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7fe fcbb 	bl	80006c8 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e14b      	b.n	8001ffa <HAL_RCC_OscConfig+0x103a>
 8001d62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d66:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d74:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	fa93 f2a3 	rbit	r2, r3
 8001d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d82:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d86:	601a      	str	r2, [r3, #0]
  return result;
 8001d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d8c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001d90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d92:	fab3 f383 	clz	r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d9a:	d802      	bhi.n	8001da2 <HAL_RCC_OscConfig+0xde2>
 8001d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f98 <HAL_RCC_OscConfig+0xfd8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	e027      	b.n	8001df2 <HAL_RCC_OscConfig+0xe32>
 8001da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001daa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	fa93 f2a3 	rbit	r2, r3
 8001dbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dcc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001dd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dda:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	fa93 f2a3 	rbit	r2, r3
 8001de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	4b6a      	ldr	r3, [pc, #424]	@ (8001f98 <HAL_RCC_OscConfig+0xfd8>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001df6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001dfa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001dfe:	6011      	str	r1, [r2, #0]
 8001e00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e04:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	fa92 f1a2 	rbit	r1, r2
 8001e0e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e12:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001e16:	6011      	str	r1, [r2, #0]
  return result;
 8001e18:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e1c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	fab2 f282 	clz	r2, r2
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	f042 0220 	orr.w	r2, r2, #32
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f002 021f 	and.w	r2, r2, #31
 8001e32:	2101      	movs	r1, #1
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d087      	beq.n	8001d4e <HAL_RCC_OscConfig+0xd8e>
 8001e3e:	e0db      	b.n	8001ff8 <HAL_RCC_OscConfig+0x1038>
 8001e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e44:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e52:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	fa93 f2a3 	rbit	r2, r3
 8001e5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e60:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e64:	601a      	str	r2, [r3, #0]
  return result;
 8001e66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001e6e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e7a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	461a      	mov	r2, r3
 8001e82:	2300      	movs	r3, #0
 8001e84:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7fe fc1f 	bl	80006c8 <HAL_GetTick>
 8001e8a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8e:	e009      	b.n	8001ea4 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e90:	f7fe fc1a 	bl	80006c8 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0aa      	b.n	8001ffa <HAL_RCC_OscConfig+0x103a>
 8001ea4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001eac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	fa93 f2a3 	rbit	r2, r3
 8001ec0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ec8:	601a      	str	r2, [r3, #0]
  return result;
 8001eca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ece:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ed2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b3f      	cmp	r3, #63	@ 0x3f
 8001edc:	d802      	bhi.n	8001ee4 <HAL_RCC_OscConfig+0xf24>
 8001ede:	4b2e      	ldr	r3, [pc, #184]	@ (8001f98 <HAL_RCC_OscConfig+0xfd8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e027      	b.n	8001f34 <HAL_RCC_OscConfig+0xf74>
 8001ee4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001eec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f2a3 	rbit	r2, r3
 8001f00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f04:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	fa93 f2a3 	rbit	r2, r3
 8001f26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <HAL_RCC_OscConfig+0xfd8>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f38:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f3c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f40:	6011      	str	r1, [r2, #0]
 8001f42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f46:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	fa92 f1a2 	rbit	r1, r2
 8001f50:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f54:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001f58:	6011      	str	r1, [r2, #0]
  return result;
 8001f5a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f5e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f002 021f 	and.w	r2, r2, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d187      	bne.n	8001e90 <HAL_RCC_OscConfig+0xed0>
 8001f80:	e03a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f86:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d104      	bne.n	8001f9c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e031      	b.n	8001ffa <HAL_RCC_OscConfig+0x103a>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f9c:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <HAL_RCC_OscConfig+0x1044>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001fa4:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <HAL_RCC_OscConfig+0x1044>)
 8001fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fb0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d117      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001fc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001fc8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d10b      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001fdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b09e      	sub	sp, #120	@ 0x78
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e154      	b.n	80022ca <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b89      	ldr	r3, [pc, #548]	@ (8002248 <HAL_RCC_ClockConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d910      	bls.n	8002050 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b86      	ldr	r3, [pc, #536]	@ (8002248 <HAL_RCC_ClockConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 0207 	bic.w	r2, r3, #7
 8002036:	4984      	ldr	r1, [pc, #528]	@ (8002248 <HAL_RCC_ClockConfig+0x240>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b82      	ldr	r3, [pc, #520]	@ (8002248 <HAL_RCC_ClockConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e13c      	b.n	80022ca <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800205c:	4b7b      	ldr	r3, [pc, #492]	@ (800224c <HAL_RCC_ClockConfig+0x244>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4978      	ldr	r1, [pc, #480]	@ (800224c <HAL_RCC_ClockConfig+0x244>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80cd 	beq.w	8002216 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d137      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xec>
 8002084:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002088:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b3f      	cmp	r3, #63	@ 0x3f
 800209c:	d802      	bhi.n	80020a4 <HAL_RCC_ClockConfig+0x9c>
 800209e:	4b6b      	ldr	r3, [pc, #428]	@ (800224c <HAL_RCC_ClockConfig+0x244>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	e00f      	b.n	80020c4 <HAL_RCC_ClockConfig+0xbc>
 80020a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80020b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80020b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020c0:	4b62      	ldr	r3, [pc, #392]	@ (800224c <HAL_RCC_ClockConfig+0x244>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80020ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020cc:	fa92 f2a2 	rbit	r2, r2
 80020d0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80020d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80020d4:	fab2 f282 	clz	r2, r2
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f002 021f 	and.w	r2, r2, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d171      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0ea      	b.n	80022ca <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d137      	bne.n	800216c <HAL_RCC_ClockConfig+0x164>
 80020fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002100:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800210a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210c:	fab3 f383 	clz	r3, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b3f      	cmp	r3, #63	@ 0x3f
 8002114:	d802      	bhi.n	800211c <HAL_RCC_ClockConfig+0x114>
 8002116:	4b4d      	ldr	r3, [pc, #308]	@ (800224c <HAL_RCC_ClockConfig+0x244>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	e00f      	b.n	800213c <HAL_RCC_ClockConfig+0x134>
 800211c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002120:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	647b      	str	r3, [r7, #68]	@ 0x44
 800212a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800212e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002138:	4b44      	ldr	r3, [pc, #272]	@ (800224c <HAL_RCC_ClockConfig+0x244>)
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002140:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002142:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002144:	fa92 f2a2 	rbit	r2, r2
 8002148:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800214a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800214c:	fab2 f282 	clz	r2, r2
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f042 0220 	orr.w	r2, r2, #32
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	f002 021f 	and.w	r2, r2, #31
 800215c:	2101      	movs	r1, #1
 800215e:	fa01 f202 	lsl.w	r2, r1, r2
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d135      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0ae      	b.n	80022ca <HAL_RCC_ClockConfig+0x2c2>
 800216c:	2302      	movs	r3, #2
 800216e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b3f      	cmp	r3, #63	@ 0x3f
 8002182:	d802      	bhi.n	800218a <HAL_RCC_ClockConfig+0x182>
 8002184:	4b31      	ldr	r3, [pc, #196]	@ (800224c <HAL_RCC_ClockConfig+0x244>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	e00d      	b.n	80021a6 <HAL_RCC_ClockConfig+0x19e>
 800218a:	2302      	movs	r3, #2
 800218c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
 8002196:	2302      	movs	r3, #2
 8002198:	623b      	str	r3, [r7, #32]
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	4b2a      	ldr	r3, [pc, #168]	@ (800224c <HAL_RCC_ClockConfig+0x244>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	2202      	movs	r2, #2
 80021a8:	61ba      	str	r2, [r7, #24]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	fa92 f2a2 	rbit	r2, r2
 80021b0:	617a      	str	r2, [r7, #20]
  return result;
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	fab2 f282 	clz	r2, r2
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f042 0220 	orr.w	r2, r2, #32
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f002 021f 	and.w	r2, r2, #31
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e07a      	b.n	80022ca <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d4:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <HAL_RCC_ClockConfig+0x244>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f023 0203 	bic.w	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	491a      	ldr	r1, [pc, #104]	@ (800224c <HAL_RCC_ClockConfig+0x244>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e6:	f7fe fa6f 	bl	80006c8 <HAL_GetTick>
 80021ea:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ee:	f7fe fa6b 	bl	80006c8 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e062      	b.n	80022ca <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002204:	4b11      	ldr	r3, [pc, #68]	@ (800224c <HAL_RCC_ClockConfig+0x244>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 020c 	and.w	r2, r3, #12
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	429a      	cmp	r2, r3
 8002214:	d1eb      	bne.n	80021ee <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002216:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <HAL_RCC_ClockConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d215      	bcs.n	8002250 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002224:	4b08      	ldr	r3, [pc, #32]	@ (8002248 <HAL_RCC_ClockConfig+0x240>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 0207 	bic.w	r2, r3, #7
 800222c:	4906      	ldr	r1, [pc, #24]	@ (8002248 <HAL_RCC_ClockConfig+0x240>)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002234:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <HAL_RCC_ClockConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d006      	beq.n	8002250 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e041      	b.n	80022ca <HAL_RCC_ClockConfig+0x2c2>
 8002246:	bf00      	nop
 8002248:	40022000 	.word	0x40022000
 800224c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225c:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <HAL_RCC_ClockConfig+0x2cc>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	491a      	ldr	r1, [pc, #104]	@ (80022d4 <HAL_RCC_ClockConfig+0x2cc>)
 800226a:	4313      	orrs	r3, r2
 800226c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227a:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <HAL_RCC_ClockConfig+0x2cc>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4912      	ldr	r1, [pc, #72]	@ (80022d4 <HAL_RCC_ClockConfig+0x2cc>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800228e:	f000 f829 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 8002292:	4601      	mov	r1, r0
 8002294:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <HAL_RCC_ClockConfig+0x2cc>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800229c:	22f0      	movs	r2, #240	@ 0xf0
 800229e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	fa92 f2a2 	rbit	r2, r2
 80022a6:	60fa      	str	r2, [r7, #12]
  return result;
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	fab2 f282 	clz	r2, r2
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	40d3      	lsrs	r3, r2
 80022b2:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <HAL_RCC_ClockConfig+0x2d0>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ba:	4a08      	ldr	r2, [pc, #32]	@ (80022dc <HAL_RCC_ClockConfig+0x2d4>)
 80022bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80022be:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <HAL_RCC_ClockConfig+0x2d8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f9bc 	bl	8000640 <HAL_InitTick>
  
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3778      	adds	r7, #120	@ 0x78
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	08003264 	.word	0x08003264
 80022dc:	20000000 	.word	0x20000000
 80022e0:	20000004 	.word	0x20000004

080022e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022fe:	4b1f      	ldr	r3, [pc, #124]	@ (800237c <HAL_RCC_GetSysClockFreq+0x98>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b04      	cmp	r3, #4
 800230c:	d002      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x30>
 800230e:	2b08      	cmp	r3, #8
 8002310:	d003      	beq.n	800231a <HAL_RCC_GetSysClockFreq+0x36>
 8002312:	e029      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002314:	4b1a      	ldr	r3, [pc, #104]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002316:	613b      	str	r3, [r7, #16]
      break;
 8002318:	e029      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	0c9b      	lsrs	r3, r3, #18
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	4a18      	ldr	r2, [pc, #96]	@ (8002384 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002324:	5cd3      	ldrb	r3, [r2, r3]
 8002326:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002328:	4b14      	ldr	r3, [pc, #80]	@ (800237c <HAL_RCC_GetSysClockFreq+0x98>)
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	4a15      	ldr	r2, [pc, #84]	@ (8002388 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002340:	4a0f      	ldr	r2, [pc, #60]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	fbb2 f2f3 	udiv	r2, r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	e007      	b.n	8002362 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002352:	4a0b      	ldr	r2, [pc, #44]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	fbb2 f2f3 	udiv	r2, r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	613b      	str	r3, [r7, #16]
      break;
 8002366:	e002      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x9c>)
 800236a:	613b      	str	r3, [r7, #16]
      break;
 800236c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236e:	693b      	ldr	r3, [r7, #16]
}
 8002370:	4618      	mov	r0, r3
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40021000 	.word	0x40021000
 8002380:	007a1200 	.word	0x007a1200
 8002384:	0800327c 	.word	0x0800327c
 8002388:	0800328c 	.word	0x0800328c

0800238c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002390:	4b03      	ldr	r3, [pc, #12]	@ (80023a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000000 	.word	0x20000000

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023aa:	f7ff ffef 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023ae:	4601      	mov	r1, r0
 80023b0:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023b8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80023bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	fa92 f2a2 	rbit	r2, r2
 80023c4:	603a      	str	r2, [r7, #0]
  return result;
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	40d3      	lsrs	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08003274 	.word	0x08003274

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023ee:	f7ff ffcd 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023f2:	4601      	mov	r1, r0
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80023fc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002400:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	fa92 f2a2 	rbit	r2, r2
 8002408:	603a      	str	r2, [r7, #0]
  return result;
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	40d3      	lsrs	r3, r2
 8002414:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08003274 	.word	0x08003274

0800242c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b092      	sub	sp, #72	@ 0x48
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 80d2 	beq.w	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002450:	4b4d      	ldr	r3, [pc, #308]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10e      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245c:	4b4a      	ldr	r3, [pc, #296]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4a49      	ldr	r2, [pc, #292]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002466:	61d3      	str	r3, [r2, #28]
 8002468:	4b47      	ldr	r3, [pc, #284]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002474:	2301      	movs	r3, #1
 8002476:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b44      	ldr	r3, [pc, #272]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b41      	ldr	r3, [pc, #260]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a40      	ldr	r2, [pc, #256]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002490:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7fe f919 	bl	80006c8 <HAL_GetTick>
 8002496:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7fe f915 	bl	80006c8 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	@ 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e1d4      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b37      	ldr	r3, [pc, #220]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024b8:	4b33      	ldr	r3, [pc, #204]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8082 	beq.w	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d07a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80024f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b25      	ldr	r3, [pc, #148]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	461a      	mov	r2, r3
 8002502:	2301      	movs	r3, #1
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800250a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	461a      	mov	r2, r3
 800251e:	4b1c      	ldr	r3, [pc, #112]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	461a      	mov	r2, r3
 8002526:	2300      	movs	r3, #0
 8002528:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800252a:	4a17      	ldr	r2, [pc, #92]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800252c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800252e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d049      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7fe f8c5 	bl	80006c8 <HAL_GetTick>
 800253e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe f8c1 	bl	80006c8 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e17e      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002558:	2302      	movs	r3, #2
 800255a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
 8002564:	2302      	movs	r3, #2
 8002566:	623b      	str	r3, [r7, #32]
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	61fb      	str	r3, [r7, #28]
  return result;
 8002570:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002582:	4b01      	ldr	r3, [pc, #4]	@ (8002588 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	e00d      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002588:	40021000 	.word	0x40021000
 800258c:	40007000 	.word	0x40007000
 8002590:	10908100 	.word	0x10908100
 8002594:	2302      	movs	r3, #2
 8002596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	4b9a      	ldr	r3, [pc, #616]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	2202      	movs	r2, #2
 80025a6:	613a      	str	r2, [r7, #16]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	fa92 f2a2 	rbit	r2, r2
 80025ae:	60fa      	str	r2, [r7, #12]
  return result;
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	fab2 f282 	clz	r2, r2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	f002 021f 	and.w	r2, r2, #31
 80025c2:	2101      	movs	r1, #1
 80025c4:	fa01 f202 	lsl.w	r2, r1, r2
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0b9      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025ce:	4b8f      	ldr	r3, [pc, #572]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	498c      	ldr	r1, [pc, #560]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e8:	4b88      	ldr	r3, [pc, #544]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	4a87      	ldr	r2, [pc, #540]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002600:	4b82      	ldr	r3, [pc, #520]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	f023 0203 	bic.w	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	497f      	ldr	r1, [pc, #508]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260e:	4313      	orrs	r3, r2
 8002610:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d008      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800261e:	4b7b      	ldr	r3, [pc, #492]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4978      	ldr	r1, [pc, #480]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800262c:	4313      	orrs	r3, r2
 800262e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800263c:	4b73      	ldr	r3, [pc, #460]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	4970      	ldr	r1, [pc, #448]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800264a:	4313      	orrs	r3, r2
 800264c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0320 	and.w	r3, r3, #32
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800265a:	4b6c      	ldr	r3, [pc, #432]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f023 0210 	bic.w	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4969      	ldr	r1, [pc, #420]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002678:	4b64      	ldr	r3, [pc, #400]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002684:	4961      	ldr	r1, [pc, #388]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002696:	4b5d      	ldr	r3, [pc, #372]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f023 0220 	bic.w	r2, r3, #32
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	495a      	ldr	r1, [pc, #360]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026b4:	4b55      	ldr	r3, [pc, #340]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	4952      	ldr	r1, [pc, #328]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026d2:	4b4e      	ldr	r3, [pc, #312]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	494b      	ldr	r1, [pc, #300]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026f0:	4b46      	ldr	r3, [pc, #280]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4943      	ldr	r1, [pc, #268]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800270e:	4b3f      	ldr	r3, [pc, #252]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	493c      	ldr	r1, [pc, #240]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800272c:	4b37      	ldr	r3, [pc, #220]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002730:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002738:	4934      	ldr	r1, [pc, #208]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d008      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800274a:	4b30      	ldr	r3, [pc, #192]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002756:	492d      	ldr	r1, [pc, #180]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002758:	4313      	orrs	r3, r2
 800275a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002768:	4b28      	ldr	r3, [pc, #160]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002774:	4925      	ldr	r1, [pc, #148]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002776:	4313      	orrs	r3, r2
 8002778:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002786:	4b21      	ldr	r3, [pc, #132]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	491e      	ldr	r1, [pc, #120]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002794:	4313      	orrs	r3, r2
 8002796:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b0:	4916      	ldr	r1, [pc, #88]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80027c2:	4b12      	ldr	r3, [pc, #72]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ce:	490f      	ldr	r1, [pc, #60]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80027e0:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ec:	4907      	ldr	r1, [pc, #28]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00c      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80027fe:	4b03      	ldr	r3, [pc, #12]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	e002      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002812:	4913      	ldr	r1, [pc, #76]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002814:	4313      	orrs	r3, r2
 8002816:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002824:	4b0e      	ldr	r3, [pc, #56]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002828:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002830:	490b      	ldr	r1, [pc, #44]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002832:	4313      	orrs	r3, r2
 8002834:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002842:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800284e:	4904      	ldr	r1, [pc, #16]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002850:	4313      	orrs	r3, r2
 8002852:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3748      	adds	r7, #72	@ 0x48
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000

08002864 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e040      	b.n	80028f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fd fdf6 	bl	8000478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	@ 0x24
 8002890:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fa86 	bl	8002dbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f8af 	bl	8002a14 <UART_SetConfig>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e01b      	b.n	80028f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fb05 	bl	8002f00 <UART_CheckIdleState>
 80028f6:	4603      	mov	r3, r0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	@ 0x28
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002914:	2b20      	cmp	r3, #32
 8002916:	d177      	bne.n	8002a08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_UART_Transmit+0x24>
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e070      	b.n	8002a0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2221      	movs	r2, #33	@ 0x21
 8002934:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002936:	f7fd fec7 	bl	80006c8 <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	88fa      	ldrh	r2, [r7, #6]
 8002948:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002954:	d108      	bne.n	8002968 <HAL_UART_Transmit+0x68>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d104      	bne.n	8002968 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	e003      	b.n	8002970 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002970:	e02f      	b.n	80029d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	2180      	movs	r1, #128	@ 0x80
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fb67 	bl	8003050 <UART_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e03b      	b.n	8002a0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10b      	bne.n	80029b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	881a      	ldrh	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a4:	b292      	uxth	r2, r2
 80029a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	3302      	adds	r3, #2
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	e007      	b.n	80029c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3301      	adds	r3, #1
 80029be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1c9      	bne.n	8002972 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	2140      	movs	r1, #64	@ 0x40
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 fb31 	bl	8003050 <UART_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e005      	b.n	8002a0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e000      	b.n	8002a0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
  }
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4b92      	ldr	r3, [pc, #584]	@ (8002c88 <UART_SetConfig+0x274>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	6979      	ldr	r1, [r7, #20]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a80      	ldr	r2, [pc, #512]	@ (8002c8c <UART_SetConfig+0x278>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d120      	bne.n	8002ad2 <UART_SetConfig+0xbe>
 8002a90:	4b7f      	ldr	r3, [pc, #508]	@ (8002c90 <UART_SetConfig+0x27c>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d817      	bhi.n	8002acc <UART_SetConfig+0xb8>
 8002a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa4 <UART_SetConfig+0x90>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002ab5 	.word	0x08002ab5
 8002aa8:	08002ac1 	.word	0x08002ac1
 8002aac:	08002ac7 	.word	0x08002ac7
 8002ab0:	08002abb 	.word	0x08002abb
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	77fb      	strb	r3, [r7, #31]
 8002ab8:	e0b5      	b.n	8002c26 <UART_SetConfig+0x212>
 8002aba:	2302      	movs	r3, #2
 8002abc:	77fb      	strb	r3, [r7, #31]
 8002abe:	e0b2      	b.n	8002c26 <UART_SetConfig+0x212>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	77fb      	strb	r3, [r7, #31]
 8002ac4:	e0af      	b.n	8002c26 <UART_SetConfig+0x212>
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	77fb      	strb	r3, [r7, #31]
 8002aca:	e0ac      	b.n	8002c26 <UART_SetConfig+0x212>
 8002acc:	2310      	movs	r3, #16
 8002ace:	77fb      	strb	r3, [r7, #31]
 8002ad0:	e0a9      	b.n	8002c26 <UART_SetConfig+0x212>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6f      	ldr	r2, [pc, #444]	@ (8002c94 <UART_SetConfig+0x280>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d124      	bne.n	8002b26 <UART_SetConfig+0x112>
 8002adc:	4b6c      	ldr	r3, [pc, #432]	@ (8002c90 <UART_SetConfig+0x27c>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ae4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ae8:	d011      	beq.n	8002b0e <UART_SetConfig+0xfa>
 8002aea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002aee:	d817      	bhi.n	8002b20 <UART_SetConfig+0x10c>
 8002af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002af4:	d011      	beq.n	8002b1a <UART_SetConfig+0x106>
 8002af6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002afa:	d811      	bhi.n	8002b20 <UART_SetConfig+0x10c>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <UART_SetConfig+0xf4>
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b04:	d006      	beq.n	8002b14 <UART_SetConfig+0x100>
 8002b06:	e00b      	b.n	8002b20 <UART_SetConfig+0x10c>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
 8002b0c:	e08b      	b.n	8002c26 <UART_SetConfig+0x212>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	77fb      	strb	r3, [r7, #31]
 8002b12:	e088      	b.n	8002c26 <UART_SetConfig+0x212>
 8002b14:	2304      	movs	r3, #4
 8002b16:	77fb      	strb	r3, [r7, #31]
 8002b18:	e085      	b.n	8002c26 <UART_SetConfig+0x212>
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	77fb      	strb	r3, [r7, #31]
 8002b1e:	e082      	b.n	8002c26 <UART_SetConfig+0x212>
 8002b20:	2310      	movs	r3, #16
 8002b22:	77fb      	strb	r3, [r7, #31]
 8002b24:	e07f      	b.n	8002c26 <UART_SetConfig+0x212>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c98 <UART_SetConfig+0x284>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d124      	bne.n	8002b7a <UART_SetConfig+0x166>
 8002b30:	4b57      	ldr	r3, [pc, #348]	@ (8002c90 <UART_SetConfig+0x27c>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b34:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002b38:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b3c:	d011      	beq.n	8002b62 <UART_SetConfig+0x14e>
 8002b3e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b42:	d817      	bhi.n	8002b74 <UART_SetConfig+0x160>
 8002b44:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b48:	d011      	beq.n	8002b6e <UART_SetConfig+0x15a>
 8002b4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b4e:	d811      	bhi.n	8002b74 <UART_SetConfig+0x160>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <UART_SetConfig+0x148>
 8002b54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b58:	d006      	beq.n	8002b68 <UART_SetConfig+0x154>
 8002b5a:	e00b      	b.n	8002b74 <UART_SetConfig+0x160>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	77fb      	strb	r3, [r7, #31]
 8002b60:	e061      	b.n	8002c26 <UART_SetConfig+0x212>
 8002b62:	2302      	movs	r3, #2
 8002b64:	77fb      	strb	r3, [r7, #31]
 8002b66:	e05e      	b.n	8002c26 <UART_SetConfig+0x212>
 8002b68:	2304      	movs	r3, #4
 8002b6a:	77fb      	strb	r3, [r7, #31]
 8002b6c:	e05b      	b.n	8002c26 <UART_SetConfig+0x212>
 8002b6e:	2308      	movs	r3, #8
 8002b70:	77fb      	strb	r3, [r7, #31]
 8002b72:	e058      	b.n	8002c26 <UART_SetConfig+0x212>
 8002b74:	2310      	movs	r3, #16
 8002b76:	77fb      	strb	r3, [r7, #31]
 8002b78:	e055      	b.n	8002c26 <UART_SetConfig+0x212>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a47      	ldr	r2, [pc, #284]	@ (8002c9c <UART_SetConfig+0x288>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d124      	bne.n	8002bce <UART_SetConfig+0x1ba>
 8002b84:	4b42      	ldr	r3, [pc, #264]	@ (8002c90 <UART_SetConfig+0x27c>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002b8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b90:	d011      	beq.n	8002bb6 <UART_SetConfig+0x1a2>
 8002b92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b96:	d817      	bhi.n	8002bc8 <UART_SetConfig+0x1b4>
 8002b98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b9c:	d011      	beq.n	8002bc2 <UART_SetConfig+0x1ae>
 8002b9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ba2:	d811      	bhi.n	8002bc8 <UART_SetConfig+0x1b4>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <UART_SetConfig+0x19c>
 8002ba8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bac:	d006      	beq.n	8002bbc <UART_SetConfig+0x1a8>
 8002bae:	e00b      	b.n	8002bc8 <UART_SetConfig+0x1b4>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	77fb      	strb	r3, [r7, #31]
 8002bb4:	e037      	b.n	8002c26 <UART_SetConfig+0x212>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	77fb      	strb	r3, [r7, #31]
 8002bba:	e034      	b.n	8002c26 <UART_SetConfig+0x212>
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	77fb      	strb	r3, [r7, #31]
 8002bc0:	e031      	b.n	8002c26 <UART_SetConfig+0x212>
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	77fb      	strb	r3, [r7, #31]
 8002bc6:	e02e      	b.n	8002c26 <UART_SetConfig+0x212>
 8002bc8:	2310      	movs	r3, #16
 8002bca:	77fb      	strb	r3, [r7, #31]
 8002bcc:	e02b      	b.n	8002c26 <UART_SetConfig+0x212>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a33      	ldr	r2, [pc, #204]	@ (8002ca0 <UART_SetConfig+0x28c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d124      	bne.n	8002c22 <UART_SetConfig+0x20e>
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c90 <UART_SetConfig+0x27c>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002be0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002be4:	d011      	beq.n	8002c0a <UART_SetConfig+0x1f6>
 8002be6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bea:	d817      	bhi.n	8002c1c <UART_SetConfig+0x208>
 8002bec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bf0:	d011      	beq.n	8002c16 <UART_SetConfig+0x202>
 8002bf2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bf6:	d811      	bhi.n	8002c1c <UART_SetConfig+0x208>
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <UART_SetConfig+0x1f0>
 8002bfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c00:	d006      	beq.n	8002c10 <UART_SetConfig+0x1fc>
 8002c02:	e00b      	b.n	8002c1c <UART_SetConfig+0x208>
 8002c04:	2300      	movs	r3, #0
 8002c06:	77fb      	strb	r3, [r7, #31]
 8002c08:	e00d      	b.n	8002c26 <UART_SetConfig+0x212>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	77fb      	strb	r3, [r7, #31]
 8002c0e:	e00a      	b.n	8002c26 <UART_SetConfig+0x212>
 8002c10:	2304      	movs	r3, #4
 8002c12:	77fb      	strb	r3, [r7, #31]
 8002c14:	e007      	b.n	8002c26 <UART_SetConfig+0x212>
 8002c16:	2308      	movs	r3, #8
 8002c18:	77fb      	strb	r3, [r7, #31]
 8002c1a:	e004      	b.n	8002c26 <UART_SetConfig+0x212>
 8002c1c:	2310      	movs	r3, #16
 8002c1e:	77fb      	strb	r3, [r7, #31]
 8002c20:	e001      	b.n	8002c26 <UART_SetConfig+0x212>
 8002c22:	2310      	movs	r3, #16
 8002c24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c2e:	d16b      	bne.n	8002d08 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002c30:	7ffb      	ldrb	r3, [r7, #31]
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d838      	bhi.n	8002ca8 <UART_SetConfig+0x294>
 8002c36:	a201      	add	r2, pc, #4	@ (adr r2, 8002c3c <UART_SetConfig+0x228>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002c61 	.word	0x08002c61
 8002c40:	08002c69 	.word	0x08002c69
 8002c44:	08002c71 	.word	0x08002c71
 8002c48:	08002ca9 	.word	0x08002ca9
 8002c4c:	08002c77 	.word	0x08002c77
 8002c50:	08002ca9 	.word	0x08002ca9
 8002c54:	08002ca9 	.word	0x08002ca9
 8002c58:	08002ca9 	.word	0x08002ca9
 8002c5c:	08002c7f 	.word	0x08002c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c60:	f7ff fba0 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8002c64:	61b8      	str	r0, [r7, #24]
        break;
 8002c66:	e024      	b.n	8002cb2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c68:	f7ff fbbe 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8002c6c:	61b8      	str	r0, [r7, #24]
        break;
 8002c6e:	e020      	b.n	8002cb2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <UART_SetConfig+0x290>)
 8002c72:	61bb      	str	r3, [r7, #24]
        break;
 8002c74:	e01d      	b.n	8002cb2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c76:	f7ff fb35 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 8002c7a:	61b8      	str	r0, [r7, #24]
        break;
 8002c7c:	e019      	b.n	8002cb2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c82:	61bb      	str	r3, [r7, #24]
        break;
 8002c84:	e015      	b.n	8002cb2 <UART_SetConfig+0x29e>
 8002c86:	bf00      	nop
 8002c88:	efff69f3 	.word	0xefff69f3
 8002c8c:	40013800 	.word	0x40013800
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40004400 	.word	0x40004400
 8002c98:	40004800 	.word	0x40004800
 8002c9c:	40004c00 	.word	0x40004c00
 8002ca0:	40005000 	.word	0x40005000
 8002ca4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	77bb      	strb	r3, [r7, #30]
        break;
 8002cb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d073      	beq.n	8002da0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	005a      	lsls	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	085b      	lsrs	r3, r3, #1
 8002cc2:	441a      	add	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b0f      	cmp	r3, #15
 8002cd2:	d916      	bls.n	8002d02 <UART_SetConfig+0x2ee>
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cda:	d212      	bcs.n	8002d02 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	f023 030f 	bic.w	r3, r3, #15
 8002ce4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	89fb      	ldrh	r3, [r7, #14]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	89fa      	ldrh	r2, [r7, #14]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	e04e      	b.n	8002da0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	77bb      	strb	r3, [r7, #30]
 8002d06:	e04b      	b.n	8002da0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d08:	7ffb      	ldrb	r3, [r7, #31]
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d827      	bhi.n	8002d5e <UART_SetConfig+0x34a>
 8002d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d14 <UART_SetConfig+0x300>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002d39 	.word	0x08002d39
 8002d18:	08002d41 	.word	0x08002d41
 8002d1c:	08002d49 	.word	0x08002d49
 8002d20:	08002d5f 	.word	0x08002d5f
 8002d24:	08002d4f 	.word	0x08002d4f
 8002d28:	08002d5f 	.word	0x08002d5f
 8002d2c:	08002d5f 	.word	0x08002d5f
 8002d30:	08002d5f 	.word	0x08002d5f
 8002d34:	08002d57 	.word	0x08002d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d38:	f7ff fb34 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8002d3c:	61b8      	str	r0, [r7, #24]
        break;
 8002d3e:	e013      	b.n	8002d68 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d40:	f7ff fb52 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8002d44:	61b8      	str	r0, [r7, #24]
        break;
 8002d46:	e00f      	b.n	8002d68 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <UART_SetConfig+0x3a4>)
 8002d4a:	61bb      	str	r3, [r7, #24]
        break;
 8002d4c:	e00c      	b.n	8002d68 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d4e:	f7ff fac9 	bl	80022e4 <HAL_RCC_GetSysClockFreq>
 8002d52:	61b8      	str	r0, [r7, #24]
        break;
 8002d54:	e008      	b.n	8002d68 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d5a:	61bb      	str	r3, [r7, #24]
        break;
 8002d5c:	e004      	b.n	8002d68 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	77bb      	strb	r3, [r7, #30]
        break;
 8002d66:	bf00      	nop
    }

    if (pclk != 0U)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d018      	beq.n	8002da0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	085a      	lsrs	r2, r3, #1
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	441a      	add	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	d909      	bls.n	8002d9c <UART_SetConfig+0x388>
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d8e:	d205      	bcs.n	8002d9c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	e001      	b.n	8002da0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002dac:	7fbb      	ldrb	r3, [r7, #30]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	007a1200 	.word	0x007a1200

08002dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01a      	beq.n	8002ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eba:	d10a      	bne.n	8002ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b098      	sub	sp, #96	@ 0x60
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f10:	f7fd fbda 	bl	80006c8 <HAL_GetTick>
 8002f14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d12e      	bne.n	8002f82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f88c 	bl	8003050 <UART_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d021      	beq.n	8002f82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f46:	e853 3f00 	ldrex	r3, [r3]
 8002f4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f52:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e6      	bne.n	8002f3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e062      	b.n	8003048 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d149      	bne.n	8003024 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f856 	bl	8003050 <UART_WaitOnFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d03c      	beq.n	8003024 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	e853 3f00 	ldrex	r3, [r3]
 8002fb6:	623b      	str	r3, [r7, #32]
   return(result);
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fd0:	e841 2300 	strex	r3, r2, [r1]
 8002fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e6      	bne.n	8002faa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	e853 3f00 	ldrex	r3, [r3]
 8002fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ffc:	61fa      	str	r2, [r7, #28]
 8002ffe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003000:	69b9      	ldr	r1, [r7, #24]
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	e841 2300 	strex	r3, r2, [r1]
 8003008:	617b      	str	r3, [r7, #20]
   return(result);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1e5      	bne.n	8002fdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e011      	b.n	8003048 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2220      	movs	r2, #32
 800302e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3758      	adds	r7, #88	@ 0x58
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003060:	e04f      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003068:	d04b      	beq.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306a:	f7fd fb2d 	bl	80006c8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <UART_WaitOnFlagUntilTimeout+0x30>
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e04e      	b.n	8003122 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	d037      	beq.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b80      	cmp	r3, #128	@ 0x80
 8003096:	d034      	beq.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b40      	cmp	r3, #64	@ 0x40
 800309c:	d031      	beq.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d110      	bne.n	80030ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2208      	movs	r2, #8
 80030b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f838 	bl	800312a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2208      	movs	r2, #8
 80030be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e029      	b.n	8003122 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030dc:	d111      	bne.n	8003102 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f81e 	bl	800312a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e00f      	b.n	8003122 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4013      	ands	r3, r2
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	bf0c      	ite	eq
 8003112:	2301      	moveq	r3, #1
 8003114:	2300      	movne	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	429a      	cmp	r2, r3
 800311e:	d0a0      	beq.n	8003062 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800312a:	b480      	push	{r7}
 800312c:	b095      	sub	sp, #84	@ 0x54
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313a:	e853 3f00 	ldrex	r3, [r3]
 800313e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003142:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003150:	643b      	str	r3, [r7, #64]	@ 0x40
 8003152:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003154:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003156:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003158:	e841 2300 	strex	r3, r2, [r1]
 800315c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800315e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e6      	bne.n	8003132 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3308      	adds	r3, #8
 800316a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	61fb      	str	r3, [r7, #28]
   return(result);
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3308      	adds	r3, #8
 8003182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003184:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003186:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800318a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800318c:	e841 2300 	strex	r3, r2, [r1]
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e5      	bne.n	8003164 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319c:	2b01      	cmp	r3, #1
 800319e:	d118      	bne.n	80031d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f023 0310 	bic.w	r3, r3, #16
 80031b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031be:	61bb      	str	r3, [r7, #24]
 80031c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c2:	6979      	ldr	r1, [r7, #20]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	e841 2300 	strex	r3, r2, [r1]
 80031ca:	613b      	str	r3, [r7, #16]
   return(result);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1e6      	bne.n	80031a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80031e6:	bf00      	nop
 80031e8:	3754      	adds	r7, #84	@ 0x54
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <memset>:
 80031f2:	4402      	add	r2, r0
 80031f4:	4603      	mov	r3, r0
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d100      	bne.n	80031fc <memset+0xa>
 80031fa:	4770      	bx	lr
 80031fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003200:	e7f9      	b.n	80031f6 <memset+0x4>
	...

08003204 <__libc_init_array>:
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	4d0d      	ldr	r5, [pc, #52]	@ (800323c <__libc_init_array+0x38>)
 8003208:	4c0d      	ldr	r4, [pc, #52]	@ (8003240 <__libc_init_array+0x3c>)
 800320a:	1b64      	subs	r4, r4, r5
 800320c:	10a4      	asrs	r4, r4, #2
 800320e:	2600      	movs	r6, #0
 8003210:	42a6      	cmp	r6, r4
 8003212:	d109      	bne.n	8003228 <__libc_init_array+0x24>
 8003214:	4d0b      	ldr	r5, [pc, #44]	@ (8003244 <__libc_init_array+0x40>)
 8003216:	4c0c      	ldr	r4, [pc, #48]	@ (8003248 <__libc_init_array+0x44>)
 8003218:	f000 f818 	bl	800324c <_init>
 800321c:	1b64      	subs	r4, r4, r5
 800321e:	10a4      	asrs	r4, r4, #2
 8003220:	2600      	movs	r6, #0
 8003222:	42a6      	cmp	r6, r4
 8003224:	d105      	bne.n	8003232 <__libc_init_array+0x2e>
 8003226:	bd70      	pop	{r4, r5, r6, pc}
 8003228:	f855 3b04 	ldr.w	r3, [r5], #4
 800322c:	4798      	blx	r3
 800322e:	3601      	adds	r6, #1
 8003230:	e7ee      	b.n	8003210 <__libc_init_array+0xc>
 8003232:	f855 3b04 	ldr.w	r3, [r5], #4
 8003236:	4798      	blx	r3
 8003238:	3601      	adds	r6, #1
 800323a:	e7f2      	b.n	8003222 <__libc_init_array+0x1e>
 800323c:	0800329c 	.word	0x0800329c
 8003240:	0800329c 	.word	0x0800329c
 8003244:	0800329c 	.word	0x0800329c
 8003248:	080032a0 	.word	0x080032a0

0800324c <_init>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	bf00      	nop
 8003250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003252:	bc08      	pop	{r3}
 8003254:	469e      	mov	lr, r3
 8003256:	4770      	bx	lr

08003258 <_fini>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	bf00      	nop
 800325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325e:	bc08      	pop	{r3}
 8003260:	469e      	mov	lr, r3
 8003262:	4770      	bx	lr
