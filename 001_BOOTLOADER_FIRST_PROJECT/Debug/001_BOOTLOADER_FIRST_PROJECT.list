
001_BOOTLOADER_FIRST_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003b98  08003b98  00004b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c34  08003c34  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c34  08003c34  00004c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c3c  08003c3c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c3c  08003c3c  00004c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c40  08003c40  00004c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003c44  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000218  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a19  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001902  00000000  00000000  0000eaa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  000103a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000057a  00000000  00000000  00010ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000200d6  00000000  00000000  0001105a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a9f6  00000000  00000000  00031130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0e60  00000000  00000000  0003bb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fc986  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000020c4  00000000  00000000  000fc9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  000fea90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b80 	.word	0x08003b80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003b80 	.word	0x08003b80

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <print_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_message(char* format, ...){
 8000290:	b40f      	push	{r0, r1, r2, r3}
 8000292:	b580      	push	{r7, lr}
 8000294:	b09a      	sub	sp, #104	@ 0x68
 8000296:	af00      	add	r7, sp, #0

	char coming_message[100];

	va_list va_list;
	va_start(va_list, format);
 8000298:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800029c:	603b      	str	r3, [r7, #0]
	vsprintf(coming_message, format, va_list);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	683a      	ldr	r2, [r7, #0]
 80002a2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 ffe3 	bl	8003270 <vsiprintf>
	HAL_UART_Transmit(DEBUG_UART_PORT, (uint8_t*)coming_message, strlen(coming_message), HAL_MAX_DELAY);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff97 	bl	80001e0 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	1d39      	adds	r1, r7, #4
 80002b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <print_message+0x40>)
 80002be:	f002 fb47 	bl	8002950 <HAL_UART_Transmit>
	va_end(va_list);
}
 80002c2:	bf00      	nop
 80002c4:	3768      	adds	r7, #104	@ 0x68
 80002c6:	46bd      	mov	sp, r7
 80002c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr
 80002d0:	2000009c 	.word	0x2000009c

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	char my_message[] = "Test mesaji...\n";
 80002da:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <main+0x44>)
 80002dc:	463c      	mov	r4, r7
 80002de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fa76 	bl	80007d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f81a 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f000 f8c8 	bl	8000480 <MX_GPIO_Init>
  MX_CRC_Init();
 80002f0:	f000 f874 	bl	80003dc <MX_CRC_Init>
  MX_USART2_UART_Init();
 80002f4:	f000 f894 	bl	8000420 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_UART_Transmit(&huart2, (uint8_t*)my_message, sizeof(my_message), HAL_MAX_DELAY);
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002f8:	2120      	movs	r1, #32
 80002fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002fe:	f000 fe6d 	bl	8000fdc <HAL_GPIO_TogglePin>
	  print_message("Yazilan metodun testi %d %d\n", 1, 2);
 8000302:	2202      	movs	r2, #2
 8000304:	2101      	movs	r1, #1
 8000306:	4805      	ldr	r0, [pc, #20]	@ (800031c <main+0x48>)
 8000308:	f7ff ffc2 	bl	8000290 <print_message>
	  HAL_Delay(500);
 800030c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000310:	f000 fac6 	bl	80008a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000314:	bf00      	nop
 8000316:	e7ef      	b.n	80002f8 <main+0x24>
 8000318:	08003bb8 	.word	0x08003bb8
 800031c:	08003b98 	.word	0x08003b98

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b0a6      	sub	sp, #152	@ 0x98
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800032a:	2228      	movs	r2, #40	@ 0x28
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f002 ffa8 	bl	8003284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]
 8000340:	60da      	str	r2, [r3, #12]
 8000342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2258      	movs	r2, #88	@ 0x58
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f002 ff9a 	bl	8003284 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000350:	2302      	movs	r3, #2
 8000352:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000354:	2301      	movs	r3, #1
 8000356:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000358:	2310      	movs	r3, #16
 800035a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035e:	2302      	movs	r3, #2
 8000360:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000364:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000368:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 800036c:	f44f 1350 	mov.w	r3, #3407872	@ 0x340000
 8000370:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000374:	2301      	movs	r3, #1
 8000376:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fe46 	bl	8001010 <HAL_RCC_OscConfig>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800038a:	f000 f8d7 	bl	800053c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	230f      	movs	r3, #15
 8000390:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000392:	2302      	movs	r3, #2
 8000394:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800039a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800039e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003a8:	2102      	movs	r1, #2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 fe54 	bl	8002058 <HAL_RCC_ClockConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003b6:	f000 f8c1 	bl	800053c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003ba:	2302      	movs	r3, #2
 80003bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	4618      	mov	r0, r3
 80003c6:	f002 f859 	bl	800247c <HAL_RCCEx_PeriphCLKConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003d0:	f000 f8b4 	bl	800053c <Error_Handler>
  }
}
 80003d4:	bf00      	nop
 80003d6:	3798      	adds	r7, #152	@ 0x98
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}

080003dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80003e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000418 <MX_CRC_Init+0x3c>)
 80003e2:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <MX_CRC_Init+0x40>)
 80003e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80003e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <MX_CRC_Init+0x3c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80003ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000418 <MX_CRC_Init+0x3c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80003f2:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <MX_CRC_Init+0x3c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80003f8:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <MX_CRC_Init+0x3c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <MX_CRC_Init+0x3c>)
 8000400:	2201      	movs	r2, #1
 8000402:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000404:	4804      	ldr	r0, [pc, #16]	@ (8000418 <MX_CRC_Init+0x3c>)
 8000406:	f000 fb55 	bl	8000ab4 <HAL_CRC_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000410:	f000 f894 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000078 	.word	0x20000078
 800041c:	40023000 	.word	0x40023000

08000420 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000424:	4b14      	ldr	r3, [pc, #80]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000426:	4a15      	ldr	r2, [pc, #84]	@ (800047c <MX_USART2_UART_Init+0x5c>)
 8000428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800042a:	4b13      	ldr	r3, [pc, #76]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 800042c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b11      	ldr	r3, [pc, #68]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800043e:	4b0e      	ldr	r3, [pc, #56]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000456:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	@ (8000478 <MX_USART2_UART_Init+0x58>)
 8000464:	f002 fa26 	bl	80028b4 <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800046e:	f000 f865 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	2000009c 	.word	0x2000009c
 800047c:	40004400 	.word	0x40004400

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000496:	4b27      	ldr	r3, [pc, #156]	@ (8000534 <MX_GPIO_Init+0xb4>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a26      	ldr	r2, [pc, #152]	@ (8000534 <MX_GPIO_Init+0xb4>)
 800049c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b24      	ldr	r3, [pc, #144]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b21      	ldr	r3, [pc, #132]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a20      	ldr	r2, [pc, #128]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a1a      	ldr	r2, [pc, #104]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <MX_GPIO_Init+0xb4>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e6:	f000 fd61 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004ea:	2320      	movs	r3, #32
 80004ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ee:	2301      	movs	r3, #1
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	4619      	mov	r1, r3
 8000500:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000504:	f000 fbc8 	bl	8000c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000508:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800050c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050e:	2302      	movs	r3, #2
 8000510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000516:	2303      	movs	r3, #3
 8000518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800051a:	2307      	movs	r3, #7
 800051c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	4619      	mov	r1, r3
 8000524:	4804      	ldr	r0, [pc, #16]	@ (8000538 <MX_GPIO_Init+0xb8>)
 8000526:	f000 fbb7 	bl	8000c98 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800052a:	bf00      	nop
 800052c:	3720      	adds	r7, #32
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000
 8000538:	48000800 	.word	0x48000800

0800053c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000540:	b672      	cpsid	i
}
 8000542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <Error_Handler+0x8>

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <HAL_MspInit+0x44>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a0e      	ldr	r2, [pc, #56]	@ (800058c <HAL_MspInit+0x44>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <HAL_MspInit+0x44>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b09      	ldr	r3, [pc, #36]	@ (800058c <HAL_MspInit+0x44>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	4a08      	ldr	r2, [pc, #32]	@ (800058c <HAL_MspInit+0x44>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000570:	61d3      	str	r3, [r2, #28]
 8000572:	4b06      	ldr	r3, [pc, #24]	@ (800058c <HAL_MspInit+0x44>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0a      	ldr	r2, [pc, #40]	@ (80005c8 <HAL_CRC_MspInit+0x38>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d10b      	bne.n	80005ba <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005a2:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <HAL_CRC_MspInit+0x3c>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a09      	ldr	r2, [pc, #36]	@ (80005cc <HAL_CRC_MspInit+0x3c>)
 80005a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <HAL_CRC_MspInit+0x3c>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40023000 	.word	0x40023000
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	@ 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a25      	ldr	r2, [pc, #148]	@ (8000684 <HAL_UART_MspInit+0xb4>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d144      	bne.n	800067c <HAL_UART_MspInit+0xac>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005f2:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <HAL_UART_MspInit+0xb8>)
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	4a24      	ldr	r2, [pc, #144]	@ (8000688 <HAL_UART_MspInit+0xb8>)
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005fc:	61d3      	str	r3, [r2, #28]
 80005fe:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <HAL_UART_MspInit+0xb8>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <HAL_UART_MspInit+0xb8>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a1e      	ldr	r2, [pc, #120]	@ (8000688 <HAL_UART_MspInit+0xb8>)
 8000610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <HAL_UART_MspInit+0xb8>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <HAL_UART_MspInit+0xb8>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a18      	ldr	r2, [pc, #96]	@ (8000688 <HAL_UART_MspInit+0xb8>)
 8000628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800062c:	6153      	str	r3, [r2, #20]
 800062e:	4b16      	ldr	r3, [pc, #88]	@ (8000688 <HAL_UART_MspInit+0xb8>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800063a:	2308      	movs	r3, #8
 800063c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000646:	2303      	movs	r3, #3
 8000648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800064a:	2307      	movs	r3, #7
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000658:	f000 fb1e 	bl	8000c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800065c:	2308      	movs	r3, #8
 800065e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000660:	2302      	movs	r3, #2
 8000662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000668:	2303      	movs	r3, #3
 800066a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800066c:	2307      	movs	r3, #7
 800066e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <HAL_UART_MspInit+0xbc>)
 8000678:	f000 fb0e 	bl	8000c98 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	@ 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40004400 	.word	0x40004400
 8000688:	40021000 	.word	0x40021000
 800068c:	48000400 	.word	0x48000400

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <NMI_Handler+0x4>

08000698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <MemManage_Handler+0x4>

080006a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e6:	f000 f8bb 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f8:	4a14      	ldr	r2, [pc, #80]	@ (800074c <_sbrk+0x5c>)
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <_sbrk+0x60>)
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <_sbrk+0x64>)
 800070e:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <_sbrk+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	429a      	cmp	r2, r3
 800071e:	d207      	bcs.n	8000730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000720:	f002 fdb8 	bl	8003294 <__errno>
 8000724:	4603      	mov	r3, r0
 8000726:	220c      	movs	r2, #12
 8000728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800072e:	e009      	b.n	8000744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <_sbrk+0x64>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000736:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <_sbrk+0x64>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	4a05      	ldr	r2, [pc, #20]	@ (8000754 <_sbrk+0x64>)
 8000740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20010000 	.word	0x20010000
 8000750:	00000400 	.word	0x00000400
 8000754:	20000124 	.word	0x20000124
 8000758:	20000278 	.word	0x20000278

0800075c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <SystemInit+0x20>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000766:	4a05      	ldr	r2, [pc, #20]	@ (800077c <SystemInit+0x20>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000784:	f7ff ffea 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480c      	ldr	r0, [pc, #48]	@ (80007bc <LoopForever+0x6>)
  ldr r1, =_edata
 800078a:	490d      	ldr	r1, [pc, #52]	@ (80007c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800078c:	4a0d      	ldr	r2, [pc, #52]	@ (80007c4 <LoopForever+0xe>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a0a      	ldr	r2, [pc, #40]	@ (80007c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a0:	4c0a      	ldr	r4, [pc, #40]	@ (80007cc <LoopForever+0x16>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ae:	f002 fd77 	bl	80032a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007b2:	f7ff fd8f 	bl	80002d4 <main>

080007b6 <LoopForever>:

LoopForever:
    b LoopForever
 80007b6:	e7fe      	b.n	80007b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007c4:	08003c44 	.word	0x08003c44
  ldr r2, =_sbss
 80007c8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007cc:	20000274 	.word	0x20000274

080007d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC1_2_IRQHandler>
	...

080007d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <HAL_Init+0x28>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a07      	ldr	r2, [pc, #28]	@ (80007fc <HAL_Init+0x28>)
 80007de:	f043 0310 	orr.w	r3, r3, #16
 80007e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e4:	2003      	movs	r0, #3
 80007e6:	f000 f931 	bl	8000a4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ea:	200f      	movs	r0, #15
 80007ec:	f000 f808 	bl	8000800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f0:	f7ff feaa 	bl	8000548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40022000 	.word	0x40022000

08000800 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <HAL_InitTick+0x54>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_InitTick+0x58>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000816:	fbb3 f3f1 	udiv	r3, r3, r1
 800081a:	fbb2 f3f3 	udiv	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f93b 	bl	8000a9a <HAL_SYSTICK_Config>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e00e      	b.n	800084c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d80a      	bhi.n	800084a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000834:	2200      	movs	r2, #0
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800083c:	f000 f911 	bl	8000a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000840:	4a06      	ldr	r2, [pc, #24]	@ (800085c <HAL_InitTick+0x5c>)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
 8000848:	e000      	b.n	800084c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000000 	.word	0x20000000
 8000858:	20000008 	.word	0x20000008
 800085c:	20000004 	.word	0x20000004

08000860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <HAL_IncTick+0x20>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <HAL_IncTick+0x24>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4413      	add	r3, r2
 8000870:	4a04      	ldr	r2, [pc, #16]	@ (8000884 <HAL_IncTick+0x24>)
 8000872:	6013      	str	r3, [r2, #0]
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000008 	.word	0x20000008
 8000884:	20000128 	.word	0x20000128

08000888 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;  
 800088c:	4b03      	ldr	r3, [pc, #12]	@ (800089c <HAL_GetTick+0x14>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	20000128 	.word	0x20000128

080008a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a8:	f7ff ffee 	bl	8000888 <HAL_GetTick>
 80008ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008b8:	d005      	beq.n	80008c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ba:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <HAL_Delay+0x44>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4413      	add	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008c6:	bf00      	nop
 80008c8:	f7ff ffde 	bl	8000888 <HAL_GetTick>
 80008cc:	4602      	mov	r2, r0
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d8f7      	bhi.n	80008c8 <HAL_Delay+0x28>
  {
  }
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000008 	.word	0x20000008

080008e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <__NVIC_SetPriorityGrouping+0x44>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000910:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091a:	4a04      	ldr	r2, [pc, #16]	@ (800092c <__NVIC_SetPriorityGrouping+0x44>)
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	60d3      	str	r3, [r2, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000934:	4b04      	ldr	r3, [pc, #16]	@ (8000948 <__NVIC_GetPriorityGrouping+0x18>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	0a1b      	lsrs	r3, r3, #8
 800093a:	f003 0307 	and.w	r3, r3, #7
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	6039      	str	r1, [r7, #0]
 8000956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	2b00      	cmp	r3, #0
 800095e:	db0a      	blt.n	8000976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b2da      	uxtb	r2, r3
 8000964:	490c      	ldr	r1, [pc, #48]	@ (8000998 <__NVIC_SetPriority+0x4c>)
 8000966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096a:	0112      	lsls	r2, r2, #4
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	440b      	add	r3, r1
 8000970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000974:	e00a      	b.n	800098c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4908      	ldr	r1, [pc, #32]	@ (800099c <__NVIC_SetPriority+0x50>)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	3b04      	subs	r3, #4
 8000984:	0112      	lsls	r2, r2, #4
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	440b      	add	r3, r1
 800098a:	761a      	strb	r2, [r3, #24]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000e100 	.word	0xe000e100
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b089      	sub	sp, #36	@ 0x24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	f1c3 0307 	rsb	r3, r3, #7
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	bf28      	it	cs
 80009be:	2304      	movcs	r3, #4
 80009c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3304      	adds	r3, #4
 80009c6:	2b06      	cmp	r3, #6
 80009c8:	d902      	bls.n	80009d0 <NVIC_EncodePriority+0x30>
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3b03      	subs	r3, #3
 80009ce:	e000      	b.n	80009d2 <NVIC_EncodePriority+0x32>
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43da      	mvns	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	401a      	ands	r2, r3
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
 80009f2:	43d9      	mvns	r1, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	4313      	orrs	r3, r2
         );
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3724      	adds	r7, #36	@ 0x24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a18:	d301      	bcc.n	8000a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00f      	b.n	8000a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <SysTick_Config+0x40>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a26:	210f      	movs	r1, #15
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a2c:	f7ff ff8e 	bl	800094c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <SysTick_Config+0x40>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a36:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <SysTick_Config+0x40>)
 8000a38:	2207      	movs	r2, #7
 8000a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	e000e010 	.word	0xe000e010

08000a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ff47 	bl	80008e8 <__NVIC_SetPriorityGrouping>
}
 8000a5a:	bf00      	nop
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b086      	sub	sp, #24
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	4603      	mov	r3, r0
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
 8000a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a74:	f7ff ff5c 	bl	8000930 <__NVIC_GetPriorityGrouping>
 8000a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	68b9      	ldr	r1, [r7, #8]
 8000a7e:	6978      	ldr	r0, [r7, #20]
 8000a80:	f7ff ff8e 	bl	80009a0 <NVIC_EncodePriority>
 8000a84:	4602      	mov	r2, r0
 8000a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff5d 	bl	800094c <__NVIC_SetPriority>
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffb0 	bl	8000a08 <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e054      	b.n	8000b70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	7f5b      	ldrb	r3, [r3, #29]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d105      	bne.n	8000adc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fd5a 	bl	8000590 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2202      	movs	r2, #2
 8000ae0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10c      	bne.n	8000b04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a22      	ldr	r2, [pc, #136]	@ (8000b78 <HAL_CRC_Init+0xc4>)
 8000af0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f022 0218 	bic.w	r2, r2, #24
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	e00c      	b.n	8000b1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6899      	ldr	r1, [r3, #8]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f834 	bl	8000b7c <HAL_CRCEx_Polynomial_Set>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e028      	b.n	8000b70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	795b      	ldrb	r3, [r3, #5]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d105      	bne.n	8000b32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	e004      	b.n	8000b3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	6912      	ldr	r2, [r2, #16]
 8000b3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	695a      	ldr	r2, [r3, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	699a      	ldr	r2, [r3, #24]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	04c11db7 	.word	0x04c11db7

08000b7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000b8c:	231f      	movs	r3, #31
 8000b8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	75fb      	strb	r3, [r7, #23]
 8000b9e:	e063      	b.n	8000c68 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000ba0:	bf00      	nop
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	1e5a      	subs	r2, r3, #1
 8000ba6:	613a      	str	r2, [r7, #16]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d009      	beq.n	8000bc0 <HAL_CRCEx_Polynomial_Set+0x44>
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	f003 031f 	and.w	r3, r3, #31
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0f0      	beq.n	8000ba2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b18      	cmp	r3, #24
 8000bc4:	d846      	bhi.n	8000c54 <HAL_CRCEx_Polynomial_Set+0xd8>
 8000bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bcc <HAL_CRCEx_Polynomial_Set+0x50>)
 8000bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bcc:	08000c5b 	.word	0x08000c5b
 8000bd0:	08000c55 	.word	0x08000c55
 8000bd4:	08000c55 	.word	0x08000c55
 8000bd8:	08000c55 	.word	0x08000c55
 8000bdc:	08000c55 	.word	0x08000c55
 8000be0:	08000c55 	.word	0x08000c55
 8000be4:	08000c55 	.word	0x08000c55
 8000be8:	08000c55 	.word	0x08000c55
 8000bec:	08000c49 	.word	0x08000c49
 8000bf0:	08000c55 	.word	0x08000c55
 8000bf4:	08000c55 	.word	0x08000c55
 8000bf8:	08000c55 	.word	0x08000c55
 8000bfc:	08000c55 	.word	0x08000c55
 8000c00:	08000c55 	.word	0x08000c55
 8000c04:	08000c55 	.word	0x08000c55
 8000c08:	08000c55 	.word	0x08000c55
 8000c0c:	08000c3d 	.word	0x08000c3d
 8000c10:	08000c55 	.word	0x08000c55
 8000c14:	08000c55 	.word	0x08000c55
 8000c18:	08000c55 	.word	0x08000c55
 8000c1c:	08000c55 	.word	0x08000c55
 8000c20:	08000c55 	.word	0x08000c55
 8000c24:	08000c55 	.word	0x08000c55
 8000c28:	08000c55 	.word	0x08000c55
 8000c2c:	08000c31 	.word	0x08000c31
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d913      	bls.n	8000c5e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000c3a:	e010      	b.n	8000c5e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d90f      	bls.n	8000c62 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000c46:	e00c      	b.n	8000c62 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2b0f      	cmp	r3, #15
 8000c4c:	d90b      	bls.n	8000c66 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8000c52:	e008      	b.n	8000c66 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	75fb      	strb	r3, [r7, #23]
        break;
 8000c58:	e006      	b.n	8000c68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000c5a:	bf00      	nop
 8000c5c:	e004      	b.n	8000c68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000c5e:	bf00      	nop
 8000c60:	e002      	b.n	8000c68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000c62:	bf00      	nop
 8000c64:	e000      	b.n	8000c68 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8000c66:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8000c68:	7dfb      	ldrb	r3, [r7, #23]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10d      	bne.n	8000c8a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f023 0118 	bic.w	r1, r3, #24
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	430a      	orrs	r2, r1
 8000c88:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	371c      	adds	r7, #28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b087      	sub	sp, #28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca6:	e160      	b.n	8000f6a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	2101      	movs	r1, #1
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 8152 	beq.w	8000f64 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0303 	and.w	r3, r3, #3
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d005      	beq.n	8000cd8 <HAL_GPIO_Init+0x40>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d130      	bne.n	8000d3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	2203      	movs	r2, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0e:	2201      	movs	r2, #1
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	091b      	lsrs	r3, r3, #4
 8000d24:	f003 0201 	and.w	r2, r3, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d017      	beq.n	8000d76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d123      	bne.n	8000dca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	08da      	lsrs	r2, r3, #3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3208      	adds	r2, #8
 8000d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	691a      	ldr	r2, [r3, #16]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	6939      	ldr	r1, [r7, #16]
 8000dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0203 	and.w	r2, r3, #3
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 80ac 	beq.w	8000f64 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0c:	4b5e      	ldr	r3, [pc, #376]	@ (8000f88 <HAL_GPIO_Init+0x2f0>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a5d      	ldr	r2, [pc, #372]	@ (8000f88 <HAL_GPIO_Init+0x2f0>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b5b      	ldr	r3, [pc, #364]	@ (8000f88 <HAL_GPIO_Init+0x2f0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e24:	4a59      	ldr	r2, [pc, #356]	@ (8000f8c <HAL_GPIO_Init+0x2f4>)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	089b      	lsrs	r3, r3, #2
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e4e:	d025      	beq.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a4f      	ldr	r2, [pc, #316]	@ (8000f90 <HAL_GPIO_Init+0x2f8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d01f      	beq.n	8000e98 <HAL_GPIO_Init+0x200>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a4e      	ldr	r2, [pc, #312]	@ (8000f94 <HAL_GPIO_Init+0x2fc>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d019      	beq.n	8000e94 <HAL_GPIO_Init+0x1fc>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a4d      	ldr	r2, [pc, #308]	@ (8000f98 <HAL_GPIO_Init+0x300>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d013      	beq.n	8000e90 <HAL_GPIO_Init+0x1f8>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a4c      	ldr	r2, [pc, #304]	@ (8000f9c <HAL_GPIO_Init+0x304>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d00d      	beq.n	8000e8c <HAL_GPIO_Init+0x1f4>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a4b      	ldr	r2, [pc, #300]	@ (8000fa0 <HAL_GPIO_Init+0x308>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d007      	beq.n	8000e88 <HAL_GPIO_Init+0x1f0>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8000fa4 <HAL_GPIO_Init+0x30c>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d101      	bne.n	8000e84 <HAL_GPIO_Init+0x1ec>
 8000e80:	2306      	movs	r3, #6
 8000e82:	e00c      	b.n	8000e9e <HAL_GPIO_Init+0x206>
 8000e84:	2307      	movs	r3, #7
 8000e86:	e00a      	b.n	8000e9e <HAL_GPIO_Init+0x206>
 8000e88:	2305      	movs	r3, #5
 8000e8a:	e008      	b.n	8000e9e <HAL_GPIO_Init+0x206>
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	e006      	b.n	8000e9e <HAL_GPIO_Init+0x206>
 8000e90:	2303      	movs	r3, #3
 8000e92:	e004      	b.n	8000e9e <HAL_GPIO_Init+0x206>
 8000e94:	2302      	movs	r3, #2
 8000e96:	e002      	b.n	8000e9e <HAL_GPIO_Init+0x206>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <HAL_GPIO_Init+0x206>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	f002 0203 	and.w	r2, r2, #3
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	4093      	lsls	r3, r2
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eae:	4937      	ldr	r1, [pc, #220]	@ (8000f8c <HAL_GPIO_Init+0x2f4>)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8000fa8 <HAL_GPIO_Init+0x310>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ee0:	4a31      	ldr	r2, [pc, #196]	@ (8000fa8 <HAL_GPIO_Init+0x310>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee6:	4b30      	ldr	r3, [pc, #192]	@ (8000fa8 <HAL_GPIO_Init+0x310>)
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f0a:	4a27      	ldr	r2, [pc, #156]	@ (8000fa8 <HAL_GPIO_Init+0x310>)
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f10:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <HAL_GPIO_Init+0x310>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f34:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa8 <HAL_GPIO_Init+0x310>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_GPIO_Init+0x310>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f5e:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <HAL_GPIO_Init+0x310>)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa22 f303 	lsr.w	r3, r2, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f47f ae97 	bne.w	8000ca8 <HAL_GPIO_Init+0x10>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	48000400 	.word	0x48000400
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000c00 	.word	0x48000c00
 8000f9c:	48001000 	.word	0x48001000
 8000fa0:	48001400 	.word	0x48001400
 8000fa4:	48001800 	.word	0x48001800
 8000fa8:	40010400 	.word	0x40010400

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	041a      	lsls	r2, r3, #16
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43d9      	mvns	r1, r3
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	400b      	ands	r3, r1
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001016:	af00      	add	r7, sp, #0
 8001018:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800101c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001020:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001026:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	f001 b80a 	b.w	800204a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001036:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800103a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8161 	beq.w	800130e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800104c:	4bae      	ldr	r3, [pc, #696]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b04      	cmp	r3, #4
 8001056:	d00c      	beq.n	8001072 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001058:	4bab      	ldr	r3, [pc, #684]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b08      	cmp	r3, #8
 8001062:	d157      	bne.n	8001114 <HAL_RCC_OscConfig+0x104>
 8001064:	4ba8      	ldr	r3, [pc, #672]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800106c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001070:	d150      	bne.n	8001114 <HAL_RCC_OscConfig+0x104>
 8001072:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001076:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001086:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108a:	fab3 f383 	clz	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b3f      	cmp	r3, #63	@ 0x3f
 8001092:	d802      	bhi.n	800109a <HAL_RCC_OscConfig+0x8a>
 8001094:	4b9c      	ldr	r3, [pc, #624]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	e015      	b.n	80010c6 <HAL_RCC_OscConfig+0xb6>
 800109a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800109e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80010a6:	fa93 f3a3 	rbit	r3, r3
 80010aa:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80010ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010b2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80010b6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80010c2:	4b91      	ldr	r3, [pc, #580]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010ca:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80010ce:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80010d2:	fa92 f2a2 	rbit	r2, r2
 80010d6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80010da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80010de:	fab2 f282 	clz	r2, r2
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f042 0220 	orr.w	r2, r2, #32
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	f002 021f 	and.w	r2, r2, #31
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8108 	beq.w	800130c <HAL_RCC_OscConfig+0x2fc>
 80010fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001100:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	f040 80ff 	bne.w	800130c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	f000 bf9b 	b.w	800204a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001114:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001118:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001124:	d106      	bne.n	8001134 <HAL_RCC_OscConfig+0x124>
 8001126:	4b78      	ldr	r3, [pc, #480]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a77      	ldr	r2, [pc, #476]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e036      	b.n	80011a2 <HAL_RCC_OscConfig+0x192>
 8001134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001138:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d10c      	bne.n	800115e <HAL_RCC_OscConfig+0x14e>
 8001144:	4b70      	ldr	r3, [pc, #448]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a6f      	ldr	r2, [pc, #444]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 800114a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b6d      	ldr	r3, [pc, #436]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a6c      	ldr	r2, [pc, #432]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 8001156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	e021      	b.n	80011a2 <HAL_RCC_OscConfig+0x192>
 800115e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001162:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800116e:	d10c      	bne.n	800118a <HAL_RCC_OscConfig+0x17a>
 8001170:	4b65      	ldr	r3, [pc, #404]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a64      	ldr	r2, [pc, #400]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 8001176:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b62      	ldr	r3, [pc, #392]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a61      	ldr	r2, [pc, #388]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 8001182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	e00b      	b.n	80011a2 <HAL_RCC_OscConfig+0x192>
 800118a:	4b5f      	ldr	r3, [pc, #380]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a5e      	ldr	r2, [pc, #376]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 8001190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b5c      	ldr	r3, [pc, #368]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a5b      	ldr	r2, [pc, #364]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 800119c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d054      	beq.n	800125c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fb69 	bl	8000888 <HAL_GetTick>
 80011b6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fb64 	bl	8000888 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b64      	cmp	r3, #100	@ 0x64
 80011ca:	d902      	bls.n	80011d2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	f000 bf3c 	b.w	800204a <HAL_RCC_OscConfig+0x103a>
 80011d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011d6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80011de:	fa93 f3a3 	rbit	r3, r3
 80011e2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80011e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80011f2:	d802      	bhi.n	80011fa <HAL_RCC_OscConfig+0x1ea>
 80011f4:	4b44      	ldr	r3, [pc, #272]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	e015      	b.n	8001226 <HAL_RCC_OscConfig+0x216>
 80011fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011fe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800120e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001212:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001216:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001222:	4b39      	ldr	r3, [pc, #228]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 8001224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001226:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800122a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800122e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001232:	fa92 f2a2 	rbit	r2, r2
 8001236:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800123a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800123e:	fab2 f282 	clz	r2, r2
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	f042 0220 	orr.w	r2, r2, #32
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	f002 021f 	and.w	r2, r2, #31
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	4013      	ands	r3, r2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0b0      	beq.n	80011bc <HAL_RCC_OscConfig+0x1ac>
 800125a:	e058      	b.n	800130e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fb14 	bl	8000888 <HAL_GetTick>
 8001260:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001264:	e00a      	b.n	800127c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001266:	f7ff fb0f 	bl	8000888 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	@ 0x64
 8001274:	d902      	bls.n	800127c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	f000 bee7 	b.w	800204a <HAL_RCC_OscConfig+0x103a>
 800127c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001280:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001290:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b3f      	cmp	r3, #63	@ 0x3f
 800129c:	d802      	bhi.n	80012a4 <HAL_RCC_OscConfig+0x294>
 800129e:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	e015      	b.n	80012d0 <HAL_RCC_OscConfig+0x2c0>
 80012a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012a8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80012b0:	fa93 f3a3 	rbit	r3, r3
 80012b4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80012b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012bc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80012c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80012cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <HAL_RCC_OscConfig+0x2f8>)
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012d4:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80012d8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80012dc:	fa92 f2a2 	rbit	r2, r2
 80012e0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80012e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80012e8:	fab2 f282 	clz	r2, r2
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	f042 0220 	orr.w	r2, r2, #32
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	f002 021f 	and.w	r2, r2, #31
 80012f8:	2101      	movs	r1, #1
 80012fa:	fa01 f202 	lsl.w	r2, r1, r2
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1b0      	bne.n	8001266 <HAL_RCC_OscConfig+0x256>
 8001304:	e003      	b.n	800130e <HAL_RCC_OscConfig+0x2fe>
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001312:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 816d 	beq.w	80015fe <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001324:	4bcd      	ldr	r3, [pc, #820]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00c      	beq.n	800134a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001330:	4bca      	ldr	r3, [pc, #808]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b08      	cmp	r3, #8
 800133a:	d16e      	bne.n	800141a <HAL_RCC_OscConfig+0x40a>
 800133c:	4bc7      	ldr	r3, [pc, #796]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001348:	d167      	bne.n	800141a <HAL_RCC_OscConfig+0x40a>
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001350:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800135c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001360:	fab3 f383 	clz	r3, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b3f      	cmp	r3, #63	@ 0x3f
 8001368:	d802      	bhi.n	8001370 <HAL_RCC_OscConfig+0x360>
 800136a:	4bbc      	ldr	r3, [pc, #752]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	e013      	b.n	8001398 <HAL_RCC_OscConfig+0x388>
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001376:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001388:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001394:	4bb1      	ldr	r3, [pc, #708]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 8001396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001398:	2202      	movs	r2, #2
 800139a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800139e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80013a2:	fa92 f2a2 	rbit	r2, r2
 80013a6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80013aa:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80013ae:	fab2 f282 	clz	r2, r2
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	f042 0220 	orr.w	r2, r2, #32
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	f002 021f 	and.w	r2, r2, #31
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00a      	beq.n	80013e0 <HAL_RCC_OscConfig+0x3d0>
 80013ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d002      	beq.n	80013e0 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	f000 be35 	b.w	800204a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	4b9e      	ldr	r3, [pc, #632]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	21f8      	movs	r1, #248	@ 0xf8
 80013f6:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80013fe:	fa91 f1a1 	rbit	r1, r1
 8001402:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001406:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800140a:	fab1 f181 	clz	r1, r1
 800140e:	b2c9      	uxtb	r1, r1
 8001410:	408b      	lsls	r3, r1
 8001412:	4992      	ldr	r1, [pc, #584]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001418:	e0f1      	b.n	80015fe <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800141e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8083 	beq.w	8001532 <HAL_RCC_OscConfig+0x522>
 800142c:	2301      	movs	r3, #1
 800142e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001432:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800143e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800144c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	461a      	mov	r2, r3
 8001454:	2301      	movs	r3, #1
 8001456:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fa16 	bl	8000888 <HAL_GetTick>
 800145c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001462:	f7ff fa11 	bl	8000888 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d902      	bls.n	8001478 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	f000 bde9 	b.w	800204a <HAL_RCC_OscConfig+0x103a>
 8001478:	2302      	movs	r3, #2
 800147a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001482:	fa93 f3a3 	rbit	r3, r3
 8001486:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800148a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148e:	fab3 f383 	clz	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b3f      	cmp	r3, #63	@ 0x3f
 8001496:	d802      	bhi.n	800149e <HAL_RCC_OscConfig+0x48e>
 8001498:	4b70      	ldr	r3, [pc, #448]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	e013      	b.n	80014c6 <HAL_RCC_OscConfig+0x4b6>
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80014b6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80014c2:	4b66      	ldr	r3, [pc, #408]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c6:	2202      	movs	r2, #2
 80014c8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80014cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80014d0:	fa92 f2a2 	rbit	r2, r2
 80014d4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80014d8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80014dc:	fab2 f282 	clz	r2, r2
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	f042 0220 	orr.w	r2, r2, #32
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	f002 021f 	and.w	r2, r2, #31
 80014ec:	2101      	movs	r1, #1
 80014ee:	fa01 f202 	lsl.w	r2, r1, r2
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0b4      	beq.n	8001462 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b58      	ldr	r3, [pc, #352]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001504:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	21f8      	movs	r1, #248	@ 0xf8
 800150e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001516:	fa91 f1a1 	rbit	r1, r1
 800151a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800151e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001522:	fab1 f181 	clz	r1, r1
 8001526:	b2c9      	uxtb	r1, r1
 8001528:	408b      	lsls	r3, r1
 800152a:	494c      	ldr	r1, [pc, #304]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 800152c:	4313      	orrs	r3, r2
 800152e:	600b      	str	r3, [r1, #0]
 8001530:	e065      	b.n	80015fe <HAL_RCC_OscConfig+0x5ee>
 8001532:	2301      	movs	r3, #1
 8001534:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800153c:	fa93 f3a3 	rbit	r3, r3
 8001540:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001544:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001548:	fab3 f383 	clz	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001552:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	461a      	mov	r2, r3
 800155a:	2300      	movs	r3, #0
 800155c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff f993 	bl	8000888 <HAL_GetTick>
 8001562:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001568:	f7ff f98e 	bl	8000888 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d902      	bls.n	800157e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	f000 bd66 	b.w	800204a <HAL_RCC_OscConfig+0x103a>
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001588:	fa93 f3a3 	rbit	r3, r3
 800158c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001590:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001594:	fab3 f383 	clz	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b3f      	cmp	r3, #63	@ 0x3f
 800159c:	d802      	bhi.n	80015a4 <HAL_RCC_OscConfig+0x594>
 800159e:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	e013      	b.n	80015cc <HAL_RCC_OscConfig+0x5bc>
 80015a4:	2302      	movs	r3, #2
 80015a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80015b6:	2302      	movs	r3, #2
 80015b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80015bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80015c8:	4b24      	ldr	r3, [pc, #144]	@ (800165c <HAL_RCC_OscConfig+0x64c>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	2202      	movs	r2, #2
 80015ce:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80015d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80015d6:	fa92 f2a2 	rbit	r2, r2
 80015da:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80015de:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80015e2:	fab2 f282 	clz	r2, r2
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	f042 0220 	orr.w	r2, r2, #32
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	f002 021f 	and.w	r2, r2, #31
 80015f2:	2101      	movs	r1, #1
 80015f4:	fa01 f202 	lsl.w	r2, r1, r2
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1b4      	bne.n	8001568 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001602:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8119 	beq.w	8001846 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001618:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 8082 	beq.w	800172a <HAL_RCC_OscConfig+0x71a>
 8001626:	2301      	movs	r3, #1
 8001628:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001638:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163c:	fab3 f383 	clz	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_RCC_OscConfig+0x650>)
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	461a      	mov	r2, r3
 800164c:	2301      	movs	r3, #1
 800164e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff f91a 	bl	8000888 <HAL_GetTick>
 8001654:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001658:	e00f      	b.n	800167a <HAL_RCC_OscConfig+0x66a>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff f910 	bl	8000888 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d902      	bls.n	800167a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	f000 bce8 	b.w	800204a <HAL_RCC_OscConfig+0x103a>
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001684:	fa93 f2a3 	rbit	r2, r3
 8001688:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800168c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800169a:	2202      	movs	r2, #2
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fa93 f2a3 	rbit	r2, r3
 80016ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016be:	2202      	movs	r2, #2
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa93 f2a3 	rbit	r2, r3
 80016d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80016d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	4bb0      	ldr	r3, [pc, #704]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 80016dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016e6:	2102      	movs	r1, #2
 80016e8:	6019      	str	r1, [r3, #0]
 80016ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	fa93 f1a3 	rbit	r1, r3
 80016f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001700:	6019      	str	r1, [r3, #0]
  return result;
 8001702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001706:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	fab3 f383 	clz	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	2101      	movs	r1, #1
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d09d      	beq.n	8001664 <HAL_RCC_OscConfig+0x654>
 8001728:	e08d      	b.n	8001846 <HAL_RCC_OscConfig+0x836>
 800172a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800172e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800173a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	fa93 f2a3 	rbit	r2, r3
 8001744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001748:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800174c:	601a      	str	r2, [r3, #0]
  return result;
 800174e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001752:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001756:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001758:	fab3 f383 	clz	r3, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	4b8f      	ldr	r3, [pc, #572]	@ (80019a0 <HAL_RCC_OscConfig+0x990>)
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	461a      	mov	r2, r3
 8001768:	2300      	movs	r3, #0
 800176a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176c:	f7ff f88c 	bl	8000888 <HAL_GetTick>
 8001770:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001774:	e00a      	b.n	800178c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001776:	f7ff f887 	bl	8000888 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d902      	bls.n	800178c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	f000 bc5f 	b.w	800204a <HAL_RCC_OscConfig+0x103a>
 800178c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001790:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001794:	2202      	movs	r2, #2
 8001796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001798:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800179c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	fa93 f2a3 	rbit	r2, r3
 80017a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017b8:	2202      	movs	r2, #2
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	fa93 f2a3 	rbit	r2, r3
 80017ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80017dc:	2202      	movs	r2, #2
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	fa93 f2a3 	rbit	r2, r3
 80017ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80017f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	4b68      	ldr	r3, [pc, #416]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 80017fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001800:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001804:	2102      	movs	r1, #2
 8001806:	6019      	str	r1, [r3, #0]
 8001808:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fa93 f1a3 	rbit	r1, r3
 8001816:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800181a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800181e:	6019      	str	r1, [r3, #0]
  return result;
 8001820:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001824:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	fab3 f383 	clz	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d197      	bne.n	8001776 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001846:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 819c 	beq.w	8001b94 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001862:	4b4e      	ldr	r3, [pc, #312]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d116      	bne.n	800189c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b4b      	ldr	r3, [pc, #300]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a4a      	ldr	r2, [pc, #296]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b48      	ldr	r3, [pc, #288]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001882:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001886:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001890:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001894:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001896:	2301      	movs	r3, #1
 8001898:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	4b41      	ldr	r3, [pc, #260]	@ (80019a4 <HAL_RCC_OscConfig+0x994>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d11a      	bne.n	80018de <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a8:	4b3e      	ldr	r3, [pc, #248]	@ (80019a4 <HAL_RCC_OscConfig+0x994>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a3d      	ldr	r2, [pc, #244]	@ (80019a4 <HAL_RCC_OscConfig+0x994>)
 80018ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b4:	f7fe ffe8 	bl	8000888 <HAL_GetTick>
 80018b8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	e009      	b.n	80018d2 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018be:	f7fe ffe3 	bl	8000888 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	@ 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e3bb      	b.n	800204a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d2:	4b34      	ldr	r3, [pc, #208]	@ (80019a4 <HAL_RCC_OscConfig+0x994>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0ef      	beq.n	80018be <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d106      	bne.n	80018fc <HAL_RCC_OscConfig+0x8ec>
 80018ee:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a2a      	ldr	r2, [pc, #168]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	e035      	b.n	8001968 <HAL_RCC_OscConfig+0x958>
 80018fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001900:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10c      	bne.n	8001926 <HAL_RCC_OscConfig+0x916>
 800190c:	4b23      	ldr	r3, [pc, #140]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a22      	ldr	r2, [pc, #136]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	6213      	str	r3, [r2, #32]
 8001918:	4b20      	ldr	r3, [pc, #128]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4a1f      	ldr	r2, [pc, #124]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 800191e:	f023 0304 	bic.w	r3, r3, #4
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	e020      	b.n	8001968 <HAL_RCC_OscConfig+0x958>
 8001926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x940>
 8001936:	4b19      	ldr	r3, [pc, #100]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a18      	ldr	r2, [pc, #96]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6213      	str	r3, [r2, #32]
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4a15      	ldr	r2, [pc, #84]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6213      	str	r3, [r2, #32]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0x958>
 8001950:	4b12      	ldr	r3, [pc, #72]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a11      	ldr	r2, [pc, #68]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6213      	str	r3, [r2, #32]
 800195c:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4a0e      	ldr	r2, [pc, #56]	@ (800199c <HAL_RCC_OscConfig+0x98c>)
 8001962:	f023 0304 	bic.w	r3, r3, #4
 8001966:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 8085 	beq.w	8001a84 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7fe ff85 	bl	8000888 <HAL_GetTick>
 800197e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001982:	e011      	b.n	80019a8 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001984:	f7fe ff80 	bl	8000888 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d907      	bls.n	80019a8 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e356      	b.n	800204a <HAL_RCC_OscConfig+0x103a>
 800199c:	40021000 	.word	0x40021000
 80019a0:	10908120 	.word	0x10908120
 80019a4:	40007000 	.word	0x40007000
 80019a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ac:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80019b0:	2202      	movs	r2, #2
 80019b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	fa93 f2a3 	rbit	r2, r3
 80019c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80019d4:	2202      	movs	r2, #2
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019dc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ea:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019ee:	601a      	str	r2, [r3, #0]
  return result;
 80019f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80019f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <HAL_RCC_OscConfig+0xa00>
 8001a0a:	4b98      	ldr	r3, [pc, #608]	@ (8001c6c <HAL_RCC_OscConfig+0xc5c>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	e013      	b.n	8001a38 <HAL_RCC_OscConfig+0xa28>
 8001a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a14:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001a18:	2202      	movs	r2, #2
 8001a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a20:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	fa93 f2a3 	rbit	r2, r3
 8001a2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a2e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	4b8d      	ldr	r3, [pc, #564]	@ (8001c6c <HAL_RCC_OscConfig+0xc5c>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a3c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001a40:	2102      	movs	r1, #2
 8001a42:	6011      	str	r1, [r2, #0]
 8001a44:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a48:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	fa92 f1a2 	rbit	r1, r2
 8001a52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a56:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001a5a:	6011      	str	r1, [r2, #0]
  return result;
 8001a5c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a60:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	fab2 f282 	clz	r2, r2
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f002 021f 	and.w	r2, r2, #31
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d080      	beq.n	8001984 <HAL_RCC_OscConfig+0x974>
 8001a82:	e07d      	b.n	8001b80 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a84:	f7fe ff00 	bl	8000888 <HAL_GetTick>
 8001a88:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	e00b      	b.n	8001aa6 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7fe fefb 	bl	8000888 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e2d1      	b.n	800204a <HAL_RCC_OscConfig+0x103a>
 8001aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aaa:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001aae:	2202      	movs	r2, #2
 8001ab0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	fa93 f2a3 	rbit	r2, r3
 8001ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ace:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ada:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f2a3 	rbit	r2, r3
 8001ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001aec:	601a      	str	r2, [r3, #0]
  return result;
 8001aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001af6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <HAL_RCC_OscConfig+0xafe>
 8001b08:	4b58      	ldr	r3, [pc, #352]	@ (8001c6c <HAL_RCC_OscConfig+0xc5c>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	e013      	b.n	8001b36 <HAL_RCC_OscConfig+0xb26>
 8001b0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b12:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b16:	2202      	movs	r2, #2
 8001b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	fa93 f2a3 	rbit	r2, r3
 8001b28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	4b4e      	ldr	r3, [pc, #312]	@ (8001c6c <HAL_RCC_OscConfig+0xc5c>)
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b3a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001b3e:	2102      	movs	r1, #2
 8001b40:	6011      	str	r1, [r2, #0]
 8001b42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b46:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	fa92 f1a2 	rbit	r1, r2
 8001b50:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b54:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001b58:	6011      	str	r1, [r2, #0]
  return result;
 8001b5a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b5e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	fab2 f282 	clz	r2, r2
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	f002 021f 	and.w	r2, r2, #31
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d186      	bne.n	8001a8e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b80:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b88:	4b38      	ldr	r3, [pc, #224]	@ (8001c6c <HAL_RCC_OscConfig+0xc5c>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	4a37      	ldr	r2, [pc, #220]	@ (8001c6c <HAL_RCC_OscConfig+0xc5c>)
 8001b8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b92:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 8251 	beq.w	8002048 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba6:	4b31      	ldr	r3, [pc, #196]	@ (8001c6c <HAL_RCC_OscConfig+0xc5c>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	f000 820f 	beq.w	8001fd2 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	f040 8165 	bne.w	8001e90 <HAL_RCC_OscConfig+0xe80>
 8001bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bca:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001bce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	fa93 f2a3 	rbit	r2, r3
 8001be2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001bea:	601a      	str	r2, [r3, #0]
  return result;
 8001bec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001bf4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	461a      	mov	r2, r3
 8001c08:	2300      	movs	r3, #0
 8001c0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7fe fe3c 	bl	8000888 <HAL_GetTick>
 8001c10:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	e009      	b.n	8001c2a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c16:	f7fe fe37 	bl	8000888 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e20f      	b.n	800204a <HAL_RCC_OscConfig+0x103a>
 8001c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	fa93 f2a3 	rbit	r2, r3
 8001c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c4e:	601a      	str	r2, [r3, #0]
  return result;
 8001c50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c54:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001c58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c62:	d805      	bhi.n	8001c70 <HAL_RCC_OscConfig+0xc60>
 8001c64:	4b01      	ldr	r3, [pc, #4]	@ (8001c6c <HAL_RCC_OscConfig+0xc5c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e02a      	b.n	8001cc0 <HAL_RCC_OscConfig+0xcb0>
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c74:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c82:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fa93 f2a3 	rbit	r2, r3
 8001c8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c90:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001c9e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f2a3 	rbit	r2, r3
 8001cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	4bca      	ldr	r3, [pc, #808]	@ (8001fe8 <HAL_RCC_OscConfig+0xfd8>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cc4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001cc8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ccc:	6011      	str	r1, [r2, #0]
 8001cce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cd2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	fa92 f1a2 	rbit	r1, r2
 8001cdc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ce0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001ce4:	6011      	str	r1, [r2, #0]
  return result;
 8001ce6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cea:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	fab2 f282 	clz	r2, r2
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f042 0220 	orr.w	r2, r2, #32
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	f002 021f 	and.w	r2, r2, #31
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f202 	lsl.w	r2, r1, r2
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d184      	bne.n	8001c16 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d0c:	4bb6      	ldr	r3, [pc, #728]	@ (8001fe8 <HAL_RCC_OscConfig+0xfd8>)
 8001d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d10:	f023 020f 	bic.w	r2, r3, #15
 8001d14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	49b1      	ldr	r1, [pc, #708]	@ (8001fe8 <HAL_RCC_OscConfig+0xfd8>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001d26:	4bb0      	ldr	r3, [pc, #704]	@ (8001fe8 <HAL_RCC_OscConfig+0xfd8>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001d2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6a19      	ldr	r1, [r3, #32]
 8001d3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	430b      	orrs	r3, r1
 8001d48:	49a7      	ldr	r1, [pc, #668]	@ (8001fe8 <HAL_RCC_OscConfig+0xfd8>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
 8001d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d52:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d60:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	fa93 f2a3 	rbit	r2, r3
 8001d6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d72:	601a      	str	r2, [r3, #0]
  return result;
 8001d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d78:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001d7c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2301      	movs	r3, #1
 8001d92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7fe fd78 	bl	8000888 <HAL_GetTick>
 8001d98:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d9c:	e009      	b.n	8001db2 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7fe fd73 	bl	8000888 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e14b      	b.n	800204a <HAL_RCC_OscConfig+0x103a>
 8001db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001dba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	fa93 f2a3 	rbit	r2, r3
 8001dce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001dd6:	601a      	str	r2, [r3, #0]
  return result;
 8001dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ddc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001de0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dea:	d802      	bhi.n	8001df2 <HAL_RCC_OscConfig+0xde2>
 8001dec:	4b7e      	ldr	r3, [pc, #504]	@ (8001fe8 <HAL_RCC_OscConfig+0xfd8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	e027      	b.n	8001e42 <HAL_RCC_OscConfig+0xe32>
 8001df2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dfa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e04:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	fa93 f2a3 	rbit	r2, r3
 8001e0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e12:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001e20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fa93 f2a3 	rbit	r2, r3
 8001e34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e38:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe8 <HAL_RCC_OscConfig+0xfd8>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e46:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e4a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e4e:	6011      	str	r1, [r2, #0]
 8001e50:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e54:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	fa92 f1a2 	rbit	r1, r2
 8001e5e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e62:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001e66:	6011      	str	r1, [r2, #0]
  return result;
 8001e68:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e6c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	fab2 f282 	clz	r2, r2
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f042 0220 	orr.w	r2, r2, #32
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f002 021f 	and.w	r2, r2, #31
 8001e82:	2101      	movs	r1, #1
 8001e84:	fa01 f202 	lsl.w	r2, r1, r2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d087      	beq.n	8001d9e <HAL_RCC_OscConfig+0xd8e>
 8001e8e:	e0db      	b.n	8002048 <HAL_RCC_OscConfig+0x1038>
 8001e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e94:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001e98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f2a3 	rbit	r2, r3
 8001eac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001eb4:	601a      	str	r2, [r3, #0]
  return result;
 8001eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ebe:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001eca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7fe fcd7 	bl	8000888 <HAL_GetTick>
 8001eda:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ede:	e009      	b.n	8001ef4 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7fe fcd2 	bl	8000888 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0aa      	b.n	800204a <HAL_RCC_OscConfig+0x103a>
 8001ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001efc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f06:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f2a3 	rbit	r2, r3
 8001f10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f14:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f18:	601a      	str	r2, [r3, #0]
  return result;
 8001f1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f1e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f2c:	d802      	bhi.n	8001f34 <HAL_RCC_OscConfig+0xf24>
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe8 <HAL_RCC_OscConfig+0xfd8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	e027      	b.n	8001f84 <HAL_RCC_OscConfig+0xf74>
 8001f34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f38:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001f3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f46:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	fa93 f2a3 	rbit	r2, r3
 8001f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f54:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	fa93 f2a3 	rbit	r2, r3
 8001f76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f7a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_RCC_OscConfig+0xfd8>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f88:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f8c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f90:	6011      	str	r1, [r2, #0]
 8001f92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f96:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001f9a:	6812      	ldr	r2, [r2, #0]
 8001f9c:	fa92 f1a2 	rbit	r1, r2
 8001fa0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fa4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001fa8:	6011      	str	r1, [r2, #0]
  return result;
 8001faa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fae:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	fab2 f282 	clz	r2, r2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f042 0220 	orr.w	r2, r2, #32
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f002 021f 	and.w	r2, r2, #31
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d187      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xed0>
 8001fd0:	e03a      	b.n	8002048 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d104      	bne.n	8001fec <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e031      	b.n	800204a <HAL_RCC_OscConfig+0x103a>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fec:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_RCC_OscConfig+0x1044>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ff4:	4b17      	ldr	r3, [pc, #92]	@ (8002054 <HAL_RCC_OscConfig+0x1044>)
 8001ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ffc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002000:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002004:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002008:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	429a      	cmp	r2, r3
 8002012:	d117      	bne.n	8002044 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002014:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002018:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800201c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002020:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002028:	429a      	cmp	r2, r3
 800202a:	d10b      	bne.n	8002044 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800202c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002030:	f003 020f 	and.w	r2, r3, #15
 8002034:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002038:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000

08002058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b09e      	sub	sp, #120	@ 0x78
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e154      	b.n	800231a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002070:	4b89      	ldr	r3, [pc, #548]	@ (8002298 <HAL_RCC_ClockConfig+0x240>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d910      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b86      	ldr	r3, [pc, #536]	@ (8002298 <HAL_RCC_ClockConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 0207 	bic.w	r2, r3, #7
 8002086:	4984      	ldr	r1, [pc, #528]	@ (8002298 <HAL_RCC_ClockConfig+0x240>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b82      	ldr	r3, [pc, #520]	@ (8002298 <HAL_RCC_ClockConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e13c      	b.n	800231a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b7b      	ldr	r3, [pc, #492]	@ (800229c <HAL_RCC_ClockConfig+0x244>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4978      	ldr	r1, [pc, #480]	@ (800229c <HAL_RCC_ClockConfig+0x244>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80cd 	beq.w	8002266 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d137      	bne.n	8002144 <HAL_RCC_ClockConfig+0xec>
 80020d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80020e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80020ec:	d802      	bhi.n	80020f4 <HAL_RCC_ClockConfig+0x9c>
 80020ee:	4b6b      	ldr	r3, [pc, #428]	@ (800229c <HAL_RCC_ClockConfig+0x244>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	e00f      	b.n	8002114 <HAL_RCC_ClockConfig+0xbc>
 80020f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	667b      	str	r3, [r7, #100]	@ 0x64
 8002102:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002106:	663b      	str	r3, [r7, #96]	@ 0x60
 8002108:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002110:	4b62      	ldr	r3, [pc, #392]	@ (800229c <HAL_RCC_ClockConfig+0x244>)
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002118:	65ba      	str	r2, [r7, #88]	@ 0x58
 800211a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800211c:	fa92 f2a2 	rbit	r2, r2
 8002120:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002122:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002124:	fab2 f282 	clz	r2, r2
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f042 0220 	orr.w	r2, r2, #32
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	f002 021f 	and.w	r2, r2, #31
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f202 	lsl.w	r2, r1, r2
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d171      	bne.n	8002224 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0ea      	b.n	800231a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d137      	bne.n	80021bc <HAL_RCC_ClockConfig+0x164>
 800214c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002150:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800215a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b3f      	cmp	r3, #63	@ 0x3f
 8002164:	d802      	bhi.n	800216c <HAL_RCC_ClockConfig+0x114>
 8002166:	4b4d      	ldr	r3, [pc, #308]	@ (800229c <HAL_RCC_ClockConfig+0x244>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	e00f      	b.n	800218c <HAL_RCC_ClockConfig+0x134>
 800216c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002170:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	647b      	str	r3, [r7, #68]	@ 0x44
 800217a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800217e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002180:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002188:	4b44      	ldr	r3, [pc, #272]	@ (800229c <HAL_RCC_ClockConfig+0x244>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002190:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002192:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002194:	fa92 f2a2 	rbit	r2, r2
 8002198:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800219a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800219c:	fab2 f282 	clz	r2, r2
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	f042 0220 	orr.w	r2, r2, #32
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f002 021f 	and.w	r2, r2, #31
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f202 	lsl.w	r2, r1, r2
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d135      	bne.n	8002224 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0ae      	b.n	800231a <HAL_RCC_ClockConfig+0x2c2>
 80021bc:	2302      	movs	r3, #2
 80021be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80021c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80021d2:	d802      	bhi.n	80021da <HAL_RCC_ClockConfig+0x182>
 80021d4:	4b31      	ldr	r3, [pc, #196]	@ (800229c <HAL_RCC_ClockConfig+0x244>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	e00d      	b.n	80021f6 <HAL_RCC_ClockConfig+0x19e>
 80021da:	2302      	movs	r3, #2
 80021dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021e6:	2302      	movs	r3, #2
 80021e8:	623b      	str	r3, [r7, #32]
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	4b2a      	ldr	r3, [pc, #168]	@ (800229c <HAL_RCC_ClockConfig+0x244>)
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	2202      	movs	r2, #2
 80021f8:	61ba      	str	r2, [r7, #24]
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	fa92 f2a2 	rbit	r2, r2
 8002200:	617a      	str	r2, [r7, #20]
  return result;
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	fab2 f282 	clz	r2, r2
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	f042 0220 	orr.w	r2, r2, #32
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f002 021f 	and.w	r2, r2, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f202 	lsl.w	r2, r1, r2
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e07a      	b.n	800231a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002224:	4b1d      	ldr	r3, [pc, #116]	@ (800229c <HAL_RCC_ClockConfig+0x244>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f023 0203 	bic.w	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	491a      	ldr	r1, [pc, #104]	@ (800229c <HAL_RCC_ClockConfig+0x244>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002236:	f7fe fb27 	bl	8000888 <HAL_GetTick>
 800223a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223c:	e00a      	b.n	8002254 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223e:	f7fe fb23 	bl	8000888 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e062      	b.n	800231a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002254:	4b11      	ldr	r3, [pc, #68]	@ (800229c <HAL_RCC_ClockConfig+0x244>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 020c 	and.w	r2, r3, #12
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	429a      	cmp	r2, r3
 8002264:	d1eb      	bne.n	800223e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002266:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <HAL_RCC_ClockConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d215      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <HAL_RCC_ClockConfig+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 0207 	bic.w	r2, r3, #7
 800227c:	4906      	ldr	r1, [pc, #24]	@ (8002298 <HAL_RCC_ClockConfig+0x240>)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002284:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <HAL_RCC_ClockConfig+0x240>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d006      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e041      	b.n	800231a <HAL_RCC_ClockConfig+0x2c2>
 8002296:	bf00      	nop
 8002298:	40022000 	.word	0x40022000
 800229c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <HAL_RCC_ClockConfig+0x2cc>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	491a      	ldr	r1, [pc, #104]	@ (8002324 <HAL_RCC_ClockConfig+0x2cc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ca:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <HAL_RCC_ClockConfig+0x2cc>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4912      	ldr	r1, [pc, #72]	@ (8002324 <HAL_RCC_ClockConfig+0x2cc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022de:	f000 f829 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 80022e2:	4601      	mov	r1, r0
 80022e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002324 <HAL_RCC_ClockConfig+0x2cc>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022ec:	22f0      	movs	r2, #240	@ 0xf0
 80022ee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	fa92 f2a2 	rbit	r2, r2
 80022f6:	60fa      	str	r2, [r7, #12]
  return result;
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	fab2 f282 	clz	r2, r2
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	40d3      	lsrs	r3, r2
 8002302:	4a09      	ldr	r2, [pc, #36]	@ (8002328 <HAL_RCC_ClockConfig+0x2d0>)
 8002304:	5cd3      	ldrb	r3, [r2, r3]
 8002306:	fa21 f303 	lsr.w	r3, r1, r3
 800230a:	4a08      	ldr	r2, [pc, #32]	@ (800232c <HAL_RCC_ClockConfig+0x2d4>)
 800230c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800230e:	4b08      	ldr	r3, [pc, #32]	@ (8002330 <HAL_RCC_ClockConfig+0x2d8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fa74 	bl	8000800 <HAL_InitTick>
  
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3778      	adds	r7, #120	@ 0x78
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	08003bc8 	.word	0x08003bc8
 800232c:	20000000 	.word	0x20000000
 8002330:	20000004 	.word	0x20000004

08002334 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800234e:	4b1f      	ldr	r3, [pc, #124]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b04      	cmp	r3, #4
 800235c:	d002      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x30>
 800235e:	2b08      	cmp	r3, #8
 8002360:	d003      	beq.n	800236a <HAL_RCC_GetSysClockFreq+0x36>
 8002362:	e029      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002364:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002366:	613b      	str	r3, [r7, #16]
      break;
 8002368:	e029      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	0c9b      	lsrs	r3, r3, #18
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	4a18      	ldr	r2, [pc, #96]	@ (80023d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002374:	5cd3      	ldrb	r3, [r2, r3]
 8002376:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002378:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <HAL_RCC_GetSysClockFreq+0x98>)
 800237a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	4a15      	ldr	r2, [pc, #84]	@ (80023d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002390:	4a0f      	ldr	r2, [pc, #60]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f2f3 	udiv	r2, r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e007      	b.n	80023b2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023a2:	4a0b      	ldr	r2, [pc, #44]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	613b      	str	r3, [r7, #16]
      break;
 80023b6:	e002      	b.n	80023be <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023b8:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023ba:	613b      	str	r3, [r7, #16]
      break;
 80023bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023be:	693b      	ldr	r3, [r7, #16]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	371c      	adds	r7, #28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40021000 	.word	0x40021000
 80023d0:	007a1200 	.word	0x007a1200
 80023d4:	08003be0 	.word	0x08003be0
 80023d8:	08003bf0 	.word	0x08003bf0

080023dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e0:	4b03      	ldr	r3, [pc, #12]	@ (80023f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000000 	.word	0x20000000

080023f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80023fa:	f7ff ffef 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 80023fe:	4601      	mov	r1, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002408:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800240c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	fa92 f2a2 	rbit	r2, r2
 8002414:	603a      	str	r2, [r7, #0]
  return result;
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	fab2 f282 	clz	r2, r2
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	40d3      	lsrs	r3, r2
 8002420:	4a04      	ldr	r2, [pc, #16]	@ (8002434 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	08003bd8 	.word	0x08003bd8

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800243e:	f7ff ffcd 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 8002442:	4601      	mov	r1, r0
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800244c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002450:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	fa92 f2a2 	rbit	r2, r2
 8002458:	603a      	str	r2, [r7, #0]
  return result;
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	fab2 f282 	clz	r2, r2
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	40d3      	lsrs	r3, r2
 8002464:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002466:	5cd3      	ldrb	r3, [r2, r3]
 8002468:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000
 8002478:	08003bd8 	.word	0x08003bd8

0800247c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b092      	sub	sp, #72	@ 0x48
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800248c:	2300      	movs	r3, #0
 800248e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80d2 	beq.w	8002644 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a0:	4b4d      	ldr	r3, [pc, #308]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10e      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	4b4a      	ldr	r3, [pc, #296]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	4a49      	ldr	r2, [pc, #292]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	61d3      	str	r3, [r2, #28]
 80024b8:	4b47      	ldr	r3, [pc, #284]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c4:	2301      	movs	r3, #1
 80024c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ca:	4b44      	ldr	r3, [pc, #272]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d118      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d6:	4b41      	ldr	r3, [pc, #260]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a40      	ldr	r2, [pc, #256]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e2:	f7fe f9d1 	bl	8000888 <HAL_GetTick>
 80024e6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	e008      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ea:	f7fe f9cd 	bl	8000888 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	@ 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e1d4      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	4b37      	ldr	r3, [pc, #220]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002508:	4b33      	ldr	r3, [pc, #204]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002510:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8082 	beq.w	800261e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002522:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002524:	429a      	cmp	r2, r3
 8002526:	d07a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002528:	4b2b      	ldr	r3, [pc, #172]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002532:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002536:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253a:	fa93 f3a3 	rbit	r3, r3
 800253e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	4b25      	ldr	r3, [pc, #148]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	461a      	mov	r2, r3
 8002552:	2301      	movs	r3, #1
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800255a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002566:	fab3 f383 	clz	r3, r3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	461a      	mov	r2, r3
 8002576:	2300      	movs	r3, #0
 8002578:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800257a:	4a17      	ldr	r2, [pc, #92]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800257c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800257e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d049      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7fe f97d 	bl	8000888 <HAL_GetTick>
 800258e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	e00a      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe f979 	bl	8000888 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e17e      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80025a8:	2302      	movs	r3, #2
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b4:	2302      	movs	r3, #2
 80025b6:	623b      	str	r3, [r7, #32]
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	61fb      	str	r3, [r7, #28]
  return result;
 80025c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d108      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80025d2:	4b01      	ldr	r3, [pc, #4]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	e00d      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40007000 	.word	0x40007000
 80025e0:	10908100 	.word	0x10908100
 80025e4:	2302      	movs	r3, #2
 80025e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	4b9a      	ldr	r3, [pc, #616]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	2202      	movs	r2, #2
 80025f6:	613a      	str	r2, [r7, #16]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	fa92 f2a2 	rbit	r2, r2
 80025fe:	60fa      	str	r2, [r7, #12]
  return result;
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	fab2 f282 	clz	r2, r2
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	f002 021f 	and.w	r2, r2, #31
 8002612:	2101      	movs	r1, #1
 8002614:	fa01 f202 	lsl.w	r2, r1, r2
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0b9      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800261e:	4b8f      	ldr	r3, [pc, #572]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	498c      	ldr	r1, [pc, #560]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800262c:	4313      	orrs	r3, r2
 800262e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002630:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002634:	2b01      	cmp	r3, #1
 8002636:	d105      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002638:	4b88      	ldr	r3, [pc, #544]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	4a87      	ldr	r2, [pc, #540]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800263e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002642:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002650:	4b82      	ldr	r3, [pc, #520]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002654:	f023 0203 	bic.w	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	497f      	ldr	r1, [pc, #508]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265e:	4313      	orrs	r3, r2
 8002660:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800266e:	4b7b      	ldr	r3, [pc, #492]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	4978      	ldr	r1, [pc, #480]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267c:	4313      	orrs	r3, r2
 800267e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800268c:	4b73      	ldr	r3, [pc, #460]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002690:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	4970      	ldr	r1, [pc, #448]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269a:	4313      	orrs	r3, r2
 800269c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d008      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026aa:	4b6c      	ldr	r3, [pc, #432]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f023 0210 	bic.w	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4969      	ldr	r1, [pc, #420]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80026c8:	4b64      	ldr	r3, [pc, #400]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d4:	4961      	ldr	r1, [pc, #388]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026e6:	4b5d      	ldr	r3, [pc, #372]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f023 0220 	bic.w	r2, r3, #32
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	495a      	ldr	r1, [pc, #360]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002704:	4b55      	ldr	r3, [pc, #340]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002708:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002710:	4952      	ldr	r1, [pc, #328]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002712:	4313      	orrs	r3, r2
 8002714:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002722:	4b4e      	ldr	r3, [pc, #312]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	494b      	ldr	r1, [pc, #300]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002730:	4313      	orrs	r3, r2
 8002732:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002740:	4b46      	ldr	r3, [pc, #280]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002744:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4943      	ldr	r1, [pc, #268]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274e:	4313      	orrs	r3, r2
 8002750:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800275a:	2b00      	cmp	r3, #0
 800275c:	d008      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800275e:	4b3f      	ldr	r3, [pc, #252]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	493c      	ldr	r1, [pc, #240]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800277c:	4b37      	ldr	r3, [pc, #220]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002780:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002788:	4934      	ldr	r1, [pc, #208]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278a:	4313      	orrs	r3, r2
 800278c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800279a:	4b30      	ldr	r3, [pc, #192]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a6:	492d      	ldr	r1, [pc, #180]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80027b8:	4b28      	ldr	r3, [pc, #160]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c4:	4925      	ldr	r1, [pc, #148]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d008      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027d6:	4b21      	ldr	r3, [pc, #132]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	491e      	ldr	r1, [pc, #120]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d008      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002800:	4916      	ldr	r1, [pc, #88]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002802:	4313      	orrs	r3, r2
 8002804:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002812:	4b12      	ldr	r3, [pc, #72]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800281e:	490f      	ldr	r1, [pc, #60]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002830:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002834:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283c:	4907      	ldr	r1, [pc, #28]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283e:	4313      	orrs	r3, r2
 8002840:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00c      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800284e:	4b03      	ldr	r3, [pc, #12]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	e002      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002862:	4913      	ldr	r1, [pc, #76]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002864:	4313      	orrs	r3, r2
 8002866:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002874:	4b0e      	ldr	r3, [pc, #56]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002880:	490b      	ldr	r1, [pc, #44]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002882:	4313      	orrs	r3, r2
 8002884:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d008      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002892:	4b07      	ldr	r3, [pc, #28]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800289e:	4904      	ldr	r1, [pc, #16]	@ (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3748      	adds	r7, #72	@ 0x48
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000

080028b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e040      	b.n	8002948 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fd fe7a 	bl	80005d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2224      	movs	r2, #36	@ 0x24
 80028e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0201 	bic.w	r2, r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa86 	bl	8002e0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f8af 	bl	8002a64 <UART_SetConfig>
 8002906:	4603      	mov	r3, r0
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e01b      	b.n	8002948 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800291e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800292e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fb05 	bl	8002f50 <UART_CheckIdleState>
 8002946:	4603      	mov	r3, r0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	@ 0x28
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002964:	2b20      	cmp	r3, #32
 8002966:	d177      	bne.n	8002a58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_UART_Transmit+0x24>
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e070      	b.n	8002a5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2221      	movs	r2, #33	@ 0x21
 8002984:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002986:	f7fd ff7f 	bl	8000888 <HAL_GetTick>
 800298a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	88fa      	ldrh	r2, [r7, #6]
 8002990:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	88fa      	ldrh	r2, [r7, #6]
 8002998:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a4:	d108      	bne.n	80029b8 <HAL_UART_Transmit+0x68>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	e003      	b.n	80029c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029c0:	e02f      	b.n	8002a22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2200      	movs	r2, #0
 80029ca:	2180      	movs	r1, #128	@ 0x80
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fb67 	bl	80030a0 <UART_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d004      	beq.n	80029e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e03b      	b.n	8002a5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10b      	bne.n	8002a00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	881a      	ldrh	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f4:	b292      	uxth	r2, r2
 80029f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	3302      	adds	r3, #2
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	e007      	b.n	8002a10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	781a      	ldrb	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1c9      	bne.n	80029c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2200      	movs	r2, #0
 8002a36:	2140      	movs	r1, #64	@ 0x40
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fb31 	bl	80030a0 <UART_WaitOnFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e005      	b.n	8002a5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e000      	b.n	8002a5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4b92      	ldr	r3, [pc, #584]	@ (8002cd8 <UART_SetConfig+0x274>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	6979      	ldr	r1, [r7, #20]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a80      	ldr	r2, [pc, #512]	@ (8002cdc <UART_SetConfig+0x278>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d120      	bne.n	8002b22 <UART_SetConfig+0xbe>
 8002ae0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce0 <UART_SetConfig+0x27c>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d817      	bhi.n	8002b1c <UART_SetConfig+0xb8>
 8002aec:	a201      	add	r2, pc, #4	@ (adr r2, 8002af4 <UART_SetConfig+0x90>)
 8002aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af2:	bf00      	nop
 8002af4:	08002b05 	.word	0x08002b05
 8002af8:	08002b11 	.word	0x08002b11
 8002afc:	08002b17 	.word	0x08002b17
 8002b00:	08002b0b 	.word	0x08002b0b
 8002b04:	2301      	movs	r3, #1
 8002b06:	77fb      	strb	r3, [r7, #31]
 8002b08:	e0b5      	b.n	8002c76 <UART_SetConfig+0x212>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	77fb      	strb	r3, [r7, #31]
 8002b0e:	e0b2      	b.n	8002c76 <UART_SetConfig+0x212>
 8002b10:	2304      	movs	r3, #4
 8002b12:	77fb      	strb	r3, [r7, #31]
 8002b14:	e0af      	b.n	8002c76 <UART_SetConfig+0x212>
 8002b16:	2308      	movs	r3, #8
 8002b18:	77fb      	strb	r3, [r7, #31]
 8002b1a:	e0ac      	b.n	8002c76 <UART_SetConfig+0x212>
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	77fb      	strb	r3, [r7, #31]
 8002b20:	e0a9      	b.n	8002c76 <UART_SetConfig+0x212>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a6f      	ldr	r2, [pc, #444]	@ (8002ce4 <UART_SetConfig+0x280>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d124      	bne.n	8002b76 <UART_SetConfig+0x112>
 8002b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ce0 <UART_SetConfig+0x27c>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b38:	d011      	beq.n	8002b5e <UART_SetConfig+0xfa>
 8002b3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b3e:	d817      	bhi.n	8002b70 <UART_SetConfig+0x10c>
 8002b40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b44:	d011      	beq.n	8002b6a <UART_SetConfig+0x106>
 8002b46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b4a:	d811      	bhi.n	8002b70 <UART_SetConfig+0x10c>
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <UART_SetConfig+0xf4>
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b54:	d006      	beq.n	8002b64 <UART_SetConfig+0x100>
 8002b56:	e00b      	b.n	8002b70 <UART_SetConfig+0x10c>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	77fb      	strb	r3, [r7, #31]
 8002b5c:	e08b      	b.n	8002c76 <UART_SetConfig+0x212>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	77fb      	strb	r3, [r7, #31]
 8002b62:	e088      	b.n	8002c76 <UART_SetConfig+0x212>
 8002b64:	2304      	movs	r3, #4
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	e085      	b.n	8002c76 <UART_SetConfig+0x212>
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e082      	b.n	8002c76 <UART_SetConfig+0x212>
 8002b70:	2310      	movs	r3, #16
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e07f      	b.n	8002c76 <UART_SetConfig+0x212>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ce8 <UART_SetConfig+0x284>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d124      	bne.n	8002bca <UART_SetConfig+0x166>
 8002b80:	4b57      	ldr	r3, [pc, #348]	@ (8002ce0 <UART_SetConfig+0x27c>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b84:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002b88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b8c:	d011      	beq.n	8002bb2 <UART_SetConfig+0x14e>
 8002b8e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002b92:	d817      	bhi.n	8002bc4 <UART_SetConfig+0x160>
 8002b94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b98:	d011      	beq.n	8002bbe <UART_SetConfig+0x15a>
 8002b9a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b9e:	d811      	bhi.n	8002bc4 <UART_SetConfig+0x160>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <UART_SetConfig+0x148>
 8002ba4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ba8:	d006      	beq.n	8002bb8 <UART_SetConfig+0x154>
 8002baa:	e00b      	b.n	8002bc4 <UART_SetConfig+0x160>
 8002bac:	2300      	movs	r3, #0
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e061      	b.n	8002c76 <UART_SetConfig+0x212>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	77fb      	strb	r3, [r7, #31]
 8002bb6:	e05e      	b.n	8002c76 <UART_SetConfig+0x212>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	e05b      	b.n	8002c76 <UART_SetConfig+0x212>
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	77fb      	strb	r3, [r7, #31]
 8002bc2:	e058      	b.n	8002c76 <UART_SetConfig+0x212>
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	e055      	b.n	8002c76 <UART_SetConfig+0x212>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a47      	ldr	r2, [pc, #284]	@ (8002cec <UART_SetConfig+0x288>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d124      	bne.n	8002c1e <UART_SetConfig+0x1ba>
 8002bd4:	4b42      	ldr	r3, [pc, #264]	@ (8002ce0 <UART_SetConfig+0x27c>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002bdc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002be0:	d011      	beq.n	8002c06 <UART_SetConfig+0x1a2>
 8002be2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002be6:	d817      	bhi.n	8002c18 <UART_SetConfig+0x1b4>
 8002be8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bec:	d011      	beq.n	8002c12 <UART_SetConfig+0x1ae>
 8002bee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bf2:	d811      	bhi.n	8002c18 <UART_SetConfig+0x1b4>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <UART_SetConfig+0x19c>
 8002bf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bfc:	d006      	beq.n	8002c0c <UART_SetConfig+0x1a8>
 8002bfe:	e00b      	b.n	8002c18 <UART_SetConfig+0x1b4>
 8002c00:	2300      	movs	r3, #0
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e037      	b.n	8002c76 <UART_SetConfig+0x212>
 8002c06:	2302      	movs	r3, #2
 8002c08:	77fb      	strb	r3, [r7, #31]
 8002c0a:	e034      	b.n	8002c76 <UART_SetConfig+0x212>
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e031      	b.n	8002c76 <UART_SetConfig+0x212>
 8002c12:	2308      	movs	r3, #8
 8002c14:	77fb      	strb	r3, [r7, #31]
 8002c16:	e02e      	b.n	8002c76 <UART_SetConfig+0x212>
 8002c18:	2310      	movs	r3, #16
 8002c1a:	77fb      	strb	r3, [r7, #31]
 8002c1c:	e02b      	b.n	8002c76 <UART_SetConfig+0x212>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a33      	ldr	r2, [pc, #204]	@ (8002cf0 <UART_SetConfig+0x28c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d124      	bne.n	8002c72 <UART_SetConfig+0x20e>
 8002c28:	4b2d      	ldr	r3, [pc, #180]	@ (8002ce0 <UART_SetConfig+0x27c>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002c30:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c34:	d011      	beq.n	8002c5a <UART_SetConfig+0x1f6>
 8002c36:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c3a:	d817      	bhi.n	8002c6c <UART_SetConfig+0x208>
 8002c3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c40:	d011      	beq.n	8002c66 <UART_SetConfig+0x202>
 8002c42:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c46:	d811      	bhi.n	8002c6c <UART_SetConfig+0x208>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <UART_SetConfig+0x1f0>
 8002c4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c50:	d006      	beq.n	8002c60 <UART_SetConfig+0x1fc>
 8002c52:	e00b      	b.n	8002c6c <UART_SetConfig+0x208>
 8002c54:	2300      	movs	r3, #0
 8002c56:	77fb      	strb	r3, [r7, #31]
 8002c58:	e00d      	b.n	8002c76 <UART_SetConfig+0x212>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	77fb      	strb	r3, [r7, #31]
 8002c5e:	e00a      	b.n	8002c76 <UART_SetConfig+0x212>
 8002c60:	2304      	movs	r3, #4
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	e007      	b.n	8002c76 <UART_SetConfig+0x212>
 8002c66:	2308      	movs	r3, #8
 8002c68:	77fb      	strb	r3, [r7, #31]
 8002c6a:	e004      	b.n	8002c76 <UART_SetConfig+0x212>
 8002c6c:	2310      	movs	r3, #16
 8002c6e:	77fb      	strb	r3, [r7, #31]
 8002c70:	e001      	b.n	8002c76 <UART_SetConfig+0x212>
 8002c72:	2310      	movs	r3, #16
 8002c74:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c7e:	d16b      	bne.n	8002d58 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002c80:	7ffb      	ldrb	r3, [r7, #31]
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d838      	bhi.n	8002cf8 <UART_SetConfig+0x294>
 8002c86:	a201      	add	r2, pc, #4	@ (adr r2, 8002c8c <UART_SetConfig+0x228>)
 8002c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8c:	08002cb1 	.word	0x08002cb1
 8002c90:	08002cb9 	.word	0x08002cb9
 8002c94:	08002cc1 	.word	0x08002cc1
 8002c98:	08002cf9 	.word	0x08002cf9
 8002c9c:	08002cc7 	.word	0x08002cc7
 8002ca0:	08002cf9 	.word	0x08002cf9
 8002ca4:	08002cf9 	.word	0x08002cf9
 8002ca8:	08002cf9 	.word	0x08002cf9
 8002cac:	08002ccf 	.word	0x08002ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb0:	f7ff fba0 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 8002cb4:	61b8      	str	r0, [r7, #24]
        break;
 8002cb6:	e024      	b.n	8002d02 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cb8:	f7ff fbbe 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002cbc:	61b8      	str	r0, [r7, #24]
        break;
 8002cbe:	e020      	b.n	8002d02 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <UART_SetConfig+0x290>)
 8002cc2:	61bb      	str	r3, [r7, #24]
        break;
 8002cc4:	e01d      	b.n	8002d02 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cc6:	f7ff fb35 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 8002cca:	61b8      	str	r0, [r7, #24]
        break;
 8002ccc:	e019      	b.n	8002d02 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cd2:	61bb      	str	r3, [r7, #24]
        break;
 8002cd4:	e015      	b.n	8002d02 <UART_SetConfig+0x29e>
 8002cd6:	bf00      	nop
 8002cd8:	efff69f3 	.word	0xefff69f3
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40004400 	.word	0x40004400
 8002ce8:	40004800 	.word	0x40004800
 8002cec:	40004c00 	.word	0x40004c00
 8002cf0:	40005000 	.word	0x40005000
 8002cf4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	77bb      	strb	r3, [r7, #30]
        break;
 8002d00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d073      	beq.n	8002df0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	005a      	lsls	r2, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	085b      	lsrs	r3, r3, #1
 8002d12:	441a      	add	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d916      	bls.n	8002d52 <UART_SetConfig+0x2ee>
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d2a:	d212      	bcs.n	8002d52 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f023 030f 	bic.w	r3, r3, #15
 8002d34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	89fb      	ldrh	r3, [r7, #14]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	89fa      	ldrh	r2, [r7, #14]
 8002d4e:	60da      	str	r2, [r3, #12]
 8002d50:	e04e      	b.n	8002df0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	77bb      	strb	r3, [r7, #30]
 8002d56:	e04b      	b.n	8002df0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d58:	7ffb      	ldrb	r3, [r7, #31]
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d827      	bhi.n	8002dae <UART_SetConfig+0x34a>
 8002d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d64 <UART_SetConfig+0x300>)
 8002d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d64:	08002d89 	.word	0x08002d89
 8002d68:	08002d91 	.word	0x08002d91
 8002d6c:	08002d99 	.word	0x08002d99
 8002d70:	08002daf 	.word	0x08002daf
 8002d74:	08002d9f 	.word	0x08002d9f
 8002d78:	08002daf 	.word	0x08002daf
 8002d7c:	08002daf 	.word	0x08002daf
 8002d80:	08002daf 	.word	0x08002daf
 8002d84:	08002da7 	.word	0x08002da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d88:	f7ff fb34 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 8002d8c:	61b8      	str	r0, [r7, #24]
        break;
 8002d8e:	e013      	b.n	8002db8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d90:	f7ff fb52 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8002d94:	61b8      	str	r0, [r7, #24]
        break;
 8002d96:	e00f      	b.n	8002db8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <UART_SetConfig+0x3a4>)
 8002d9a:	61bb      	str	r3, [r7, #24]
        break;
 8002d9c:	e00c      	b.n	8002db8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d9e:	f7ff fac9 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 8002da2:	61b8      	str	r0, [r7, #24]
        break;
 8002da4:	e008      	b.n	8002db8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002daa:	61bb      	str	r3, [r7, #24]
        break;
 8002dac:	e004      	b.n	8002db8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	77bb      	strb	r3, [r7, #30]
        break;
 8002db6:	bf00      	nop
    }

    if (pclk != 0U)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d018      	beq.n	8002df0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	085a      	lsrs	r2, r3, #1
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	441a      	add	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b0f      	cmp	r3, #15
 8002dd6:	d909      	bls.n	8002dec <UART_SetConfig+0x388>
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dde:	d205      	bcs.n	8002dec <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	e001      	b.n	8002df0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002dfc:	7fbb      	ldrb	r3, [r7, #30]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	007a1200 	.word	0x007a1200

08002e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01a      	beq.n	8002f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f0a:	d10a      	bne.n	8002f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b098      	sub	sp, #96	@ 0x60
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f60:	f7fd fc92 	bl	8000888 <HAL_GetTick>
 8002f64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d12e      	bne.n	8002fd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f88c 	bl	80030a0 <UART_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d021      	beq.n	8002fd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f96:	e853 3f00 	ldrex	r3, [r3]
 8002f9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fb4:	e841 2300 	strex	r3, r2, [r1]
 8002fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e6      	bne.n	8002f8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e062      	b.n	8003098 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d149      	bne.n	8003074 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f856 	bl	80030a0 <UART_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d03c      	beq.n	8003074 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	e853 3f00 	ldrex	r3, [r3]
 8003006:	623b      	str	r3, [r7, #32]
   return(result);
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800300e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003018:	633b      	str	r3, [r7, #48]	@ 0x30
 800301a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800301e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003020:	e841 2300 	strex	r3, r2, [r1]
 8003024:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e6      	bne.n	8002ffa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3308      	adds	r3, #8
 8003032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	e853 3f00 	ldrex	r3, [r3]
 800303a:	60fb      	str	r3, [r7, #12]
   return(result);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3308      	adds	r3, #8
 800304a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800304c:	61fa      	str	r2, [r7, #28]
 800304e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	69b9      	ldr	r1, [r7, #24]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	e841 2300 	strex	r3, r2, [r1]
 8003058:	617b      	str	r3, [r7, #20]
   return(result);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e5      	bne.n	800302c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e011      	b.n	8003098 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3758      	adds	r7, #88	@ 0x58
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b0:	e04f      	b.n	8003152 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030b8:	d04b      	beq.n	8003152 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7fd fbe5 	bl	8000888 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e04e      	b.n	8003172 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d037      	beq.n	8003152 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b80      	cmp	r3, #128	@ 0x80
 80030e6:	d034      	beq.n	8003152 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b40      	cmp	r3, #64	@ 0x40
 80030ec:	d031      	beq.n	8003152 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d110      	bne.n	800311e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2208      	movs	r2, #8
 8003102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f838 	bl	800317a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2208      	movs	r2, #8
 800310e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e029      	b.n	8003172 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800312c:	d111      	bne.n	8003152 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f81e 	bl	800317a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e00f      	b.n	8003172 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4013      	ands	r3, r2
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	429a      	cmp	r2, r3
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	429a      	cmp	r2, r3
 800316e:	d0a0      	beq.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800317a:	b480      	push	{r7}
 800317c:	b095      	sub	sp, #84	@ 0x54
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003192:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031a8:	e841 2300 	strex	r3, r2, [r1]
 80031ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e6      	bne.n	8003182 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3308      	adds	r3, #8
 80031ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	e853 3f00 	ldrex	r3, [r3]
 80031c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3308      	adds	r3, #8
 80031d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031dc:	e841 2300 	strex	r3, r2, [r1]
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e5      	bne.n	80031b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d118      	bne.n	8003222 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f023 0310 	bic.w	r3, r3, #16
 8003204:	647b      	str	r3, [r7, #68]	@ 0x44
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800320e:	61bb      	str	r3, [r7, #24]
 8003210:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	6979      	ldr	r1, [r7, #20]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	613b      	str	r3, [r7, #16]
   return(result);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e6      	bne.n	80031f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003236:	bf00      	nop
 8003238:	3754      	adds	r7, #84	@ 0x54
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <_vsiprintf_r>:
 8003244:	b510      	push	{r4, lr}
 8003246:	b09a      	sub	sp, #104	@ 0x68
 8003248:	2400      	movs	r4, #0
 800324a:	9100      	str	r1, [sp, #0]
 800324c:	9104      	str	r1, [sp, #16]
 800324e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003252:	9105      	str	r1, [sp, #20]
 8003254:	9102      	str	r1, [sp, #8]
 8003256:	4905      	ldr	r1, [pc, #20]	@ (800326c <_vsiprintf_r+0x28>)
 8003258:	9103      	str	r1, [sp, #12]
 800325a:	4669      	mov	r1, sp
 800325c:	9419      	str	r4, [sp, #100]	@ 0x64
 800325e:	f000 f8a1 	bl	80033a4 <_svfiprintf_r>
 8003262:	9b00      	ldr	r3, [sp, #0]
 8003264:	701c      	strb	r4, [r3, #0]
 8003266:	b01a      	add	sp, #104	@ 0x68
 8003268:	bd10      	pop	{r4, pc}
 800326a:	bf00      	nop
 800326c:	ffff0208 	.word	0xffff0208

08003270 <vsiprintf>:
 8003270:	4613      	mov	r3, r2
 8003272:	460a      	mov	r2, r1
 8003274:	4601      	mov	r1, r0
 8003276:	4802      	ldr	r0, [pc, #8]	@ (8003280 <vsiprintf+0x10>)
 8003278:	6800      	ldr	r0, [r0, #0]
 800327a:	f7ff bfe3 	b.w	8003244 <_vsiprintf_r>
 800327e:	bf00      	nop
 8003280:	2000000c 	.word	0x2000000c

08003284 <memset>:
 8003284:	4402      	add	r2, r0
 8003286:	4603      	mov	r3, r0
 8003288:	4293      	cmp	r3, r2
 800328a:	d100      	bne.n	800328e <memset+0xa>
 800328c:	4770      	bx	lr
 800328e:	f803 1b01 	strb.w	r1, [r3], #1
 8003292:	e7f9      	b.n	8003288 <memset+0x4>

08003294 <__errno>:
 8003294:	4b01      	ldr	r3, [pc, #4]	@ (800329c <__errno+0x8>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	2000000c 	.word	0x2000000c

080032a0 <__libc_init_array>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4d0d      	ldr	r5, [pc, #52]	@ (80032d8 <__libc_init_array+0x38>)
 80032a4:	4c0d      	ldr	r4, [pc, #52]	@ (80032dc <__libc_init_array+0x3c>)
 80032a6:	1b64      	subs	r4, r4, r5
 80032a8:	10a4      	asrs	r4, r4, #2
 80032aa:	2600      	movs	r6, #0
 80032ac:	42a6      	cmp	r6, r4
 80032ae:	d109      	bne.n	80032c4 <__libc_init_array+0x24>
 80032b0:	4d0b      	ldr	r5, [pc, #44]	@ (80032e0 <__libc_init_array+0x40>)
 80032b2:	4c0c      	ldr	r4, [pc, #48]	@ (80032e4 <__libc_init_array+0x44>)
 80032b4:	f000 fc64 	bl	8003b80 <_init>
 80032b8:	1b64      	subs	r4, r4, r5
 80032ba:	10a4      	asrs	r4, r4, #2
 80032bc:	2600      	movs	r6, #0
 80032be:	42a6      	cmp	r6, r4
 80032c0:	d105      	bne.n	80032ce <__libc_init_array+0x2e>
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c8:	4798      	blx	r3
 80032ca:	3601      	adds	r6, #1
 80032cc:	e7ee      	b.n	80032ac <__libc_init_array+0xc>
 80032ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d2:	4798      	blx	r3
 80032d4:	3601      	adds	r6, #1
 80032d6:	e7f2      	b.n	80032be <__libc_init_array+0x1e>
 80032d8:	08003c3c 	.word	0x08003c3c
 80032dc:	08003c3c 	.word	0x08003c3c
 80032e0:	08003c3c 	.word	0x08003c3c
 80032e4:	08003c40 	.word	0x08003c40

080032e8 <__retarget_lock_acquire_recursive>:
 80032e8:	4770      	bx	lr

080032ea <__retarget_lock_release_recursive>:
 80032ea:	4770      	bx	lr

080032ec <__ssputs_r>:
 80032ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032f0:	688e      	ldr	r6, [r1, #8]
 80032f2:	461f      	mov	r7, r3
 80032f4:	42be      	cmp	r6, r7
 80032f6:	680b      	ldr	r3, [r1, #0]
 80032f8:	4682      	mov	sl, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	4690      	mov	r8, r2
 80032fe:	d82d      	bhi.n	800335c <__ssputs_r+0x70>
 8003300:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003304:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003308:	d026      	beq.n	8003358 <__ssputs_r+0x6c>
 800330a:	6965      	ldr	r5, [r4, #20]
 800330c:	6909      	ldr	r1, [r1, #16]
 800330e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003312:	eba3 0901 	sub.w	r9, r3, r1
 8003316:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800331a:	1c7b      	adds	r3, r7, #1
 800331c:	444b      	add	r3, r9
 800331e:	106d      	asrs	r5, r5, #1
 8003320:	429d      	cmp	r5, r3
 8003322:	bf38      	it	cc
 8003324:	461d      	movcc	r5, r3
 8003326:	0553      	lsls	r3, r2, #21
 8003328:	d527      	bpl.n	800337a <__ssputs_r+0x8e>
 800332a:	4629      	mov	r1, r5
 800332c:	f000 f958 	bl	80035e0 <_malloc_r>
 8003330:	4606      	mov	r6, r0
 8003332:	b360      	cbz	r0, 800338e <__ssputs_r+0xa2>
 8003334:	6921      	ldr	r1, [r4, #16]
 8003336:	464a      	mov	r2, r9
 8003338:	f000 fbc2 	bl	8003ac0 <memcpy>
 800333c:	89a3      	ldrh	r3, [r4, #12]
 800333e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003346:	81a3      	strh	r3, [r4, #12]
 8003348:	6126      	str	r6, [r4, #16]
 800334a:	6165      	str	r5, [r4, #20]
 800334c:	444e      	add	r6, r9
 800334e:	eba5 0509 	sub.w	r5, r5, r9
 8003352:	6026      	str	r6, [r4, #0]
 8003354:	60a5      	str	r5, [r4, #8]
 8003356:	463e      	mov	r6, r7
 8003358:	42be      	cmp	r6, r7
 800335a:	d900      	bls.n	800335e <__ssputs_r+0x72>
 800335c:	463e      	mov	r6, r7
 800335e:	6820      	ldr	r0, [r4, #0]
 8003360:	4632      	mov	r2, r6
 8003362:	4641      	mov	r1, r8
 8003364:	f000 fb82 	bl	8003a6c <memmove>
 8003368:	68a3      	ldr	r3, [r4, #8]
 800336a:	1b9b      	subs	r3, r3, r6
 800336c:	60a3      	str	r3, [r4, #8]
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	4433      	add	r3, r6
 8003372:	6023      	str	r3, [r4, #0]
 8003374:	2000      	movs	r0, #0
 8003376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800337a:	462a      	mov	r2, r5
 800337c:	f000 fb48 	bl	8003a10 <_realloc_r>
 8003380:	4606      	mov	r6, r0
 8003382:	2800      	cmp	r0, #0
 8003384:	d1e0      	bne.n	8003348 <__ssputs_r+0x5c>
 8003386:	6921      	ldr	r1, [r4, #16]
 8003388:	4650      	mov	r0, sl
 800338a:	f000 fba7 	bl	8003adc <_free_r>
 800338e:	230c      	movs	r3, #12
 8003390:	f8ca 3000 	str.w	r3, [sl]
 8003394:	89a3      	ldrh	r3, [r4, #12]
 8003396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800339a:	81a3      	strh	r3, [r4, #12]
 800339c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033a0:	e7e9      	b.n	8003376 <__ssputs_r+0x8a>
	...

080033a4 <_svfiprintf_r>:
 80033a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a8:	4698      	mov	r8, r3
 80033aa:	898b      	ldrh	r3, [r1, #12]
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	b09d      	sub	sp, #116	@ 0x74
 80033b0:	4607      	mov	r7, r0
 80033b2:	460d      	mov	r5, r1
 80033b4:	4614      	mov	r4, r2
 80033b6:	d510      	bpl.n	80033da <_svfiprintf_r+0x36>
 80033b8:	690b      	ldr	r3, [r1, #16]
 80033ba:	b973      	cbnz	r3, 80033da <_svfiprintf_r+0x36>
 80033bc:	2140      	movs	r1, #64	@ 0x40
 80033be:	f000 f90f 	bl	80035e0 <_malloc_r>
 80033c2:	6028      	str	r0, [r5, #0]
 80033c4:	6128      	str	r0, [r5, #16]
 80033c6:	b930      	cbnz	r0, 80033d6 <_svfiprintf_r+0x32>
 80033c8:	230c      	movs	r3, #12
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033d0:	b01d      	add	sp, #116	@ 0x74
 80033d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033d6:	2340      	movs	r3, #64	@ 0x40
 80033d8:	616b      	str	r3, [r5, #20]
 80033da:	2300      	movs	r3, #0
 80033dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80033de:	2320      	movs	r3, #32
 80033e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80033e8:	2330      	movs	r3, #48	@ 0x30
 80033ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003588 <_svfiprintf_r+0x1e4>
 80033ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033f2:	f04f 0901 	mov.w	r9, #1
 80033f6:	4623      	mov	r3, r4
 80033f8:	469a      	mov	sl, r3
 80033fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033fe:	b10a      	cbz	r2, 8003404 <_svfiprintf_r+0x60>
 8003400:	2a25      	cmp	r2, #37	@ 0x25
 8003402:	d1f9      	bne.n	80033f8 <_svfiprintf_r+0x54>
 8003404:	ebba 0b04 	subs.w	fp, sl, r4
 8003408:	d00b      	beq.n	8003422 <_svfiprintf_r+0x7e>
 800340a:	465b      	mov	r3, fp
 800340c:	4622      	mov	r2, r4
 800340e:	4629      	mov	r1, r5
 8003410:	4638      	mov	r0, r7
 8003412:	f7ff ff6b 	bl	80032ec <__ssputs_r>
 8003416:	3001      	adds	r0, #1
 8003418:	f000 80a7 	beq.w	800356a <_svfiprintf_r+0x1c6>
 800341c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800341e:	445a      	add	r2, fp
 8003420:	9209      	str	r2, [sp, #36]	@ 0x24
 8003422:	f89a 3000 	ldrb.w	r3, [sl]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 809f 	beq.w	800356a <_svfiprintf_r+0x1c6>
 800342c:	2300      	movs	r3, #0
 800342e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003436:	f10a 0a01 	add.w	sl, sl, #1
 800343a:	9304      	str	r3, [sp, #16]
 800343c:	9307      	str	r3, [sp, #28]
 800343e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003442:	931a      	str	r3, [sp, #104]	@ 0x68
 8003444:	4654      	mov	r4, sl
 8003446:	2205      	movs	r2, #5
 8003448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800344c:	484e      	ldr	r0, [pc, #312]	@ (8003588 <_svfiprintf_r+0x1e4>)
 800344e:	f7fc fecf 	bl	80001f0 <memchr>
 8003452:	9a04      	ldr	r2, [sp, #16]
 8003454:	b9d8      	cbnz	r0, 800348e <_svfiprintf_r+0xea>
 8003456:	06d0      	lsls	r0, r2, #27
 8003458:	bf44      	itt	mi
 800345a:	2320      	movmi	r3, #32
 800345c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003460:	0711      	lsls	r1, r2, #28
 8003462:	bf44      	itt	mi
 8003464:	232b      	movmi	r3, #43	@ 0x2b
 8003466:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800346a:	f89a 3000 	ldrb.w	r3, [sl]
 800346e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003470:	d015      	beq.n	800349e <_svfiprintf_r+0xfa>
 8003472:	9a07      	ldr	r2, [sp, #28]
 8003474:	4654      	mov	r4, sl
 8003476:	2000      	movs	r0, #0
 8003478:	f04f 0c0a 	mov.w	ip, #10
 800347c:	4621      	mov	r1, r4
 800347e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003482:	3b30      	subs	r3, #48	@ 0x30
 8003484:	2b09      	cmp	r3, #9
 8003486:	d94b      	bls.n	8003520 <_svfiprintf_r+0x17c>
 8003488:	b1b0      	cbz	r0, 80034b8 <_svfiprintf_r+0x114>
 800348a:	9207      	str	r2, [sp, #28]
 800348c:	e014      	b.n	80034b8 <_svfiprintf_r+0x114>
 800348e:	eba0 0308 	sub.w	r3, r0, r8
 8003492:	fa09 f303 	lsl.w	r3, r9, r3
 8003496:	4313      	orrs	r3, r2
 8003498:	9304      	str	r3, [sp, #16]
 800349a:	46a2      	mov	sl, r4
 800349c:	e7d2      	b.n	8003444 <_svfiprintf_r+0xa0>
 800349e:	9b03      	ldr	r3, [sp, #12]
 80034a0:	1d19      	adds	r1, r3, #4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	9103      	str	r1, [sp, #12]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bfbb      	ittet	lt
 80034aa:	425b      	neglt	r3, r3
 80034ac:	f042 0202 	orrlt.w	r2, r2, #2
 80034b0:	9307      	strge	r3, [sp, #28]
 80034b2:	9307      	strlt	r3, [sp, #28]
 80034b4:	bfb8      	it	lt
 80034b6:	9204      	strlt	r2, [sp, #16]
 80034b8:	7823      	ldrb	r3, [r4, #0]
 80034ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80034bc:	d10a      	bne.n	80034d4 <_svfiprintf_r+0x130>
 80034be:	7863      	ldrb	r3, [r4, #1]
 80034c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80034c2:	d132      	bne.n	800352a <_svfiprintf_r+0x186>
 80034c4:	9b03      	ldr	r3, [sp, #12]
 80034c6:	1d1a      	adds	r2, r3, #4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	9203      	str	r2, [sp, #12]
 80034cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80034d0:	3402      	adds	r4, #2
 80034d2:	9305      	str	r3, [sp, #20]
 80034d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003598 <_svfiprintf_r+0x1f4>
 80034d8:	7821      	ldrb	r1, [r4, #0]
 80034da:	2203      	movs	r2, #3
 80034dc:	4650      	mov	r0, sl
 80034de:	f7fc fe87 	bl	80001f0 <memchr>
 80034e2:	b138      	cbz	r0, 80034f4 <_svfiprintf_r+0x150>
 80034e4:	9b04      	ldr	r3, [sp, #16]
 80034e6:	eba0 000a 	sub.w	r0, r0, sl
 80034ea:	2240      	movs	r2, #64	@ 0x40
 80034ec:	4082      	lsls	r2, r0
 80034ee:	4313      	orrs	r3, r2
 80034f0:	3401      	adds	r4, #1
 80034f2:	9304      	str	r3, [sp, #16]
 80034f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f8:	4824      	ldr	r0, [pc, #144]	@ (800358c <_svfiprintf_r+0x1e8>)
 80034fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034fe:	2206      	movs	r2, #6
 8003500:	f7fc fe76 	bl	80001f0 <memchr>
 8003504:	2800      	cmp	r0, #0
 8003506:	d036      	beq.n	8003576 <_svfiprintf_r+0x1d2>
 8003508:	4b21      	ldr	r3, [pc, #132]	@ (8003590 <_svfiprintf_r+0x1ec>)
 800350a:	bb1b      	cbnz	r3, 8003554 <_svfiprintf_r+0x1b0>
 800350c:	9b03      	ldr	r3, [sp, #12]
 800350e:	3307      	adds	r3, #7
 8003510:	f023 0307 	bic.w	r3, r3, #7
 8003514:	3308      	adds	r3, #8
 8003516:	9303      	str	r3, [sp, #12]
 8003518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800351a:	4433      	add	r3, r6
 800351c:	9309      	str	r3, [sp, #36]	@ 0x24
 800351e:	e76a      	b.n	80033f6 <_svfiprintf_r+0x52>
 8003520:	fb0c 3202 	mla	r2, ip, r2, r3
 8003524:	460c      	mov	r4, r1
 8003526:	2001      	movs	r0, #1
 8003528:	e7a8      	b.n	800347c <_svfiprintf_r+0xd8>
 800352a:	2300      	movs	r3, #0
 800352c:	3401      	adds	r4, #1
 800352e:	9305      	str	r3, [sp, #20]
 8003530:	4619      	mov	r1, r3
 8003532:	f04f 0c0a 	mov.w	ip, #10
 8003536:	4620      	mov	r0, r4
 8003538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800353c:	3a30      	subs	r2, #48	@ 0x30
 800353e:	2a09      	cmp	r2, #9
 8003540:	d903      	bls.n	800354a <_svfiprintf_r+0x1a6>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0c6      	beq.n	80034d4 <_svfiprintf_r+0x130>
 8003546:	9105      	str	r1, [sp, #20]
 8003548:	e7c4      	b.n	80034d4 <_svfiprintf_r+0x130>
 800354a:	fb0c 2101 	mla	r1, ip, r1, r2
 800354e:	4604      	mov	r4, r0
 8003550:	2301      	movs	r3, #1
 8003552:	e7f0      	b.n	8003536 <_svfiprintf_r+0x192>
 8003554:	ab03      	add	r3, sp, #12
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	462a      	mov	r2, r5
 800355a:	4b0e      	ldr	r3, [pc, #56]	@ (8003594 <_svfiprintf_r+0x1f0>)
 800355c:	a904      	add	r1, sp, #16
 800355e:	4638      	mov	r0, r7
 8003560:	f3af 8000 	nop.w
 8003564:	1c42      	adds	r2, r0, #1
 8003566:	4606      	mov	r6, r0
 8003568:	d1d6      	bne.n	8003518 <_svfiprintf_r+0x174>
 800356a:	89ab      	ldrh	r3, [r5, #12]
 800356c:	065b      	lsls	r3, r3, #25
 800356e:	f53f af2d 	bmi.w	80033cc <_svfiprintf_r+0x28>
 8003572:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003574:	e72c      	b.n	80033d0 <_svfiprintf_r+0x2c>
 8003576:	ab03      	add	r3, sp, #12
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	462a      	mov	r2, r5
 800357c:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <_svfiprintf_r+0x1f0>)
 800357e:	a904      	add	r1, sp, #16
 8003580:	4638      	mov	r0, r7
 8003582:	f000 f91b 	bl	80037bc <_printf_i>
 8003586:	e7ed      	b.n	8003564 <_svfiprintf_r+0x1c0>
 8003588:	08003c00 	.word	0x08003c00
 800358c:	08003c0a 	.word	0x08003c0a
 8003590:	00000000 	.word	0x00000000
 8003594:	080032ed 	.word	0x080032ed
 8003598:	08003c06 	.word	0x08003c06

0800359c <sbrk_aligned>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	4e0f      	ldr	r6, [pc, #60]	@ (80035dc <sbrk_aligned+0x40>)
 80035a0:	460c      	mov	r4, r1
 80035a2:	6831      	ldr	r1, [r6, #0]
 80035a4:	4605      	mov	r5, r0
 80035a6:	b911      	cbnz	r1, 80035ae <sbrk_aligned+0x12>
 80035a8:	f000 fa7a 	bl	8003aa0 <_sbrk_r>
 80035ac:	6030      	str	r0, [r6, #0]
 80035ae:	4621      	mov	r1, r4
 80035b0:	4628      	mov	r0, r5
 80035b2:	f000 fa75 	bl	8003aa0 <_sbrk_r>
 80035b6:	1c43      	adds	r3, r0, #1
 80035b8:	d103      	bne.n	80035c2 <sbrk_aligned+0x26>
 80035ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80035be:	4620      	mov	r0, r4
 80035c0:	bd70      	pop	{r4, r5, r6, pc}
 80035c2:	1cc4      	adds	r4, r0, #3
 80035c4:	f024 0403 	bic.w	r4, r4, #3
 80035c8:	42a0      	cmp	r0, r4
 80035ca:	d0f8      	beq.n	80035be <sbrk_aligned+0x22>
 80035cc:	1a21      	subs	r1, r4, r0
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 fa66 	bl	8003aa0 <_sbrk_r>
 80035d4:	3001      	adds	r0, #1
 80035d6:	d1f2      	bne.n	80035be <sbrk_aligned+0x22>
 80035d8:	e7ef      	b.n	80035ba <sbrk_aligned+0x1e>
 80035da:	bf00      	nop
 80035dc:	20000268 	.word	0x20000268

080035e0 <_malloc_r>:
 80035e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035e4:	1ccd      	adds	r5, r1, #3
 80035e6:	f025 0503 	bic.w	r5, r5, #3
 80035ea:	3508      	adds	r5, #8
 80035ec:	2d0c      	cmp	r5, #12
 80035ee:	bf38      	it	cc
 80035f0:	250c      	movcc	r5, #12
 80035f2:	2d00      	cmp	r5, #0
 80035f4:	4606      	mov	r6, r0
 80035f6:	db01      	blt.n	80035fc <_malloc_r+0x1c>
 80035f8:	42a9      	cmp	r1, r5
 80035fa:	d904      	bls.n	8003606 <_malloc_r+0x26>
 80035fc:	230c      	movs	r3, #12
 80035fe:	6033      	str	r3, [r6, #0]
 8003600:	2000      	movs	r0, #0
 8003602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036dc <_malloc_r+0xfc>
 800360a:	f000 f9f5 	bl	80039f8 <__malloc_lock>
 800360e:	f8d8 3000 	ldr.w	r3, [r8]
 8003612:	461c      	mov	r4, r3
 8003614:	bb44      	cbnz	r4, 8003668 <_malloc_r+0x88>
 8003616:	4629      	mov	r1, r5
 8003618:	4630      	mov	r0, r6
 800361a:	f7ff ffbf 	bl	800359c <sbrk_aligned>
 800361e:	1c43      	adds	r3, r0, #1
 8003620:	4604      	mov	r4, r0
 8003622:	d158      	bne.n	80036d6 <_malloc_r+0xf6>
 8003624:	f8d8 4000 	ldr.w	r4, [r8]
 8003628:	4627      	mov	r7, r4
 800362a:	2f00      	cmp	r7, #0
 800362c:	d143      	bne.n	80036b6 <_malloc_r+0xd6>
 800362e:	2c00      	cmp	r4, #0
 8003630:	d04b      	beq.n	80036ca <_malloc_r+0xea>
 8003632:	6823      	ldr	r3, [r4, #0]
 8003634:	4639      	mov	r1, r7
 8003636:	4630      	mov	r0, r6
 8003638:	eb04 0903 	add.w	r9, r4, r3
 800363c:	f000 fa30 	bl	8003aa0 <_sbrk_r>
 8003640:	4581      	cmp	r9, r0
 8003642:	d142      	bne.n	80036ca <_malloc_r+0xea>
 8003644:	6821      	ldr	r1, [r4, #0]
 8003646:	1a6d      	subs	r5, r5, r1
 8003648:	4629      	mov	r1, r5
 800364a:	4630      	mov	r0, r6
 800364c:	f7ff ffa6 	bl	800359c <sbrk_aligned>
 8003650:	3001      	adds	r0, #1
 8003652:	d03a      	beq.n	80036ca <_malloc_r+0xea>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	442b      	add	r3, r5
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	f8d8 3000 	ldr.w	r3, [r8]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	bb62      	cbnz	r2, 80036bc <_malloc_r+0xdc>
 8003662:	f8c8 7000 	str.w	r7, [r8]
 8003666:	e00f      	b.n	8003688 <_malloc_r+0xa8>
 8003668:	6822      	ldr	r2, [r4, #0]
 800366a:	1b52      	subs	r2, r2, r5
 800366c:	d420      	bmi.n	80036b0 <_malloc_r+0xd0>
 800366e:	2a0b      	cmp	r2, #11
 8003670:	d917      	bls.n	80036a2 <_malloc_r+0xc2>
 8003672:	1961      	adds	r1, r4, r5
 8003674:	42a3      	cmp	r3, r4
 8003676:	6025      	str	r5, [r4, #0]
 8003678:	bf18      	it	ne
 800367a:	6059      	strne	r1, [r3, #4]
 800367c:	6863      	ldr	r3, [r4, #4]
 800367e:	bf08      	it	eq
 8003680:	f8c8 1000 	streq.w	r1, [r8]
 8003684:	5162      	str	r2, [r4, r5]
 8003686:	604b      	str	r3, [r1, #4]
 8003688:	4630      	mov	r0, r6
 800368a:	f000 f9bb 	bl	8003a04 <__malloc_unlock>
 800368e:	f104 000b 	add.w	r0, r4, #11
 8003692:	1d23      	adds	r3, r4, #4
 8003694:	f020 0007 	bic.w	r0, r0, #7
 8003698:	1ac2      	subs	r2, r0, r3
 800369a:	bf1c      	itt	ne
 800369c:	1a1b      	subne	r3, r3, r0
 800369e:	50a3      	strne	r3, [r4, r2]
 80036a0:	e7af      	b.n	8003602 <_malloc_r+0x22>
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	42a3      	cmp	r3, r4
 80036a6:	bf0c      	ite	eq
 80036a8:	f8c8 2000 	streq.w	r2, [r8]
 80036ac:	605a      	strne	r2, [r3, #4]
 80036ae:	e7eb      	b.n	8003688 <_malloc_r+0xa8>
 80036b0:	4623      	mov	r3, r4
 80036b2:	6864      	ldr	r4, [r4, #4]
 80036b4:	e7ae      	b.n	8003614 <_malloc_r+0x34>
 80036b6:	463c      	mov	r4, r7
 80036b8:	687f      	ldr	r7, [r7, #4]
 80036ba:	e7b6      	b.n	800362a <_malloc_r+0x4a>
 80036bc:	461a      	mov	r2, r3
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	42a3      	cmp	r3, r4
 80036c2:	d1fb      	bne.n	80036bc <_malloc_r+0xdc>
 80036c4:	2300      	movs	r3, #0
 80036c6:	6053      	str	r3, [r2, #4]
 80036c8:	e7de      	b.n	8003688 <_malloc_r+0xa8>
 80036ca:	230c      	movs	r3, #12
 80036cc:	6033      	str	r3, [r6, #0]
 80036ce:	4630      	mov	r0, r6
 80036d0:	f000 f998 	bl	8003a04 <__malloc_unlock>
 80036d4:	e794      	b.n	8003600 <_malloc_r+0x20>
 80036d6:	6005      	str	r5, [r0, #0]
 80036d8:	e7d6      	b.n	8003688 <_malloc_r+0xa8>
 80036da:	bf00      	nop
 80036dc:	2000026c 	.word	0x2000026c

080036e0 <_printf_common>:
 80036e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e4:	4616      	mov	r6, r2
 80036e6:	4698      	mov	r8, r3
 80036e8:	688a      	ldr	r2, [r1, #8]
 80036ea:	690b      	ldr	r3, [r1, #16]
 80036ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036f0:	4293      	cmp	r3, r2
 80036f2:	bfb8      	it	lt
 80036f4:	4613      	movlt	r3, r2
 80036f6:	6033      	str	r3, [r6, #0]
 80036f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036fc:	4607      	mov	r7, r0
 80036fe:	460c      	mov	r4, r1
 8003700:	b10a      	cbz	r2, 8003706 <_printf_common+0x26>
 8003702:	3301      	adds	r3, #1
 8003704:	6033      	str	r3, [r6, #0]
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	0699      	lsls	r1, r3, #26
 800370a:	bf42      	ittt	mi
 800370c:	6833      	ldrmi	r3, [r6, #0]
 800370e:	3302      	addmi	r3, #2
 8003710:	6033      	strmi	r3, [r6, #0]
 8003712:	6825      	ldr	r5, [r4, #0]
 8003714:	f015 0506 	ands.w	r5, r5, #6
 8003718:	d106      	bne.n	8003728 <_printf_common+0x48>
 800371a:	f104 0a19 	add.w	sl, r4, #25
 800371e:	68e3      	ldr	r3, [r4, #12]
 8003720:	6832      	ldr	r2, [r6, #0]
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	42ab      	cmp	r3, r5
 8003726:	dc26      	bgt.n	8003776 <_printf_common+0x96>
 8003728:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800372c:	6822      	ldr	r2, [r4, #0]
 800372e:	3b00      	subs	r3, #0
 8003730:	bf18      	it	ne
 8003732:	2301      	movne	r3, #1
 8003734:	0692      	lsls	r2, r2, #26
 8003736:	d42b      	bmi.n	8003790 <_printf_common+0xb0>
 8003738:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800373c:	4641      	mov	r1, r8
 800373e:	4638      	mov	r0, r7
 8003740:	47c8      	blx	r9
 8003742:	3001      	adds	r0, #1
 8003744:	d01e      	beq.n	8003784 <_printf_common+0xa4>
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	6922      	ldr	r2, [r4, #16]
 800374a:	f003 0306 	and.w	r3, r3, #6
 800374e:	2b04      	cmp	r3, #4
 8003750:	bf02      	ittt	eq
 8003752:	68e5      	ldreq	r5, [r4, #12]
 8003754:	6833      	ldreq	r3, [r6, #0]
 8003756:	1aed      	subeq	r5, r5, r3
 8003758:	68a3      	ldr	r3, [r4, #8]
 800375a:	bf0c      	ite	eq
 800375c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003760:	2500      	movne	r5, #0
 8003762:	4293      	cmp	r3, r2
 8003764:	bfc4      	itt	gt
 8003766:	1a9b      	subgt	r3, r3, r2
 8003768:	18ed      	addgt	r5, r5, r3
 800376a:	2600      	movs	r6, #0
 800376c:	341a      	adds	r4, #26
 800376e:	42b5      	cmp	r5, r6
 8003770:	d11a      	bne.n	80037a8 <_printf_common+0xc8>
 8003772:	2000      	movs	r0, #0
 8003774:	e008      	b.n	8003788 <_printf_common+0xa8>
 8003776:	2301      	movs	r3, #1
 8003778:	4652      	mov	r2, sl
 800377a:	4641      	mov	r1, r8
 800377c:	4638      	mov	r0, r7
 800377e:	47c8      	blx	r9
 8003780:	3001      	adds	r0, #1
 8003782:	d103      	bne.n	800378c <_printf_common+0xac>
 8003784:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800378c:	3501      	adds	r5, #1
 800378e:	e7c6      	b.n	800371e <_printf_common+0x3e>
 8003790:	18e1      	adds	r1, r4, r3
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	2030      	movs	r0, #48	@ 0x30
 8003796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800379a:	4422      	add	r2, r4
 800379c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80037a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80037a4:	3302      	adds	r3, #2
 80037a6:	e7c7      	b.n	8003738 <_printf_common+0x58>
 80037a8:	2301      	movs	r3, #1
 80037aa:	4622      	mov	r2, r4
 80037ac:	4641      	mov	r1, r8
 80037ae:	4638      	mov	r0, r7
 80037b0:	47c8      	blx	r9
 80037b2:	3001      	adds	r0, #1
 80037b4:	d0e6      	beq.n	8003784 <_printf_common+0xa4>
 80037b6:	3601      	adds	r6, #1
 80037b8:	e7d9      	b.n	800376e <_printf_common+0x8e>
	...

080037bc <_printf_i>:
 80037bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037c0:	7e0f      	ldrb	r7, [r1, #24]
 80037c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037c4:	2f78      	cmp	r7, #120	@ 0x78
 80037c6:	4691      	mov	r9, r2
 80037c8:	4680      	mov	r8, r0
 80037ca:	460c      	mov	r4, r1
 80037cc:	469a      	mov	sl, r3
 80037ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037d2:	d807      	bhi.n	80037e4 <_printf_i+0x28>
 80037d4:	2f62      	cmp	r7, #98	@ 0x62
 80037d6:	d80a      	bhi.n	80037ee <_printf_i+0x32>
 80037d8:	2f00      	cmp	r7, #0
 80037da:	f000 80d1 	beq.w	8003980 <_printf_i+0x1c4>
 80037de:	2f58      	cmp	r7, #88	@ 0x58
 80037e0:	f000 80b8 	beq.w	8003954 <_printf_i+0x198>
 80037e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037ec:	e03a      	b.n	8003864 <_printf_i+0xa8>
 80037ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037f2:	2b15      	cmp	r3, #21
 80037f4:	d8f6      	bhi.n	80037e4 <_printf_i+0x28>
 80037f6:	a101      	add	r1, pc, #4	@ (adr r1, 80037fc <_printf_i+0x40>)
 80037f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037fc:	08003855 	.word	0x08003855
 8003800:	08003869 	.word	0x08003869
 8003804:	080037e5 	.word	0x080037e5
 8003808:	080037e5 	.word	0x080037e5
 800380c:	080037e5 	.word	0x080037e5
 8003810:	080037e5 	.word	0x080037e5
 8003814:	08003869 	.word	0x08003869
 8003818:	080037e5 	.word	0x080037e5
 800381c:	080037e5 	.word	0x080037e5
 8003820:	080037e5 	.word	0x080037e5
 8003824:	080037e5 	.word	0x080037e5
 8003828:	08003967 	.word	0x08003967
 800382c:	08003893 	.word	0x08003893
 8003830:	08003921 	.word	0x08003921
 8003834:	080037e5 	.word	0x080037e5
 8003838:	080037e5 	.word	0x080037e5
 800383c:	08003989 	.word	0x08003989
 8003840:	080037e5 	.word	0x080037e5
 8003844:	08003893 	.word	0x08003893
 8003848:	080037e5 	.word	0x080037e5
 800384c:	080037e5 	.word	0x080037e5
 8003850:	08003929 	.word	0x08003929
 8003854:	6833      	ldr	r3, [r6, #0]
 8003856:	1d1a      	adds	r2, r3, #4
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6032      	str	r2, [r6, #0]
 800385c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003864:	2301      	movs	r3, #1
 8003866:	e09c      	b.n	80039a2 <_printf_i+0x1e6>
 8003868:	6833      	ldr	r3, [r6, #0]
 800386a:	6820      	ldr	r0, [r4, #0]
 800386c:	1d19      	adds	r1, r3, #4
 800386e:	6031      	str	r1, [r6, #0]
 8003870:	0606      	lsls	r6, r0, #24
 8003872:	d501      	bpl.n	8003878 <_printf_i+0xbc>
 8003874:	681d      	ldr	r5, [r3, #0]
 8003876:	e003      	b.n	8003880 <_printf_i+0xc4>
 8003878:	0645      	lsls	r5, r0, #25
 800387a:	d5fb      	bpl.n	8003874 <_printf_i+0xb8>
 800387c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003880:	2d00      	cmp	r5, #0
 8003882:	da03      	bge.n	800388c <_printf_i+0xd0>
 8003884:	232d      	movs	r3, #45	@ 0x2d
 8003886:	426d      	negs	r5, r5
 8003888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800388c:	4858      	ldr	r0, [pc, #352]	@ (80039f0 <_printf_i+0x234>)
 800388e:	230a      	movs	r3, #10
 8003890:	e011      	b.n	80038b6 <_printf_i+0xfa>
 8003892:	6821      	ldr	r1, [r4, #0]
 8003894:	6833      	ldr	r3, [r6, #0]
 8003896:	0608      	lsls	r0, r1, #24
 8003898:	f853 5b04 	ldr.w	r5, [r3], #4
 800389c:	d402      	bmi.n	80038a4 <_printf_i+0xe8>
 800389e:	0649      	lsls	r1, r1, #25
 80038a0:	bf48      	it	mi
 80038a2:	b2ad      	uxthmi	r5, r5
 80038a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80038a6:	4852      	ldr	r0, [pc, #328]	@ (80039f0 <_printf_i+0x234>)
 80038a8:	6033      	str	r3, [r6, #0]
 80038aa:	bf14      	ite	ne
 80038ac:	230a      	movne	r3, #10
 80038ae:	2308      	moveq	r3, #8
 80038b0:	2100      	movs	r1, #0
 80038b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038b6:	6866      	ldr	r6, [r4, #4]
 80038b8:	60a6      	str	r6, [r4, #8]
 80038ba:	2e00      	cmp	r6, #0
 80038bc:	db05      	blt.n	80038ca <_printf_i+0x10e>
 80038be:	6821      	ldr	r1, [r4, #0]
 80038c0:	432e      	orrs	r6, r5
 80038c2:	f021 0104 	bic.w	r1, r1, #4
 80038c6:	6021      	str	r1, [r4, #0]
 80038c8:	d04b      	beq.n	8003962 <_printf_i+0x1a6>
 80038ca:	4616      	mov	r6, r2
 80038cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80038d0:	fb03 5711 	mls	r7, r3, r1, r5
 80038d4:	5dc7      	ldrb	r7, [r0, r7]
 80038d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038da:	462f      	mov	r7, r5
 80038dc:	42bb      	cmp	r3, r7
 80038de:	460d      	mov	r5, r1
 80038e0:	d9f4      	bls.n	80038cc <_printf_i+0x110>
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d10b      	bne.n	80038fe <_printf_i+0x142>
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	07df      	lsls	r7, r3, #31
 80038ea:	d508      	bpl.n	80038fe <_printf_i+0x142>
 80038ec:	6923      	ldr	r3, [r4, #16]
 80038ee:	6861      	ldr	r1, [r4, #4]
 80038f0:	4299      	cmp	r1, r3
 80038f2:	bfde      	ittt	le
 80038f4:	2330      	movle	r3, #48	@ 0x30
 80038f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038fa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80038fe:	1b92      	subs	r2, r2, r6
 8003900:	6122      	str	r2, [r4, #16]
 8003902:	f8cd a000 	str.w	sl, [sp]
 8003906:	464b      	mov	r3, r9
 8003908:	aa03      	add	r2, sp, #12
 800390a:	4621      	mov	r1, r4
 800390c:	4640      	mov	r0, r8
 800390e:	f7ff fee7 	bl	80036e0 <_printf_common>
 8003912:	3001      	adds	r0, #1
 8003914:	d14a      	bne.n	80039ac <_printf_i+0x1f0>
 8003916:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800391a:	b004      	add	sp, #16
 800391c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	f043 0320 	orr.w	r3, r3, #32
 8003926:	6023      	str	r3, [r4, #0]
 8003928:	4832      	ldr	r0, [pc, #200]	@ (80039f4 <_printf_i+0x238>)
 800392a:	2778      	movs	r7, #120	@ 0x78
 800392c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	6831      	ldr	r1, [r6, #0]
 8003934:	061f      	lsls	r7, r3, #24
 8003936:	f851 5b04 	ldr.w	r5, [r1], #4
 800393a:	d402      	bmi.n	8003942 <_printf_i+0x186>
 800393c:	065f      	lsls	r7, r3, #25
 800393e:	bf48      	it	mi
 8003940:	b2ad      	uxthmi	r5, r5
 8003942:	6031      	str	r1, [r6, #0]
 8003944:	07d9      	lsls	r1, r3, #31
 8003946:	bf44      	itt	mi
 8003948:	f043 0320 	orrmi.w	r3, r3, #32
 800394c:	6023      	strmi	r3, [r4, #0]
 800394e:	b11d      	cbz	r5, 8003958 <_printf_i+0x19c>
 8003950:	2310      	movs	r3, #16
 8003952:	e7ad      	b.n	80038b0 <_printf_i+0xf4>
 8003954:	4826      	ldr	r0, [pc, #152]	@ (80039f0 <_printf_i+0x234>)
 8003956:	e7e9      	b.n	800392c <_printf_i+0x170>
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	f023 0320 	bic.w	r3, r3, #32
 800395e:	6023      	str	r3, [r4, #0]
 8003960:	e7f6      	b.n	8003950 <_printf_i+0x194>
 8003962:	4616      	mov	r6, r2
 8003964:	e7bd      	b.n	80038e2 <_printf_i+0x126>
 8003966:	6833      	ldr	r3, [r6, #0]
 8003968:	6825      	ldr	r5, [r4, #0]
 800396a:	6961      	ldr	r1, [r4, #20]
 800396c:	1d18      	adds	r0, r3, #4
 800396e:	6030      	str	r0, [r6, #0]
 8003970:	062e      	lsls	r6, r5, #24
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	d501      	bpl.n	800397a <_printf_i+0x1be>
 8003976:	6019      	str	r1, [r3, #0]
 8003978:	e002      	b.n	8003980 <_printf_i+0x1c4>
 800397a:	0668      	lsls	r0, r5, #25
 800397c:	d5fb      	bpl.n	8003976 <_printf_i+0x1ba>
 800397e:	8019      	strh	r1, [r3, #0]
 8003980:	2300      	movs	r3, #0
 8003982:	6123      	str	r3, [r4, #16]
 8003984:	4616      	mov	r6, r2
 8003986:	e7bc      	b.n	8003902 <_printf_i+0x146>
 8003988:	6833      	ldr	r3, [r6, #0]
 800398a:	1d1a      	adds	r2, r3, #4
 800398c:	6032      	str	r2, [r6, #0]
 800398e:	681e      	ldr	r6, [r3, #0]
 8003990:	6862      	ldr	r2, [r4, #4]
 8003992:	2100      	movs	r1, #0
 8003994:	4630      	mov	r0, r6
 8003996:	f7fc fc2b 	bl	80001f0 <memchr>
 800399a:	b108      	cbz	r0, 80039a0 <_printf_i+0x1e4>
 800399c:	1b80      	subs	r0, r0, r6
 800399e:	6060      	str	r0, [r4, #4]
 80039a0:	6863      	ldr	r3, [r4, #4]
 80039a2:	6123      	str	r3, [r4, #16]
 80039a4:	2300      	movs	r3, #0
 80039a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039aa:	e7aa      	b.n	8003902 <_printf_i+0x146>
 80039ac:	6923      	ldr	r3, [r4, #16]
 80039ae:	4632      	mov	r2, r6
 80039b0:	4649      	mov	r1, r9
 80039b2:	4640      	mov	r0, r8
 80039b4:	47d0      	blx	sl
 80039b6:	3001      	adds	r0, #1
 80039b8:	d0ad      	beq.n	8003916 <_printf_i+0x15a>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	079b      	lsls	r3, r3, #30
 80039be:	d413      	bmi.n	80039e8 <_printf_i+0x22c>
 80039c0:	68e0      	ldr	r0, [r4, #12]
 80039c2:	9b03      	ldr	r3, [sp, #12]
 80039c4:	4298      	cmp	r0, r3
 80039c6:	bfb8      	it	lt
 80039c8:	4618      	movlt	r0, r3
 80039ca:	e7a6      	b.n	800391a <_printf_i+0x15e>
 80039cc:	2301      	movs	r3, #1
 80039ce:	4632      	mov	r2, r6
 80039d0:	4649      	mov	r1, r9
 80039d2:	4640      	mov	r0, r8
 80039d4:	47d0      	blx	sl
 80039d6:	3001      	adds	r0, #1
 80039d8:	d09d      	beq.n	8003916 <_printf_i+0x15a>
 80039da:	3501      	adds	r5, #1
 80039dc:	68e3      	ldr	r3, [r4, #12]
 80039de:	9903      	ldr	r1, [sp, #12]
 80039e0:	1a5b      	subs	r3, r3, r1
 80039e2:	42ab      	cmp	r3, r5
 80039e4:	dcf2      	bgt.n	80039cc <_printf_i+0x210>
 80039e6:	e7eb      	b.n	80039c0 <_printf_i+0x204>
 80039e8:	2500      	movs	r5, #0
 80039ea:	f104 0619 	add.w	r6, r4, #25
 80039ee:	e7f5      	b.n	80039dc <_printf_i+0x220>
 80039f0:	08003c11 	.word	0x08003c11
 80039f4:	08003c22 	.word	0x08003c22

080039f8 <__malloc_lock>:
 80039f8:	4801      	ldr	r0, [pc, #4]	@ (8003a00 <__malloc_lock+0x8>)
 80039fa:	f7ff bc75 	b.w	80032e8 <__retarget_lock_acquire_recursive>
 80039fe:	bf00      	nop
 8003a00:	20000264 	.word	0x20000264

08003a04 <__malloc_unlock>:
 8003a04:	4801      	ldr	r0, [pc, #4]	@ (8003a0c <__malloc_unlock+0x8>)
 8003a06:	f7ff bc70 	b.w	80032ea <__retarget_lock_release_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	20000264 	.word	0x20000264

08003a10 <_realloc_r>:
 8003a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a14:	4607      	mov	r7, r0
 8003a16:	4614      	mov	r4, r2
 8003a18:	460d      	mov	r5, r1
 8003a1a:	b921      	cbnz	r1, 8003a26 <_realloc_r+0x16>
 8003a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a20:	4611      	mov	r1, r2
 8003a22:	f7ff bddd 	b.w	80035e0 <_malloc_r>
 8003a26:	b92a      	cbnz	r2, 8003a34 <_realloc_r+0x24>
 8003a28:	f000 f858 	bl	8003adc <_free_r>
 8003a2c:	4625      	mov	r5, r4
 8003a2e:	4628      	mov	r0, r5
 8003a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a34:	f000 f89c 	bl	8003b70 <_malloc_usable_size_r>
 8003a38:	4284      	cmp	r4, r0
 8003a3a:	4606      	mov	r6, r0
 8003a3c:	d802      	bhi.n	8003a44 <_realloc_r+0x34>
 8003a3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a42:	d8f4      	bhi.n	8003a2e <_realloc_r+0x1e>
 8003a44:	4621      	mov	r1, r4
 8003a46:	4638      	mov	r0, r7
 8003a48:	f7ff fdca 	bl	80035e0 <_malloc_r>
 8003a4c:	4680      	mov	r8, r0
 8003a4e:	b908      	cbnz	r0, 8003a54 <_realloc_r+0x44>
 8003a50:	4645      	mov	r5, r8
 8003a52:	e7ec      	b.n	8003a2e <_realloc_r+0x1e>
 8003a54:	42b4      	cmp	r4, r6
 8003a56:	4622      	mov	r2, r4
 8003a58:	4629      	mov	r1, r5
 8003a5a:	bf28      	it	cs
 8003a5c:	4632      	movcs	r2, r6
 8003a5e:	f000 f82f 	bl	8003ac0 <memcpy>
 8003a62:	4629      	mov	r1, r5
 8003a64:	4638      	mov	r0, r7
 8003a66:	f000 f839 	bl	8003adc <_free_r>
 8003a6a:	e7f1      	b.n	8003a50 <_realloc_r+0x40>

08003a6c <memmove>:
 8003a6c:	4288      	cmp	r0, r1
 8003a6e:	b510      	push	{r4, lr}
 8003a70:	eb01 0402 	add.w	r4, r1, r2
 8003a74:	d902      	bls.n	8003a7c <memmove+0x10>
 8003a76:	4284      	cmp	r4, r0
 8003a78:	4623      	mov	r3, r4
 8003a7a:	d807      	bhi.n	8003a8c <memmove+0x20>
 8003a7c:	1e43      	subs	r3, r0, #1
 8003a7e:	42a1      	cmp	r1, r4
 8003a80:	d008      	beq.n	8003a94 <memmove+0x28>
 8003a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a8a:	e7f8      	b.n	8003a7e <memmove+0x12>
 8003a8c:	4402      	add	r2, r0
 8003a8e:	4601      	mov	r1, r0
 8003a90:	428a      	cmp	r2, r1
 8003a92:	d100      	bne.n	8003a96 <memmove+0x2a>
 8003a94:	bd10      	pop	{r4, pc}
 8003a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a9e:	e7f7      	b.n	8003a90 <memmove+0x24>

08003aa0 <_sbrk_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4d06      	ldr	r5, [pc, #24]	@ (8003abc <_sbrk_r+0x1c>)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	602b      	str	r3, [r5, #0]
 8003aac:	f7fc fe20 	bl	80006f0 <_sbrk>
 8003ab0:	1c43      	adds	r3, r0, #1
 8003ab2:	d102      	bne.n	8003aba <_sbrk_r+0x1a>
 8003ab4:	682b      	ldr	r3, [r5, #0]
 8003ab6:	b103      	cbz	r3, 8003aba <_sbrk_r+0x1a>
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	20000270 	.word	0x20000270

08003ac0 <memcpy>:
 8003ac0:	440a      	add	r2, r1
 8003ac2:	4291      	cmp	r1, r2
 8003ac4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003ac8:	d100      	bne.n	8003acc <memcpy+0xc>
 8003aca:	4770      	bx	lr
 8003acc:	b510      	push	{r4, lr}
 8003ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ad6:	4291      	cmp	r1, r2
 8003ad8:	d1f9      	bne.n	8003ace <memcpy+0xe>
 8003ada:	bd10      	pop	{r4, pc}

08003adc <_free_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4605      	mov	r5, r0
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	d041      	beq.n	8003b68 <_free_r+0x8c>
 8003ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae8:	1f0c      	subs	r4, r1, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bfb8      	it	lt
 8003aee:	18e4      	addlt	r4, r4, r3
 8003af0:	f7ff ff82 	bl	80039f8 <__malloc_lock>
 8003af4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b6c <_free_r+0x90>)
 8003af6:	6813      	ldr	r3, [r2, #0]
 8003af8:	b933      	cbnz	r3, 8003b08 <_free_r+0x2c>
 8003afa:	6063      	str	r3, [r4, #4]
 8003afc:	6014      	str	r4, [r2, #0]
 8003afe:	4628      	mov	r0, r5
 8003b00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b04:	f7ff bf7e 	b.w	8003a04 <__malloc_unlock>
 8003b08:	42a3      	cmp	r3, r4
 8003b0a:	d908      	bls.n	8003b1e <_free_r+0x42>
 8003b0c:	6820      	ldr	r0, [r4, #0]
 8003b0e:	1821      	adds	r1, r4, r0
 8003b10:	428b      	cmp	r3, r1
 8003b12:	bf01      	itttt	eq
 8003b14:	6819      	ldreq	r1, [r3, #0]
 8003b16:	685b      	ldreq	r3, [r3, #4]
 8003b18:	1809      	addeq	r1, r1, r0
 8003b1a:	6021      	streq	r1, [r4, #0]
 8003b1c:	e7ed      	b.n	8003afa <_free_r+0x1e>
 8003b1e:	461a      	mov	r2, r3
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	b10b      	cbz	r3, 8003b28 <_free_r+0x4c>
 8003b24:	42a3      	cmp	r3, r4
 8003b26:	d9fa      	bls.n	8003b1e <_free_r+0x42>
 8003b28:	6811      	ldr	r1, [r2, #0]
 8003b2a:	1850      	adds	r0, r2, r1
 8003b2c:	42a0      	cmp	r0, r4
 8003b2e:	d10b      	bne.n	8003b48 <_free_r+0x6c>
 8003b30:	6820      	ldr	r0, [r4, #0]
 8003b32:	4401      	add	r1, r0
 8003b34:	1850      	adds	r0, r2, r1
 8003b36:	4283      	cmp	r3, r0
 8003b38:	6011      	str	r1, [r2, #0]
 8003b3a:	d1e0      	bne.n	8003afe <_free_r+0x22>
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	6053      	str	r3, [r2, #4]
 8003b42:	4408      	add	r0, r1
 8003b44:	6010      	str	r0, [r2, #0]
 8003b46:	e7da      	b.n	8003afe <_free_r+0x22>
 8003b48:	d902      	bls.n	8003b50 <_free_r+0x74>
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	602b      	str	r3, [r5, #0]
 8003b4e:	e7d6      	b.n	8003afe <_free_r+0x22>
 8003b50:	6820      	ldr	r0, [r4, #0]
 8003b52:	1821      	adds	r1, r4, r0
 8003b54:	428b      	cmp	r3, r1
 8003b56:	bf04      	itt	eq
 8003b58:	6819      	ldreq	r1, [r3, #0]
 8003b5a:	685b      	ldreq	r3, [r3, #4]
 8003b5c:	6063      	str	r3, [r4, #4]
 8003b5e:	bf04      	itt	eq
 8003b60:	1809      	addeq	r1, r1, r0
 8003b62:	6021      	streq	r1, [r4, #0]
 8003b64:	6054      	str	r4, [r2, #4]
 8003b66:	e7ca      	b.n	8003afe <_free_r+0x22>
 8003b68:	bd38      	pop	{r3, r4, r5, pc}
 8003b6a:	bf00      	nop
 8003b6c:	2000026c 	.word	0x2000026c

08003b70 <_malloc_usable_size_r>:
 8003b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b74:	1f18      	subs	r0, r3, #4
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bfbc      	itt	lt
 8003b7a:	580b      	ldrlt	r3, [r1, r0]
 8003b7c:	18c0      	addlt	r0, r0, r3
 8003b7e:	4770      	bx	lr

08003b80 <_init>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

08003b8c <_fini>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr
