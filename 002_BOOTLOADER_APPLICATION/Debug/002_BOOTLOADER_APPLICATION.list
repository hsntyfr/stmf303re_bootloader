
002_BOOTLOADER_APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003818  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080039b8  080039b8  000049b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b18  08003b18  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b18  08003b18  00004b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b20  08003b20  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b20  08003b20  00004b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b24  08003b24  00004b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003b28  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          000001f4  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000250  20000250  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008e69  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001613  00000000  00000000  0000def5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  0000f508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050d  00000000  00000000  0000fba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb47  00000000  00000000  000100b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009669  00000000  00000000  0002fbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c021d  00000000  00000000  00039265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f9482  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ea8  00000000  00000000  000f94c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  000fb370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080039a0 	.word	0x080039a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080039a0 	.word	0x080039a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <print_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_message(char* format, ...){
 8000290:	b40f      	push	{r0, r1, r2, r3}
 8000292:	b580      	push	{r7, lr}
 8000294:	b09a      	sub	sp, #104	@ 0x68
 8000296:	af00      	add	r7, sp, #0

	char coming_message[100];

	va_list va_list;
	va_start(va_list, format);
 8000298:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800029c:	603b      	str	r3, [r7, #0]
	vsprintf(coming_message, format, va_list);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	683a      	ldr	r2, [r7, #0]
 80002a2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 fef3 	bl	8003090 <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)coming_message, strlen(coming_message), HAL_MAX_DELAY);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff97 	bl	80001e0 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	1d39      	adds	r1, r7, #4
 80002b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <print_message+0x40>)
 80002be:	f002 fa57 	bl	8002770 <HAL_UART_Transmit>
	va_end(va_list);
}
 80002c2:	bf00      	nop
 80002c4:	3768      	adds	r7, #104	@ 0x68
 80002c6:	46bd      	mov	sp, r7
 80002c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr
 80002d0:	20000078 	.word	0x20000078

080002d4 <bootloader_uart_read_data>:

void bootloader_uart_read_data() {
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	//
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
	...

080002e4 <bootloader_jump_to_user_application>:

void bootloader_jump_to_user_application() {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0

	//1- reset handlerin adresini tutan bir metot işaretçisi
	void (*bootloader_application_reset_handler) (void);

	//2- kullanıcı uygulamasına atlandığını ilet
	print_message("BL DEBUG MSG: bootloader_jump_to_user_application called\n");
 80002ea:	480f      	ldr	r0, [pc, #60]	@ (8000328 <bootloader_jump_to_user_application+0x44>)
 80002ec:	f7ff ffd0 	bl	8000290 <print_message>

	//3- MSP'nin değerini tut
	uint32_t MSP_value = *(volatile uint32_t*) FLASH_SECTOR_2_BASE_ADDRESS;
 80002f0:	4b0e      	ldr	r3, [pc, #56]	@ (800032c <bootloader_jump_to_user_application+0x48>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	60fb      	str	r3, [r7, #12]
	print_message("BL DEBUG MODE: MSP value: %#x\n", MSP_value);
 80002f6:	68f9      	ldr	r1, [r7, #12]
 80002f8:	480d      	ldr	r0, [pc, #52]	@ (8000330 <bootloader_jump_to_user_application+0x4c>)
 80002fa:	f7ff ffc9 	bl	8000290 <print_message>
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	f383 8808 	msr	MSP, r3
}
 8000308:	bf00      	nop
	__set_MSP(MSP_value);

	//4- sıfırlama işleyicisinin değerini tut
	uint32_t reset_value = *(volatile uint32_t*) (FLASH_SECTOR_2_BASE_ADDRESS + 4);
 800030a:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <bootloader_jump_to_user_application+0x50>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	60bb      	str	r3, [r7, #8]
	print_message("BL DEBUG MODE: reset value: %#x\n", reset_value);
 8000310:	68b9      	ldr	r1, [r7, #8]
 8000312:	4809      	ldr	r0, [pc, #36]	@ (8000338 <bootloader_jump_to_user_application+0x54>)
 8000314:	f7ff ffbc 	bl	8000290 <print_message>

	//5- sıfırlama işleyicisi ile bir işlem başlat
	bootloader_application_reset_handler = (void *) reset_value;
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	607b      	str	r3, [r7, #4]

	//6- sıfırlama işeyicisini çağır ve kullanıcı uygulamasına atla
	bootloader_application_reset_handler();
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4798      	blx	r3

}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	080039b8 	.word	0x080039b8
 800032c:	08008000 	.word	0x08008000
 8000330:	080039f4 	.word	0x080039f4
 8000334:	08008004 	.word	0x08008004
 8000338:	08003a14 	.word	0x08003a14

0800033c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000340:	f000 fa32 	bl	80007a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000344:	f000 f828 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000348:	f000 f8a8 	bl	800049c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800034c:	f000 f876 	bl	800043c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_SET){
 8000350:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000354:	480d      	ldr	r0, [pc, #52]	@ (800038c <main+0x50>)
 8000356:	f000 fd21 	bl	8000d9c <HAL_GPIO_ReadPin>
 800035a:	4603      	mov	r3, r0
 800035c:	2b01      	cmp	r3, #1
 800035e:	d005      	beq.n	800036c <main+0x30>

	  print_message("BL DEBUG MODE: Button is pressed go to BL mode\n");
 8000360:	480b      	ldr	r0, [pc, #44]	@ (8000390 <main+0x54>)
 8000362:	f7ff ff95 	bl	8000290 <print_message>

	  bootloader_uart_read_data();
 8000366:	f7ff ffb5 	bl	80002d4 <bootloader_uart_read_data>
 800036a:	e004      	b.n	8000376 <main+0x3a>

  }
  else {

	  print_message("BL DEBUG MODE: Button is not pressed executing user application\n");
 800036c:	4809      	ldr	r0, [pc, #36]	@ (8000394 <main+0x58>)
 800036e:	f7ff ff8f 	bl	8000290 <print_message>

	  bootloader_jump_to_user_application();
 8000372:	f7ff ffb7 	bl	80002e4 <bootloader_jump_to_user_application>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000376:	2120      	movs	r1, #32
 8000378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037c:	f000 fd3e 	bl	8000dfc <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000380:	2064      	movs	r0, #100	@ 0x64
 8000382:	f000 fa77 	bl	8000874 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000386:	bf00      	nop
 8000388:	e7f5      	b.n	8000376 <main+0x3a>
 800038a:	bf00      	nop
 800038c:	48000800 	.word	0x48000800
 8000390:	08003a38 	.word	0x08003a38
 8000394:	08003a68 	.word	0x08003a68

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b0a6      	sub	sp, #152	@ 0x98
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003a2:	2228      	movs	r2, #40	@ 0x28
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fe7c 	bl	80030a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2258      	movs	r2, #88	@ 0x58
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f002 fe6e 	bl	80030a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c8:	2302      	movs	r3, #2
 80003ca:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003cc:	2301      	movs	r3, #1
 80003ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d0:	2310      	movs	r3, #16
 80003d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003dc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fd25 	bl	8000e30 <HAL_RCC_OscConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003ec:	f000 f8b0 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f0:	230f      	movs	r3, #15
 80003f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f4:	2300      	movs	r3, #0
 80003f6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000404:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fd34 	bl	8001e78 <HAL_RCC_ClockConfig>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000416:	f000 f89b 	bl	8000550 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800041a:	2302      	movs	r3, #2
 800041c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800041e:	2300      	movs	r3, #0
 8000420:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4618      	mov	r0, r3
 8000426:	f001 ff39 	bl	800229c <HAL_RCCEx_PeriphCLKConfig>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000430:	f000 f88e 	bl	8000550 <Error_Handler>
  }
}
 8000434:	bf00      	nop
 8000436:	3798      	adds	r7, #152	@ 0x98
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000440:	4b14      	ldr	r3, [pc, #80]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000442:	4a15      	ldr	r2, [pc, #84]	@ (8000498 <MX_USART2_UART_Init+0x5c>)
 8000444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000446:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000448:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800044c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800044e:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000454:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800045a:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000460:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000462:	220c      	movs	r2, #12
 8000464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000466:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000468:	2200      	movs	r2, #0
 800046a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800046c:	4b09      	ldr	r3, [pc, #36]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 800046e:	2200      	movs	r2, #0
 8000470:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000472:	4b08      	ldr	r3, [pc, #32]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000474:	2200      	movs	r2, #0
 8000476:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000478:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 800047a:	2200      	movs	r2, #0
 800047c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800047e:	4805      	ldr	r0, [pc, #20]	@ (8000494 <MX_USART2_UART_Init+0x58>)
 8000480:	f002 f928 	bl	80026d4 <HAL_UART_Init>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800048a:	f000 f861 	bl	8000550 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000078 	.word	0x20000078
 8000498:	40004400 	.word	0x40004400

0800049c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	f107 030c 	add.w	r3, r7, #12
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b2:	4b25      	ldr	r3, [pc, #148]	@ (8000548 <MX_GPIO_Init+0xac>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a24      	ldr	r2, [pc, #144]	@ (8000548 <MX_GPIO_Init+0xac>)
 80004b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b22      	ldr	r3, [pc, #136]	@ (8000548 <MX_GPIO_Init+0xac>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000548 <MX_GPIO_Init+0xac>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000548 <MX_GPIO_Init+0xac>)
 80004d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <MX_GPIO_Init+0xac>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b19      	ldr	r3, [pc, #100]	@ (8000548 <MX_GPIO_Init+0xac>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a18      	ldr	r2, [pc, #96]	@ (8000548 <MX_GPIO_Init+0xac>)
 80004e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b16      	ldr	r3, [pc, #88]	@ (8000548 <MX_GPIO_Init+0xac>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2120      	movs	r1, #32
 80004fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000502:	f000 fc63 	bl	8000dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000506:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800050a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050c:	2300      	movs	r3, #0
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	4619      	mov	r1, r3
 800051a:	480c      	ldr	r0, [pc, #48]	@ (800054c <MX_GPIO_Init+0xb0>)
 800051c:	f000 fab4 	bl	8000a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000520:	2320      	movs	r3, #32
 8000522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	2301      	movs	r3, #1
 8000526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	2300      	movs	r3, #0
 800052e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	4619      	mov	r1, r3
 8000536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053a:	f000 faa5 	bl	8000a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800053e:	bf00      	nop
 8000540:	3720      	adds	r7, #32
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000
 800054c:	48000800 	.word	0x48000800

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <Error_Handler+0x8>

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000562:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <HAL_MspInit+0x44>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a0e      	ldr	r2, [pc, #56]	@ (80005a0 <HAL_MspInit+0x44>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <HAL_MspInit+0x44>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <HAL_MspInit+0x44>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a08      	ldr	r2, [pc, #32]	@ (80005a0 <HAL_MspInit+0x44>)
 8000580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <HAL_MspInit+0x44>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	@ 0x28
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a25      	ldr	r2, [pc, #148]	@ (8000658 <HAL_UART_MspInit+0xb4>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d144      	bne.n	8000650 <HAL_UART_MspInit+0xac>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c6:	4b25      	ldr	r3, [pc, #148]	@ (800065c <HAL_UART_MspInit+0xb8>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a24      	ldr	r2, [pc, #144]	@ (800065c <HAL_UART_MspInit+0xb8>)
 80005cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b22      	ldr	r3, [pc, #136]	@ (800065c <HAL_UART_MspInit+0xb8>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <HAL_UART_MspInit+0xb8>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a1e      	ldr	r2, [pc, #120]	@ (800065c <HAL_UART_MspInit+0xb8>)
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b1c      	ldr	r3, [pc, #112]	@ (800065c <HAL_UART_MspInit+0xb8>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b19      	ldr	r3, [pc, #100]	@ (800065c <HAL_UART_MspInit+0xb8>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a18      	ldr	r2, [pc, #96]	@ (800065c <HAL_UART_MspInit+0xb8>)
 80005fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b16      	ldr	r3, [pc, #88]	@ (800065c <HAL_UART_MspInit+0xb8>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800060e:	2308      	movs	r3, #8
 8000610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000612:	2302      	movs	r3, #2
 8000614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061a:	2303      	movs	r3, #3
 800061c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800061e:	2307      	movs	r3, #7
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062c:	f000 fa2c 	bl	8000a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000630:	2308      	movs	r3, #8
 8000632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000634:	2302      	movs	r3, #2
 8000636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063c:	2303      	movs	r3, #3
 800063e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000640:	2307      	movs	r3, #7
 8000642:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <HAL_UART_MspInit+0xbc>)
 800064c:	f000 fa1c 	bl	8000a88 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	@ 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40004400 	.word	0x40004400
 800065c:	40021000 	.word	0x40021000
 8000660:	48000400 	.word	0x48000400

08000664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <NMI_Handler+0x4>

0800066c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <HardFault_Handler+0x4>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <MemManage_Handler+0x4>

0800067c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <BusFault_Handler+0x4>

08000684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <UsageFault_Handler+0x4>

0800068c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ba:	f000 f8bb 	bl	8000834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006cc:	4a14      	ldr	r2, [pc, #80]	@ (8000720 <_sbrk+0x5c>)
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <_sbrk+0x60>)
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <_sbrk+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d102      	bne.n	80006e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <_sbrk+0x64>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <_sbrk+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <_sbrk+0x64>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d207      	bcs.n	8000704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f4:	f002 fcde 	bl	80030b4 <__errno>
 80006f8:	4603      	mov	r3, r0
 80006fa:	220c      	movs	r2, #12
 80006fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000702:	e009      	b.n	8000718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000704:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800070a:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <_sbrk+0x64>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	4a05      	ldr	r2, [pc, #20]	@ (8000728 <_sbrk+0x64>)
 8000714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20010000 	.word	0x20010000
 8000724:	00000400 	.word	0x00000400
 8000728:	20000100 	.word	0x20000100
 800072c:	20000250 	.word	0x20000250

08000730 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <SystemInit+0x20>)
 8000736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800073a:	4a05      	ldr	r2, [pc, #20]	@ (8000750 <SystemInit+0x20>)
 800073c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000740:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000754:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800078c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000758:	f7ff ffea 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490d      	ldr	r1, [pc, #52]	@ (8000794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0d      	ldr	r2, [pc, #52]	@ (8000798 <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0a      	ldr	r4, [pc, #40]	@ (80007a0 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000782:	f002 fc9d 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000786:	f7ff fdd9 	bl	800033c <main>

0800078a <LoopForever>:

LoopForever:
    b LoopForever
 800078a:	e7fe      	b.n	800078a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800078c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000794:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000798:	08003b28 	.word	0x08003b28
  ldr r2, =_sbss
 800079c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007a0:	20000250 	.word	0x20000250

080007a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a4:	e7fe      	b.n	80007a4 <ADC1_2_IRQHandler>
	...

080007a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <HAL_Init+0x28>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a07      	ldr	r2, [pc, #28]	@ (80007d0 <HAL_Init+0x28>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 f931 	bl	8000a20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	200f      	movs	r0, #15
 80007c0:	f000 f808 	bl	80007d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c4:	f7ff feca 	bl	800055c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40022000 	.word	0x40022000

080007d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <HAL_InitTick+0x54>)
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <HAL_InitTick+0x58>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f93b 	bl	8000a6e <HAL_SYSTICK_Config>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e00e      	b.n	8000820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b0f      	cmp	r3, #15
 8000806:	d80a      	bhi.n	800081e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000808:	2200      	movs	r2, #0
 800080a:	6879      	ldr	r1, [r7, #4]
 800080c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000810:	f000 f911 	bl	8000a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000814:	4a06      	ldr	r2, [pc, #24]	@ (8000830 <HAL_InitTick+0x5c>)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000000 	.word	0x20000000
 800082c:	20000008 	.word	0x20000008
 8000830:	20000004 	.word	0x20000004

08000834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_IncTick+0x20>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <HAL_IncTick+0x24>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4413      	add	r3, r2
 8000844:	4a04      	ldr	r2, [pc, #16]	@ (8000858 <HAL_IncTick+0x24>)
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000008 	.word	0x20000008
 8000858:	20000104 	.word	0x20000104

0800085c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000860:	4b03      	ldr	r3, [pc, #12]	@ (8000870 <HAL_GetTick+0x14>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000104 	.word	0x20000104

08000874 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800087c:	f7ff ffee 	bl	800085c <HAL_GetTick>
 8000880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800088c:	d005      	beq.n	800089a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088e:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <HAL_Delay+0x44>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4413      	add	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800089a:	bf00      	nop
 800089c:	f7ff ffde 	bl	800085c <HAL_GetTick>
 80008a0:	4602      	mov	r2, r0
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d8f7      	bhi.n	800089c <HAL_Delay+0x28>
  {
  }
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000008 	.word	0x20000008

080008bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ee:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <__NVIC_SetPriorityGrouping+0x44>)
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	60d3      	str	r3, [r2, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000908:	4b04      	ldr	r3, [pc, #16]	@ (800091c <__NVIC_GetPriorityGrouping+0x18>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	f003 0307 	and.w	r3, r3, #7
}
 8000912:	4618      	mov	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	2b00      	cmp	r3, #0
 8000932:	db0a      	blt.n	800094a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	490c      	ldr	r1, [pc, #48]	@ (800096c <__NVIC_SetPriority+0x4c>)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	0112      	lsls	r2, r2, #4
 8000940:	b2d2      	uxtb	r2, r2
 8000942:	440b      	add	r3, r1
 8000944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000948:	e00a      	b.n	8000960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4908      	ldr	r1, [pc, #32]	@ (8000970 <__NVIC_SetPriority+0x50>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 030f 	and.w	r3, r3, #15
 8000956:	3b04      	subs	r3, #4
 8000958:	0112      	lsls	r2, r2, #4
 800095a:	b2d2      	uxtb	r2, r2
 800095c:	440b      	add	r3, r1
 800095e:	761a      	strb	r2, [r3, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000974:	b480      	push	{r7}
 8000976:	b089      	sub	sp, #36	@ 0x24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	f1c3 0307 	rsb	r3, r3, #7
 800098e:	2b04      	cmp	r3, #4
 8000990:	bf28      	it	cs
 8000992:	2304      	movcs	r3, #4
 8000994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3304      	adds	r3, #4
 800099a:	2b06      	cmp	r3, #6
 800099c:	d902      	bls.n	80009a4 <NVIC_EncodePriority+0x30>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3b03      	subs	r3, #3
 80009a2:	e000      	b.n	80009a6 <NVIC_EncodePriority+0x32>
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43da      	mvns	r2, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	43d9      	mvns	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	4313      	orrs	r3, r2
         );
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3724      	adds	r7, #36	@ 0x24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009ec:	d301      	bcc.n	80009f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00f      	b.n	8000a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <SysTick_Config+0x40>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fa:	210f      	movs	r1, #15
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a00:	f7ff ff8e 	bl	8000920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a04:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <SysTick_Config+0x40>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0a:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <SysTick_Config+0x40>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010

08000a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ff47 	bl	80008bc <__NVIC_SetPriorityGrouping>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b086      	sub	sp, #24
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
 8000a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a48:	f7ff ff5c 	bl	8000904 <__NVIC_GetPriorityGrouping>
 8000a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	68b9      	ldr	r1, [r7, #8]
 8000a52:	6978      	ldr	r0, [r7, #20]
 8000a54:	f7ff ff8e 	bl	8000974 <NVIC_EncodePriority>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff5d 	bl	8000920 <__NVIC_SetPriority>
}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff ffb0 	bl	80009dc <SysTick_Config>
 8000a7c:	4603      	mov	r3, r0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b087      	sub	sp, #28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a96:	e160      	b.n	8000d5a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 8152 	beq.w	8000d54 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f003 0303 	and.w	r3, r3, #3
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d005      	beq.n	8000ac8 <HAL_GPIO_Init+0x40>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d130      	bne.n	8000b2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68da      	ldr	r2, [r3, #12]
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000afe:	2201      	movs	r2, #1
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	091b      	lsrs	r3, r3, #4
 8000b14:	f003 0201 	and.w	r2, r3, #1
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d017      	beq.n	8000b66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2203      	movs	r2, #3
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d123      	bne.n	8000bba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	08da      	lsrs	r2, r3, #3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3208      	adds	r2, #8
 8000b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	220f      	movs	r2, #15
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	691a      	ldr	r2, [r3, #16]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	08da      	lsrs	r2, r3, #3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3208      	adds	r2, #8
 8000bb4:	6939      	ldr	r1, [r7, #16]
 8000bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f003 0203 	and.w	r2, r3, #3
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 80ac 	beq.w	8000d54 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfc:	4b5e      	ldr	r3, [pc, #376]	@ (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a5d      	ldr	r2, [pc, #372]	@ (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b5b      	ldr	r3, [pc, #364]	@ (8000d78 <HAL_GPIO_Init+0x2f0>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c14:	4a59      	ldr	r2, [pc, #356]	@ (8000d7c <HAL_GPIO_Init+0x2f4>)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	3302      	adds	r3, #2
 8000c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	220f      	movs	r2, #15
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c3e:	d025      	beq.n	8000c8c <HAL_GPIO_Init+0x204>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a4f      	ldr	r2, [pc, #316]	@ (8000d80 <HAL_GPIO_Init+0x2f8>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d01f      	beq.n	8000c88 <HAL_GPIO_Init+0x200>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a4e      	ldr	r2, [pc, #312]	@ (8000d84 <HAL_GPIO_Init+0x2fc>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d019      	beq.n	8000c84 <HAL_GPIO_Init+0x1fc>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a4d      	ldr	r2, [pc, #308]	@ (8000d88 <HAL_GPIO_Init+0x300>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d013      	beq.n	8000c80 <HAL_GPIO_Init+0x1f8>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8000d8c <HAL_GPIO_Init+0x304>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d00d      	beq.n	8000c7c <HAL_GPIO_Init+0x1f4>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a4b      	ldr	r2, [pc, #300]	@ (8000d90 <HAL_GPIO_Init+0x308>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d007      	beq.n	8000c78 <HAL_GPIO_Init+0x1f0>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a4a      	ldr	r2, [pc, #296]	@ (8000d94 <HAL_GPIO_Init+0x30c>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d101      	bne.n	8000c74 <HAL_GPIO_Init+0x1ec>
 8000c70:	2306      	movs	r3, #6
 8000c72:	e00c      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c74:	2307      	movs	r3, #7
 8000c76:	e00a      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c78:	2305      	movs	r3, #5
 8000c7a:	e008      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	e006      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c80:	2303      	movs	r3, #3
 8000c82:	e004      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c84:	2302      	movs	r3, #2
 8000c86:	e002      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <HAL_GPIO_Init+0x206>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	f002 0203 	and.w	r2, r2, #3
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	4093      	lsls	r3, r2
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c9e:	4937      	ldr	r1, [pc, #220]	@ (8000d7c <HAL_GPIO_Init+0x2f4>)
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cac:	4b3a      	ldr	r3, [pc, #232]	@ (8000d98 <HAL_GPIO_Init+0x310>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d003      	beq.n	8000cd0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cd0:	4a31      	ldr	r2, [pc, #196]	@ (8000d98 <HAL_GPIO_Init+0x310>)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cd6:	4b30      	ldr	r3, [pc, #192]	@ (8000d98 <HAL_GPIO_Init+0x310>)
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cfa:	4a27      	ldr	r2, [pc, #156]	@ (8000d98 <HAL_GPIO_Init+0x310>)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d00:	4b25      	ldr	r3, [pc, #148]	@ (8000d98 <HAL_GPIO_Init+0x310>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d24:	4a1c      	ldr	r2, [pc, #112]	@ (8000d98 <HAL_GPIO_Init+0x310>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <HAL_GPIO_Init+0x310>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <HAL_GPIO_Init+0x310>)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3301      	adds	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	fa22 f303 	lsr.w	r3, r2, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f47f ae97 	bne.w	8000a98 <HAL_GPIO_Init+0x10>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	48000400 	.word	0x48000400
 8000d84:	48000800 	.word	0x48000800
 8000d88:	48000c00 	.word	0x48000c00
 8000d8c:	48001000 	.word	0x48001000
 8000d90:	48001400 	.word	0x48001400
 8000d94:	48001800 	.word	0x48001800
 8000d98:	40010400 	.word	0x40010400

08000d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	691a      	ldr	r2, [r3, #16]
 8000dac:	887b      	ldrh	r3, [r7, #2]
 8000dae:	4013      	ands	r3, r2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000db4:	2301      	movs	r3, #1
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e001      	b.n	8000dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	807b      	strh	r3, [r7, #2]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ddc:	787b      	ldrb	r3, [r7, #1]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000de2:	887a      	ldrh	r2, [r7, #2]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de8:	e002      	b.n	8000df0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e0e:	887a      	ldrh	r2, [r7, #2]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4013      	ands	r3, r2
 8000e14:	041a      	lsls	r2, r3, #16
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	43d9      	mvns	r1, r3
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	619a      	str	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e3c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e40:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	f001 b80a 	b.w	8001e6a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8161 	beq.w	800112e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e6c:	4bae      	ldr	r3, [pc, #696]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 030c 	and.w	r3, r3, #12
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d00c      	beq.n	8000e92 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e78:	4bab      	ldr	r3, [pc, #684]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 030c 	and.w	r3, r3, #12
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d157      	bne.n	8000f34 <HAL_RCC_OscConfig+0x104>
 8000e84:	4ba8      	ldr	r3, [pc, #672]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e90:	d150      	bne.n	8000f34 <HAL_RCC_OscConfig+0x104>
 8000e92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e96:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000e9e:	fa93 f3a3 	rbit	r3, r3
 8000ea2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ea6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eaa:	fab3 f383 	clz	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000eb2:	d802      	bhi.n	8000eba <HAL_RCC_OscConfig+0x8a>
 8000eb4:	4b9c      	ldr	r3, [pc, #624]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	e015      	b.n	8000ee6 <HAL_RCC_OscConfig+0xb6>
 8000eba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ebe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000ece:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ed2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000ed6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000eda:	fa93 f3a3 	rbit	r3, r3
 8000ede:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000ee2:	4b91      	ldr	r3, [pc, #580]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eea:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000eee:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000ef2:	fa92 f2a2 	rbit	r2, r2
 8000ef6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000efa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000efe:	fab2 f282 	clz	r2, r2
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	f042 0220 	orr.w	r2, r2, #32
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	f002 021f 	and.w	r2, r2, #31
 8000f0e:	2101      	movs	r1, #1
 8000f10:	fa01 f202 	lsl.w	r2, r1, r2
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8108 	beq.w	800112c <HAL_RCC_OscConfig+0x2fc>
 8000f1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f040 80ff 	bne.w	800112c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f000 bf9b 	b.w	8001e6a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f44:	d106      	bne.n	8000f54 <HAL_RCC_OscConfig+0x124>
 8000f46:	4b78      	ldr	r3, [pc, #480]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a77      	ldr	r2, [pc, #476]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e036      	b.n	8000fc2 <HAL_RCC_OscConfig+0x192>
 8000f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10c      	bne.n	8000f7e <HAL_RCC_OscConfig+0x14e>
 8000f64:	4b70      	ldr	r3, [pc, #448]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a6f      	ldr	r2, [pc, #444]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b6d      	ldr	r3, [pc, #436]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a6c      	ldr	r2, [pc, #432]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	e021      	b.n	8000fc2 <HAL_RCC_OscConfig+0x192>
 8000f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f82:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f8e:	d10c      	bne.n	8000faa <HAL_RCC_OscConfig+0x17a>
 8000f90:	4b65      	ldr	r3, [pc, #404]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a64      	ldr	r2, [pc, #400]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000f96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b62      	ldr	r3, [pc, #392]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a61      	ldr	r2, [pc, #388]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e00b      	b.n	8000fc2 <HAL_RCC_OscConfig+0x192>
 8000faa:	4b5f      	ldr	r3, [pc, #380]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a5e      	ldr	r2, [pc, #376]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b5c      	ldr	r3, [pc, #368]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a5b      	ldr	r2, [pc, #364]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8000fbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fc0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fc6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d054      	beq.n	800107c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fc43 	bl	800085c <HAL_GetTick>
 8000fd6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	e00a      	b.n	8000ff2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fdc:	f7ff fc3e 	bl	800085c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b64      	cmp	r3, #100	@ 0x64
 8000fea:	d902      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	f000 bf3c 	b.w	8001e6a <HAL_RCC_OscConfig+0x103a>
 8000ff2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ff6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffa:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001006:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	fab3 f383 	clz	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b3f      	cmp	r3, #63	@ 0x3f
 8001012:	d802      	bhi.n	800101a <HAL_RCC_OscConfig+0x1ea>
 8001014:	4b44      	ldr	r3, [pc, #272]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	e015      	b.n	8001046 <HAL_RCC_OscConfig+0x216>
 800101a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800101e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001022:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001026:	fa93 f3a3 	rbit	r3, r3
 800102a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800102e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001032:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001036:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001042:	4b39      	ldr	r3, [pc, #228]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800104a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800104e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001052:	fa92 f2a2 	rbit	r2, r2
 8001056:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800105a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800105e:	fab2 f282 	clz	r2, r2
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	f042 0220 	orr.w	r2, r2, #32
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	f002 021f 	and.w	r2, r2, #31
 800106e:	2101      	movs	r1, #1
 8001070:	fa01 f202 	lsl.w	r2, r1, r2
 8001074:	4013      	ands	r3, r2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0b0      	beq.n	8000fdc <HAL_RCC_OscConfig+0x1ac>
 800107a:	e058      	b.n	800112e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fbee 	bl	800085c <HAL_GetTick>
 8001080:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001084:	e00a      	b.n	800109c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001086:	f7ff fbe9 	bl	800085c <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	@ 0x64
 8001094:	d902      	bls.n	800109c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	f000 bee7 	b.w	8001e6a <HAL_RCC_OscConfig+0x103a>
 800109c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010a0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80010a8:	fa93 f3a3 	rbit	r3, r3
 80010ac:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80010b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b4:	fab3 f383 	clz	r3, r3
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80010bc:	d802      	bhi.n	80010c4 <HAL_RCC_OscConfig+0x294>
 80010be:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	e015      	b.n	80010f0 <HAL_RCC_OscConfig+0x2c0>
 80010c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010c8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80010d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010dc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80010e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80010e4:	fa93 f3a3 	rbit	r3, r3
 80010e8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80010ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <HAL_RCC_OscConfig+0x2f8>)
 80010ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010f4:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80010f8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80010fc:	fa92 f2a2 	rbit	r2, r2
 8001100:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001104:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001108:	fab2 f282 	clz	r2, r2
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	f042 0220 	orr.w	r2, r2, #32
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	f002 021f 	and.w	r2, r2, #31
 8001118:	2101      	movs	r1, #1
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	4013      	ands	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1b0      	bne.n	8001086 <HAL_RCC_OscConfig+0x256>
 8001124:	e003      	b.n	800112e <HAL_RCC_OscConfig+0x2fe>
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800112e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001132:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 816d 	beq.w	800141e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001144:	4bcd      	ldr	r3, [pc, #820]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00c      	beq.n	800116a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001150:	4bca      	ldr	r3, [pc, #808]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	2b08      	cmp	r3, #8
 800115a:	d16e      	bne.n	800123a <HAL_RCC_OscConfig+0x40a>
 800115c:	4bc7      	ldr	r3, [pc, #796]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001164:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001168:	d167      	bne.n	800123a <HAL_RCC_OscConfig+0x40a>
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800117c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001180:	fab3 f383 	clz	r3, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b3f      	cmp	r3, #63	@ 0x3f
 8001188:	d802      	bhi.n	8001190 <HAL_RCC_OscConfig+0x360>
 800118a:	4bbc      	ldr	r3, [pc, #752]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	e013      	b.n	80011b8 <HAL_RCC_OscConfig+0x388>
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80011a8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80011ac:	fa93 f3a3 	rbit	r3, r3
 80011b0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80011b4:	4bb1      	ldr	r3, [pc, #708]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	2202      	movs	r2, #2
 80011ba:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80011be:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80011c2:	fa92 f2a2 	rbit	r2, r2
 80011c6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80011ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80011ce:	fab2 f282 	clz	r2, r2
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	f042 0220 	orr.w	r2, r2, #32
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	f002 021f 	and.w	r2, r2, #31
 80011de:	2101      	movs	r1, #1
 80011e0:	fa01 f202 	lsl.w	r2, r1, r2
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00a      	beq.n	8001200 <HAL_RCC_OscConfig+0x3d0>
 80011ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d002      	beq.n	8001200 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	f000 be35 	b.w	8001e6a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001200:	4b9e      	ldr	r3, [pc, #632]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800120c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	21f8      	movs	r1, #248	@ 0xf8
 8001216:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800121e:	fa91 f1a1 	rbit	r1, r1
 8001222:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001226:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800122a:	fab1 f181 	clz	r1, r1
 800122e:	b2c9      	uxtb	r1, r1
 8001230:	408b      	lsls	r3, r1
 8001232:	4992      	ldr	r1, [pc, #584]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 8001234:	4313      	orrs	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001238:	e0f1      	b.n	800141e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800123a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800123e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 8083 	beq.w	8001352 <HAL_RCC_OscConfig+0x522>
 800124c:	2301      	movs	r3, #1
 800124e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001252:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800125e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001262:	fab3 f383 	clz	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800126c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	461a      	mov	r2, r3
 8001274:	2301      	movs	r3, #1
 8001276:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff faf0 	bl	800085c <HAL_GetTick>
 800127c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	e00a      	b.n	8001298 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001282:	f7ff faeb 	bl	800085c <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d902      	bls.n	8001298 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	f000 bde9 	b.w	8001e6a <HAL_RCC_OscConfig+0x103a>
 8001298:	2302      	movs	r3, #2
 800129a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80012aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ae:	fab3 f383 	clz	r3, r3
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80012b6:	d802      	bhi.n	80012be <HAL_RCC_OscConfig+0x48e>
 80012b8:	4b70      	ldr	r3, [pc, #448]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	e013      	b.n	80012e6 <HAL_RCC_OscConfig+0x4b6>
 80012be:	2302      	movs	r3, #2
 80012c0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80012d0:	2302      	movs	r3, #2
 80012d2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80012d6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80012da:	fa93 f3a3 	rbit	r3, r3
 80012de:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80012e2:	4b66      	ldr	r3, [pc, #408]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 80012e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e6:	2202      	movs	r2, #2
 80012e8:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80012ec:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80012f0:	fa92 f2a2 	rbit	r2, r2
 80012f4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80012f8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80012fc:	fab2 f282 	clz	r2, r2
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	f042 0220 	orr.w	r2, r2, #32
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	f002 021f 	and.w	r2, r2, #31
 800130c:	2101      	movs	r1, #1
 800130e:	fa01 f202 	lsl.w	r2, r1, r2
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0b4      	beq.n	8001282 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001318:	4b58      	ldr	r3, [pc, #352]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001324:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	21f8      	movs	r1, #248	@ 0xf8
 800132e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001336:	fa91 f1a1 	rbit	r1, r1
 800133a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800133e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001342:	fab1 f181 	clz	r1, r1
 8001346:	b2c9      	uxtb	r1, r1
 8001348:	408b      	lsls	r3, r1
 800134a:	494c      	ldr	r1, [pc, #304]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
 8001350:	e065      	b.n	800141e <HAL_RCC_OscConfig+0x5ee>
 8001352:	2301      	movs	r3, #1
 8001354:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001358:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001364:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001368:	fab3 f383 	clz	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001372:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	461a      	mov	r2, r3
 800137a:	2300      	movs	r3, #0
 800137c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fa6d 	bl	800085c <HAL_GetTick>
 8001382:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001386:	e00a      	b.n	800139e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff fa68 	bl	800085c <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d902      	bls.n	800139e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	f000 bd66 	b.w	8001e6a <HAL_RCC_OscConfig+0x103a>
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80013b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b4:	fab3 f383 	clz	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80013bc:	d802      	bhi.n	80013c4 <HAL_RCC_OscConfig+0x594>
 80013be:	4b2f      	ldr	r3, [pc, #188]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	e013      	b.n	80013ec <HAL_RCC_OscConfig+0x5bc>
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013ce:	fa93 f3a3 	rbit	r3, r3
 80013d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80013dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80013e8:	4b24      	ldr	r3, [pc, #144]	@ (800147c <HAL_RCC_OscConfig+0x64c>)
 80013ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ec:	2202      	movs	r2, #2
 80013ee:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80013f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80013f6:	fa92 f2a2 	rbit	r2, r2
 80013fa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80013fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001402:	fab2 f282 	clz	r2, r2
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f042 0220 	orr.w	r2, r2, #32
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	f002 021f 	and.w	r2, r2, #31
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1b4      	bne.n	8001388 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001422:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8119 	beq.w	8001666 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001438:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 8082 	beq.w	800154a <HAL_RCC_OscConfig+0x71a>
 8001446:	2301      	movs	r3, #1
 8001448:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001458:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	461a      	mov	r2, r3
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_RCC_OscConfig+0x650>)
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	461a      	mov	r2, r3
 800146c:	2301      	movs	r3, #1
 800146e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff f9f4 	bl	800085c <HAL_GetTick>
 8001474:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001478:	e00f      	b.n	800149a <HAL_RCC_OscConfig+0x66a>
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff f9ea 	bl	800085c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d902      	bls.n	800149a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	f000 bce8 	b.w	8001e6a <HAL_RCC_OscConfig+0x103a>
 800149a:	2302      	movs	r3, #2
 800149c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80014a4:	fa93 f2a3 	rbit	r2, r3
 80014a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014ba:	2202      	movs	r2, #2
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	fa93 f2a3 	rbit	r2, r3
 80014cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014de:	2202      	movs	r2, #2
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	fa93 f2a3 	rbit	r2, r3
 80014f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	4bb0      	ldr	r3, [pc, #704]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 80014fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001502:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001506:	2102      	movs	r1, #2
 8001508:	6019      	str	r1, [r3, #0]
 800150a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800150e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fa93 f1a3 	rbit	r1, r3
 8001518:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800151c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001520:	6019      	str	r1, [r3, #0]
  return result;
 8001522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001526:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001536:	b2db      	uxtb	r3, r3
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	2101      	movs	r1, #1
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d09d      	beq.n	8001484 <HAL_RCC_OscConfig+0x654>
 8001548:	e08d      	b.n	8001666 <HAL_RCC_OscConfig+0x836>
 800154a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800154e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001568:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800156c:	601a      	str	r2, [r3, #0]
  return result;
 800156e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001572:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001576:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	4b8f      	ldr	r3, [pc, #572]	@ (80017c0 <HAL_RCC_OscConfig+0x990>)
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	461a      	mov	r2, r3
 8001588:	2300      	movs	r3, #0
 800158a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff f966 	bl	800085c <HAL_GetTick>
 8001590:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff f961 	bl	800085c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d902      	bls.n	80015ac <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	f000 bc5f 	b.w	8001e6a <HAL_RCC_OscConfig+0x103a>
 80015ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80015b4:	2202      	movs	r2, #2
 80015b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	fa93 f2a3 	rbit	r2, r3
 80015c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015d8:	2202      	movs	r2, #2
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	fa93 f2a3 	rbit	r2, r3
 80015ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015fc:	2202      	movs	r2, #2
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001604:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	fa93 f2a3 	rbit	r2, r3
 800160e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001612:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001616:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	4b68      	ldr	r3, [pc, #416]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 800161a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800161c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001620:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001624:	2102      	movs	r1, #2
 8001626:	6019      	str	r1, [r3, #0]
 8001628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800162c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	fa93 f1a3 	rbit	r1, r3
 8001636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800163a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800163e:	6019      	str	r1, [r3, #0]
  return result;
 8001640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001644:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f003 031f 	and.w	r3, r3, #31
 800165a:	2101      	movs	r1, #1
 800165c:	fa01 f303 	lsl.w	r3, r1, r3
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d197      	bne.n	8001596 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 819c 	beq.w	80019b4 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001682:	4b4e      	ldr	r3, [pc, #312]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d116      	bne.n	80016bc <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b4b      	ldr	r3, [pc, #300]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a4a      	ldr	r2, [pc, #296]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001698:	61d3      	str	r3, [r2, #28]
 800169a:	4b48      	ldr	r3, [pc, #288]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80016a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016b4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	4b41      	ldr	r3, [pc, #260]	@ (80017c4 <HAL_RCC_OscConfig+0x994>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d11a      	bne.n	80016fe <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c8:	4b3e      	ldr	r3, [pc, #248]	@ (80017c4 <HAL_RCC_OscConfig+0x994>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a3d      	ldr	r2, [pc, #244]	@ (80017c4 <HAL_RCC_OscConfig+0x994>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d4:	f7ff f8c2 	bl	800085c <HAL_GetTick>
 80016d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	e009      	b.n	80016f2 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff f8bd 	bl	800085c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	@ 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e3bb      	b.n	8001e6a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b34      	ldr	r3, [pc, #208]	@ (80017c4 <HAL_RCC_OscConfig+0x994>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0ef      	beq.n	80016de <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001702:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d106      	bne.n	800171c <HAL_RCC_OscConfig+0x8ec>
 800170e:	4b2b      	ldr	r3, [pc, #172]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a2a      	ldr	r2, [pc, #168]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6213      	str	r3, [r2, #32]
 800171a:	e035      	b.n	8001788 <HAL_RCC_OscConfig+0x958>
 800171c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001720:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10c      	bne.n	8001746 <HAL_RCC_OscConfig+0x916>
 800172c:	4b23      	ldr	r3, [pc, #140]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a22      	ldr	r2, [pc, #136]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	4b20      	ldr	r3, [pc, #128]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a1f      	ldr	r2, [pc, #124]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 800173e:	f023 0304 	bic.w	r3, r3, #4
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	e020      	b.n	8001788 <HAL_RCC_OscConfig+0x958>
 8001746:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800174a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x940>
 8001756:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a18      	ldr	r2, [pc, #96]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6213      	str	r3, [r2, #32]
 8001762:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a15      	ldr	r2, [pc, #84]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6213      	str	r3, [r2, #32]
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0x958>
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a11      	ldr	r2, [pc, #68]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <HAL_RCC_OscConfig+0x98c>)
 8001782:	f023 0304 	bic.w	r3, r3, #4
 8001786:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001788:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800178c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8085 	beq.w	80018a4 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7ff f85f 	bl	800085c <HAL_GetTick>
 800179e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	e011      	b.n	80017c8 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff f85a 	bl	800085c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d907      	bls.n	80017c8 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e356      	b.n	8001e6a <HAL_RCC_OscConfig+0x103a>
 80017bc:	40021000 	.word	0x40021000
 80017c0:	10908120 	.word	0x10908120
 80017c4:	40007000 	.word	0x40007000
 80017c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017cc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017d0:	2202      	movs	r2, #2
 80017d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017f4:	2202      	movs	r2, #2
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800180a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800180e:	601a      	str	r2, [r3, #0]
  return result;
 8001810:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001814:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001818:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <HAL_RCC_OscConfig+0xa00>
 800182a:	4b98      	ldr	r3, [pc, #608]	@ (8001a8c <HAL_RCC_OscConfig+0xc5c>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	e013      	b.n	8001858 <HAL_RCC_OscConfig+0xa28>
 8001830:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001834:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001838:	2202      	movs	r2, #2
 800183a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001840:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	fa93 f2a3 	rbit	r2, r3
 800184a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	4b8d      	ldr	r3, [pc, #564]	@ (8001a8c <HAL_RCC_OscConfig+0xc5c>)
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800185c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001860:	2102      	movs	r1, #2
 8001862:	6011      	str	r1, [r2, #0]
 8001864:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001868:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	fa92 f1a2 	rbit	r1, r2
 8001872:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001876:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800187a:	6011      	str	r1, [r2, #0]
  return result;
 800187c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001880:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	fab2 f282 	clz	r2, r2
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	f002 021f 	and.w	r2, r2, #31
 8001896:	2101      	movs	r1, #1
 8001898:	fa01 f202 	lsl.w	r2, r1, r2
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d080      	beq.n	80017a4 <HAL_RCC_OscConfig+0x974>
 80018a2:	e07d      	b.n	80019a0 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a4:	f7fe ffda 	bl	800085c <HAL_GetTick>
 80018a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7fe ffd5 	bl	800085c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e2d1      	b.n	8001e6a <HAL_RCC_OscConfig+0x103a>
 80018c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ca:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018ce:	2202      	movs	r2, #2
 80018d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	fa93 f2a3 	rbit	r2, r3
 80018e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ee:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018f2:	2202      	movs	r2, #2
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018fa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fa93 f2a3 	rbit	r2, r3
 8001904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001908:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800190c:	601a      	str	r2, [r3, #0]
  return result;
 800190e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001912:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001916:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <HAL_RCC_OscConfig+0xafe>
 8001928:	4b58      	ldr	r3, [pc, #352]	@ (8001a8c <HAL_RCC_OscConfig+0xc5c>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	e013      	b.n	8001956 <HAL_RCC_OscConfig+0xb26>
 800192e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001932:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001936:	2202      	movs	r2, #2
 8001938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800193e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	4b4e      	ldr	r3, [pc, #312]	@ (8001a8c <HAL_RCC_OscConfig+0xc5c>)
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001956:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800195a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800195e:	2102      	movs	r1, #2
 8001960:	6011      	str	r1, [r2, #0]
 8001962:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001966:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	fa92 f1a2 	rbit	r1, r2
 8001970:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001974:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001978:	6011      	str	r1, [r2, #0]
  return result;
 800197a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800197e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	fab2 f282 	clz	r2, r2
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	f002 021f 	and.w	r2, r2, #31
 8001994:	2101      	movs	r1, #1
 8001996:	fa01 f202 	lsl.w	r2, r1, r2
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d186      	bne.n	80018ae <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019a0:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a8:	4b38      	ldr	r3, [pc, #224]	@ (8001a8c <HAL_RCC_OscConfig+0xc5c>)
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	4a37      	ldr	r2, [pc, #220]	@ (8001a8c <HAL_RCC_OscConfig+0xc5c>)
 80019ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8251 	beq.w	8001e68 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c6:	4b31      	ldr	r3, [pc, #196]	@ (8001a8c <HAL_RCC_OscConfig+0xc5c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	f000 820f 	beq.w	8001df2 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	f040 8165 	bne.w	8001cb0 <HAL_RCC_OscConfig+0xe80>
 80019e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ea:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fa93 f2a3 	rbit	r2, r3
 8001a02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a06:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a0a:	601a      	str	r2, [r3, #0]
  return result;
 8001a0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a10:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	461a      	mov	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7fe ff16 	bl	800085c <HAL_GetTick>
 8001a30:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a34:	e009      	b.n	8001a4a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a36:	f7fe ff11 	bl	800085c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e20f      	b.n	8001e6a <HAL_RCC_OscConfig+0x103a>
 8001a4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a5c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a6e:	601a      	str	r2, [r3, #0]
  return result;
 8001a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a74:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a82:	d805      	bhi.n	8001a90 <HAL_RCC_OscConfig+0xc60>
 8001a84:	4b01      	ldr	r3, [pc, #4]	@ (8001a8c <HAL_RCC_OscConfig+0xc5c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	e02a      	b.n	8001ae0 <HAL_RCC_OscConfig+0xcb0>
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a94:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fa93 f2a3 	rbit	r2, r3
 8001aac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aba:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001abe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	4bca      	ldr	r3, [pc, #808]	@ (8001e08 <HAL_RCC_OscConfig+0xfd8>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ae4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001ae8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001aec:	6011      	str	r1, [r2, #0]
 8001aee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001af2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	fa92 f1a2 	rbit	r1, r2
 8001afc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b00:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001b04:	6011      	str	r1, [r2, #0]
  return result;
 8001b06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b0a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	fab2 f282 	clz	r2, r2
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	f042 0220 	orr.w	r2, r2, #32
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	f002 021f 	and.w	r2, r2, #31
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d184      	bne.n	8001a36 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b2c:	4bb6      	ldr	r3, [pc, #728]	@ (8001e08 <HAL_RCC_OscConfig+0xfd8>)
 8001b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b30:	f023 020f 	bic.w	r2, r3, #15
 8001b34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b40:	49b1      	ldr	r1, [pc, #708]	@ (8001e08 <HAL_RCC_OscConfig+0xfd8>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001b46:	4bb0      	ldr	r3, [pc, #704]	@ (8001e08 <HAL_RCC_OscConfig+0xfd8>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001b4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6a19      	ldr	r1, [r3, #32]
 8001b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	430b      	orrs	r3, r1
 8001b68:	49a7      	ldr	r1, [pc, #668]	@ (8001e08 <HAL_RCC_OscConfig+0xfd8>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
 8001b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b72:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b76:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b80:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	fa93 f2a3 	rbit	r2, r3
 8001b8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b92:	601a      	str	r2, [r3, #0]
  return result;
 8001b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b98:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b9c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ba8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7fe fe52 	bl	800085c <HAL_GetTick>
 8001bb8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bbc:	e009      	b.n	8001bd2 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7fe fe4d 	bl	800085c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e14b      	b.n	8001e6a <HAL_RCC_OscConfig+0x103a>
 8001bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001bda:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	fa93 f2a3 	rbit	r2, r3
 8001bee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bf6:	601a      	str	r2, [r3, #0]
  return result;
 8001bf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bfc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c0a:	d802      	bhi.n	8001c12 <HAL_RCC_OscConfig+0xde2>
 8001c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e08 <HAL_RCC_OscConfig+0xfd8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	e027      	b.n	8001c62 <HAL_RCC_OscConfig+0xe32>
 8001c12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c24:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c32:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001c40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fa93 f2a3 	rbit	r2, r3
 8001c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c58:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001e08 <HAL_RCC_OscConfig+0xfd8>)
 8001c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c66:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c6a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c6e:	6011      	str	r1, [r2, #0]
 8001c70:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c74:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	fa92 f1a2 	rbit	r1, r2
 8001c7e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c82:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001c86:	6011      	str	r1, [r2, #0]
  return result;
 8001c88:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c8c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	fab2 f282 	clz	r2, r2
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f042 0220 	orr.w	r2, r2, #32
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	f002 021f 	and.w	r2, r2, #31
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d087      	beq.n	8001bbe <HAL_RCC_OscConfig+0xd8e>
 8001cae:	e0db      	b.n	8001e68 <HAL_RCC_OscConfig+0x1038>
 8001cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001cb8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fa93 f2a3 	rbit	r2, r3
 8001ccc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001cd4:	601a      	str	r2, [r3, #0]
  return result;
 8001cd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cda:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001cde:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce0:	fab3 f383 	clz	r3, r3
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7fe fdb1 	bl	800085c <HAL_GetTick>
 8001cfa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	e009      	b.n	8001d14 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d00:	f7fe fdac 	bl	800085c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e0aa      	b.n	8001e6a <HAL_RCC_OscConfig+0x103a>
 8001d14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d18:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d26:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	fa93 f2a3 	rbit	r2, r3
 8001d30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d34:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d38:	601a      	str	r2, [r3, #0]
  return result;
 8001d3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d3e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d4c:	d802      	bhi.n	8001d54 <HAL_RCC_OscConfig+0xf24>
 8001d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e08 <HAL_RCC_OscConfig+0xfd8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	e027      	b.n	8001da4 <HAL_RCC_OscConfig+0xf74>
 8001d54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d58:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d66:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	fa93 f2a3 	rbit	r2, r3
 8001d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d74:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d7e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d8c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_RCC_OscConfig+0xfd8>)
 8001da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001da8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001dac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001db0:	6011      	str	r1, [r2, #0]
 8001db2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001db6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	fa92 f1a2 	rbit	r1, r2
 8001dc0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dc4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001dc8:	6011      	str	r1, [r2, #0]
  return result;
 8001dca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dce:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	fab2 f282 	clz	r2, r2
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f042 0220 	orr.w	r2, r2, #32
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f002 021f 	and.w	r2, r2, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d187      	bne.n	8001d00 <HAL_RCC_OscConfig+0xed0>
 8001df0:	e03a      	b.n	8001e68 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d104      	bne.n	8001e0c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e031      	b.n	8001e6a <HAL_RCC_OscConfig+0x103a>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e0c:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <HAL_RCC_OscConfig+0x1044>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e14:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <HAL_RCC_OscConfig+0x1044>)
 8001e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e18:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001e20:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d117      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001e38:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d10b      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e50:	f003 020f 	and.w	r2, r3, #15
 8001e54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d001      	beq.n	8001e68 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000

08001e78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b09e      	sub	sp, #120	@ 0x78
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e154      	b.n	800213a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e90:	4b89      	ldr	r3, [pc, #548]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d910      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b86      	ldr	r3, [pc, #536]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 0207 	bic.w	r2, r3, #7
 8001ea6:	4984      	ldr	r1, [pc, #528]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b82      	ldr	r3, [pc, #520]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e13c      	b.n	800213a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ecc:	4b7b      	ldr	r3, [pc, #492]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4978      	ldr	r1, [pc, #480]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 80cd 	beq.w	8002086 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d137      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xec>
 8001ef4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ef8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001f02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f04:	fab3 f383 	clz	r3, r3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f0c:	d802      	bhi.n	8001f14 <HAL_RCC_ClockConfig+0x9c>
 8001f0e:	4b6b      	ldr	r3, [pc, #428]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	e00f      	b.n	8001f34 <HAL_RCC_ClockConfig+0xbc>
 8001f14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f26:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f30:	4b62      	ldr	r3, [pc, #392]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f3c:	fa92 f2a2 	rbit	r2, r2
 8001f40:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001f42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001f44:	fab2 f282 	clz	r2, r2
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	f042 0220 	orr.w	r2, r2, #32
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	f002 021f 	and.w	r2, r2, #31
 8001f54:	2101      	movs	r1, #1
 8001f56:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d171      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0ea      	b.n	800213a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d137      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x164>
 8001f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f70:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f74:	fa93 f3a3 	rbit	r3, r3
 8001f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f84:	d802      	bhi.n	8001f8c <HAL_RCC_ClockConfig+0x114>
 8001f86:	4b4d      	ldr	r3, [pc, #308]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	e00f      	b.n	8001fac <HAL_RCC_ClockConfig+0x134>
 8001f8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fa8:	4b44      	ldr	r3, [pc, #272]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fb0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001fb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001fb4:	fa92 f2a2 	rbit	r2, r2
 8001fb8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001fba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001fbc:	fab2 f282 	clz	r2, r2
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	f042 0220 	orr.w	r2, r2, #32
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	f002 021f 	and.w	r2, r2, #31
 8001fcc:	2101      	movs	r1, #1
 8001fce:	fa01 f202 	lsl.w	r2, r1, r2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d135      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0ae      	b.n	800213a <HAL_RCC_ClockConfig+0x2c2>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ff2:	d802      	bhi.n	8001ffa <HAL_RCC_ClockConfig+0x182>
 8001ff4:	4b31      	ldr	r3, [pc, #196]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	e00d      	b.n	8002016 <HAL_RCC_ClockConfig+0x19e>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
 8002006:	2302      	movs	r3, #2
 8002008:	623b      	str	r3, [r7, #32]
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	4b2a      	ldr	r3, [pc, #168]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	2202      	movs	r2, #2
 8002018:	61ba      	str	r2, [r7, #24]
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	fa92 f2a2 	rbit	r2, r2
 8002020:	617a      	str	r2, [r7, #20]
  return result;
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	fab2 f282 	clz	r2, r2
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	f042 0220 	orr.w	r2, r2, #32
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f002 021f 	and.w	r2, r2, #31
 8002034:	2101      	movs	r1, #1
 8002036:	fa01 f202 	lsl.w	r2, r1, r2
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e07a      	b.n	800213a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002044:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 0203 	bic.w	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	491a      	ldr	r1, [pc, #104]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002056:	f7fe fc01 	bl	800085c <HAL_GetTick>
 800205a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205c:	e00a      	b.n	8002074 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205e:	f7fe fbfd 	bl	800085c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e062      	b.n	800213a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <HAL_RCC_ClockConfig+0x244>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 020c 	and.w	r2, r3, #12
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	429a      	cmp	r2, r3
 8002084:	d1eb      	bne.n	800205e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002086:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d215      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002094:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f023 0207 	bic.w	r2, r3, #7
 800209c:	4906      	ldr	r1, [pc, #24]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a4:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <HAL_RCC_ClockConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d006      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e041      	b.n	800213a <HAL_RCC_ClockConfig+0x2c2>
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002144 <HAL_RCC_ClockConfig+0x2cc>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	491a      	ldr	r1, [pc, #104]	@ (8002144 <HAL_RCC_ClockConfig+0x2cc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ea:	4b16      	ldr	r3, [pc, #88]	@ (8002144 <HAL_RCC_ClockConfig+0x2cc>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4912      	ldr	r1, [pc, #72]	@ (8002144 <HAL_RCC_ClockConfig+0x2cc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020fe:	f000 f829 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002102:	4601      	mov	r1, r0
 8002104:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <HAL_RCC_ClockConfig+0x2cc>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800210c:	22f0      	movs	r2, #240	@ 0xf0
 800210e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	fa92 f2a2 	rbit	r2, r2
 8002116:	60fa      	str	r2, [r7, #12]
  return result;
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	fab2 f282 	clz	r2, r2
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	40d3      	lsrs	r3, r2
 8002122:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <HAL_RCC_ClockConfig+0x2d0>)
 8002124:	5cd3      	ldrb	r3, [r2, r3]
 8002126:	fa21 f303 	lsr.w	r3, r1, r3
 800212a:	4a08      	ldr	r2, [pc, #32]	@ (800214c <HAL_RCC_ClockConfig+0x2d4>)
 800212c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800212e:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_RCC_ClockConfig+0x2d8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fb4e 	bl	80007d4 <HAL_InitTick>
  
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3778      	adds	r7, #120	@ 0x78
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	08003aac 	.word	0x08003aac
 800214c:	20000000 	.word	0x20000000
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800216e:	4b1f      	ldr	r3, [pc, #124]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b04      	cmp	r3, #4
 800217c:	d002      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x30>
 800217e:	2b08      	cmp	r3, #8
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x36>
 8002182:	e029      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002184:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002186:	613b      	str	r3, [r7, #16]
      break;
 8002188:	e029      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	4a18      	ldr	r2, [pc, #96]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	4a15      	ldr	r2, [pc, #84]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021b0:	4a0f      	ldr	r2, [pc, #60]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	e007      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021c2:	4a0b      	ldr	r2, [pc, #44]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	613b      	str	r3, [r7, #16]
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021da:	613b      	str	r3, [r7, #16]
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	693b      	ldr	r3, [r7, #16]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	08003ac4 	.word	0x08003ac4
 80021f8:	08003ad4 	.word	0x08003ad4

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800221a:	f7ff ffef 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221e:	4601      	mov	r1, r0
 8002220:	4b0b      	ldr	r3, [pc, #44]	@ (8002250 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002228:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800222c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	fa92 f2a2 	rbit	r2, r2
 8002234:	603a      	str	r2, [r7, #0]
  return result;
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	fab2 f282 	clz	r2, r2
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	40d3      	lsrs	r3, r2
 8002240:	4a04      	ldr	r2, [pc, #16]	@ (8002254 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	08003abc 	.word	0x08003abc

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800225e:	f7ff ffcd 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002262:	4601      	mov	r1, r0
 8002264:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800226c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002270:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	603a      	str	r2, [r7, #0]
  return result;
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	fab2 f282 	clz	r2, r2
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	40d3      	lsrs	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	08003abc 	.word	0x08003abc

0800229c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b092      	sub	sp, #72	@ 0x48
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80d2 	beq.w	8002464 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c0:	4b4d      	ldr	r3, [pc, #308]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10e      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b4a      	ldr	r3, [pc, #296]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4a49      	ldr	r2, [pc, #292]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	61d3      	str	r3, [r2, #28]
 80022d8:	4b47      	ldr	r3, [pc, #284]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b44      	ldr	r3, [pc, #272]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b41      	ldr	r3, [pc, #260]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a40      	ldr	r2, [pc, #256]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002300:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7fe faab 	bl	800085c <HAL_GetTick>
 8002306:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe faa7 	bl	800085c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b64      	cmp	r3, #100	@ 0x64
 8002316:	d901      	bls.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e1d4      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002328:	4b33      	ldr	r3, [pc, #204]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002330:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8082 	beq.w	800243e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002342:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002344:	429a      	cmp	r2, r3
 8002346:	d07a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002348:	4b2b      	ldr	r3, [pc, #172]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002352:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002356:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4b25      	ldr	r3, [pc, #148]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	461a      	mov	r2, r3
 8002372:	2301      	movs	r3, #1
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800237a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	4b1c      	ldr	r3, [pc, #112]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	461a      	mov	r2, r3
 8002396:	2300      	movs	r3, #0
 8002398:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800239a:	4a17      	ldr	r2, [pc, #92]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800239c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800239e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d049      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fa57 	bl	800085c <HAL_GetTick>
 80023ae:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fa53 	bl	800085c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e17e      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80023c8:	2302      	movs	r3, #2
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d4:	2302      	movs	r3, #2
 80023d6:	623b      	str	r3, [r7, #32]
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	61fb      	str	r3, [r7, #28]
  return result;
 80023e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d108      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80023f2:	4b01      	ldr	r3, [pc, #4]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	e00d      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40007000 	.word	0x40007000
 8002400:	10908100 	.word	0x10908100
 8002404:	2302      	movs	r3, #2
 8002406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	4b9a      	ldr	r3, [pc, #616]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	2202      	movs	r2, #2
 8002416:	613a      	str	r2, [r7, #16]
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	fa92 f2a2 	rbit	r2, r2
 800241e:	60fa      	str	r2, [r7, #12]
  return result;
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	fab2 f282 	clz	r2, r2
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	f002 021f 	and.w	r2, r2, #31
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f202 	lsl.w	r2, r1, r2
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0b9      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800243e:	4b8f      	ldr	r3, [pc, #572]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	498c      	ldr	r1, [pc, #560]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002450:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002454:	2b01      	cmp	r3, #1
 8002456:	d105      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002458:	4b88      	ldr	r3, [pc, #544]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	4a87      	ldr	r2, [pc, #540]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002462:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002470:	4b82      	ldr	r3, [pc, #520]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	f023 0203 	bic.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	497f      	ldr	r1, [pc, #508]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247e:	4313      	orrs	r3, r2
 8002480:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800248e:	4b7b      	ldr	r3, [pc, #492]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4978      	ldr	r1, [pc, #480]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249c:	4313      	orrs	r3, r2
 800249e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024ac:	4b73      	ldr	r3, [pc, #460]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	4970      	ldr	r1, [pc, #448]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ca:	4b6c      	ldr	r3, [pc, #432]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f023 0210 	bic.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4969      	ldr	r1, [pc, #420]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024e8:	4b64      	ldr	r3, [pc, #400]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f4:	4961      	ldr	r1, [pc, #388]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002506:	4b5d      	ldr	r3, [pc, #372]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f023 0220 	bic.w	r2, r3, #32
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	495a      	ldr	r1, [pc, #360]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002514:	4313      	orrs	r3, r2
 8002516:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002524:	4b55      	ldr	r3, [pc, #340]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002528:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	4952      	ldr	r1, [pc, #328]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002532:	4313      	orrs	r3, r2
 8002534:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002542:	4b4e      	ldr	r3, [pc, #312]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	494b      	ldr	r1, [pc, #300]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002550:	4313      	orrs	r3, r2
 8002552:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002560:	4b46      	ldr	r3, [pc, #280]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002564:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4943      	ldr	r1, [pc, #268]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256e:	4313      	orrs	r3, r2
 8002570:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800257a:	2b00      	cmp	r3, #0
 800257c:	d008      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800257e:	4b3f      	ldr	r3, [pc, #252]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	493c      	ldr	r1, [pc, #240]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800259c:	4b37      	ldr	r3, [pc, #220]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a8:	4934      	ldr	r1, [pc, #208]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80025ba:	4b30      	ldr	r3, [pc, #192]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025be:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c6:	492d      	ldr	r1, [pc, #180]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025d8:	4b28      	ldr	r3, [pc, #160]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e4:	4925      	ldr	r1, [pc, #148]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80025f6:	4b21      	ldr	r3, [pc, #132]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002602:	491e      	ldr	r1, [pc, #120]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002614:	4b19      	ldr	r3, [pc, #100]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002620:	4916      	ldr	r1, [pc, #88]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002622:	4313      	orrs	r3, r2
 8002624:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002632:	4b12      	ldr	r3, [pc, #72]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800263e:	490f      	ldr	r1, [pc, #60]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002640:	4313      	orrs	r3, r2
 8002642:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002650:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002654:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265c:	4907      	ldr	r1, [pc, #28]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265e:	4313      	orrs	r3, r2
 8002660:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800266e:	4b03      	ldr	r3, [pc, #12]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	e002      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002682:	4913      	ldr	r1, [pc, #76]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002684:	4313      	orrs	r3, r2
 8002686:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002694:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a0:	490b      	ldr	r1, [pc, #44]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80026b2:	4b07      	ldr	r3, [pc, #28]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026be:	4904      	ldr	r1, [pc, #16]	@ (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3748      	adds	r7, #72	@ 0x48
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000

080026d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e040      	b.n	8002768 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7fd ff54 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2224      	movs	r2, #36	@ 0x24
 8002700:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fa86 	bl	8002c2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f8af 	bl	8002884 <UART_SetConfig>
 8002726:	4603      	mov	r3, r0
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e01b      	b.n	8002768 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800273e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800274e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fb05 	bl	8002d70 <UART_CheckIdleState>
 8002766:	4603      	mov	r3, r0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	@ 0x28
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002784:	2b20      	cmp	r3, #32
 8002786:	d177      	bne.n	8002878 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_UART_Transmit+0x24>
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e070      	b.n	800287a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2221      	movs	r2, #33	@ 0x21
 80027a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027a6:	f7fe f859 	bl	800085c <HAL_GetTick>
 80027aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	88fa      	ldrh	r2, [r7, #6]
 80027b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c4:	d108      	bne.n	80027d8 <HAL_UART_Transmit+0x68>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d104      	bne.n	80027d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	e003      	b.n	80027e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027e0:	e02f      	b.n	8002842 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2200      	movs	r2, #0
 80027ea:	2180      	movs	r1, #128	@ 0x80
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fb67 	bl	8002ec0 <UART_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e03b      	b.n	800287a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10b      	bne.n	8002820 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	881a      	ldrh	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002814:	b292      	uxth	r2, r2
 8002816:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	3302      	adds	r3, #2
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e007      	b.n	8002830 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	781a      	ldrb	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1c9      	bne.n	80027e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2200      	movs	r2, #0
 8002856:	2140      	movs	r1, #64	@ 0x40
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 fb31 	bl	8002ec0 <UART_WaitOnFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e005      	b.n	800287a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e000      	b.n	800287a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002878:	2302      	movs	r3, #2
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4b92      	ldr	r3, [pc, #584]	@ (8002af8 <UART_SetConfig+0x274>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	6979      	ldr	r1, [r7, #20]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a80      	ldr	r2, [pc, #512]	@ (8002afc <UART_SetConfig+0x278>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d120      	bne.n	8002942 <UART_SetConfig+0xbe>
 8002900:	4b7f      	ldr	r3, [pc, #508]	@ (8002b00 <UART_SetConfig+0x27c>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b03      	cmp	r3, #3
 800290a:	d817      	bhi.n	800293c <UART_SetConfig+0xb8>
 800290c:	a201      	add	r2, pc, #4	@ (adr r2, 8002914 <UART_SetConfig+0x90>)
 800290e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002912:	bf00      	nop
 8002914:	08002925 	.word	0x08002925
 8002918:	08002931 	.word	0x08002931
 800291c:	08002937 	.word	0x08002937
 8002920:	0800292b 	.word	0x0800292b
 8002924:	2301      	movs	r3, #1
 8002926:	77fb      	strb	r3, [r7, #31]
 8002928:	e0b5      	b.n	8002a96 <UART_SetConfig+0x212>
 800292a:	2302      	movs	r3, #2
 800292c:	77fb      	strb	r3, [r7, #31]
 800292e:	e0b2      	b.n	8002a96 <UART_SetConfig+0x212>
 8002930:	2304      	movs	r3, #4
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e0af      	b.n	8002a96 <UART_SetConfig+0x212>
 8002936:	2308      	movs	r3, #8
 8002938:	77fb      	strb	r3, [r7, #31]
 800293a:	e0ac      	b.n	8002a96 <UART_SetConfig+0x212>
 800293c:	2310      	movs	r3, #16
 800293e:	77fb      	strb	r3, [r7, #31]
 8002940:	e0a9      	b.n	8002a96 <UART_SetConfig+0x212>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a6f      	ldr	r2, [pc, #444]	@ (8002b04 <UART_SetConfig+0x280>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d124      	bne.n	8002996 <UART_SetConfig+0x112>
 800294c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b00 <UART_SetConfig+0x27c>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002950:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002954:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002958:	d011      	beq.n	800297e <UART_SetConfig+0xfa>
 800295a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800295e:	d817      	bhi.n	8002990 <UART_SetConfig+0x10c>
 8002960:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002964:	d011      	beq.n	800298a <UART_SetConfig+0x106>
 8002966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800296a:	d811      	bhi.n	8002990 <UART_SetConfig+0x10c>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <UART_SetConfig+0xf4>
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002974:	d006      	beq.n	8002984 <UART_SetConfig+0x100>
 8002976:	e00b      	b.n	8002990 <UART_SetConfig+0x10c>
 8002978:	2300      	movs	r3, #0
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e08b      	b.n	8002a96 <UART_SetConfig+0x212>
 800297e:	2302      	movs	r3, #2
 8002980:	77fb      	strb	r3, [r7, #31]
 8002982:	e088      	b.n	8002a96 <UART_SetConfig+0x212>
 8002984:	2304      	movs	r3, #4
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	e085      	b.n	8002a96 <UART_SetConfig+0x212>
 800298a:	2308      	movs	r3, #8
 800298c:	77fb      	strb	r3, [r7, #31]
 800298e:	e082      	b.n	8002a96 <UART_SetConfig+0x212>
 8002990:	2310      	movs	r3, #16
 8002992:	77fb      	strb	r3, [r7, #31]
 8002994:	e07f      	b.n	8002a96 <UART_SetConfig+0x212>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a5b      	ldr	r2, [pc, #364]	@ (8002b08 <UART_SetConfig+0x284>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d124      	bne.n	80029ea <UART_SetConfig+0x166>
 80029a0:	4b57      	ldr	r3, [pc, #348]	@ (8002b00 <UART_SetConfig+0x27c>)
 80029a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80029a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80029ac:	d011      	beq.n	80029d2 <UART_SetConfig+0x14e>
 80029ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80029b2:	d817      	bhi.n	80029e4 <UART_SetConfig+0x160>
 80029b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029b8:	d011      	beq.n	80029de <UART_SetConfig+0x15a>
 80029ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029be:	d811      	bhi.n	80029e4 <UART_SetConfig+0x160>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <UART_SetConfig+0x148>
 80029c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029c8:	d006      	beq.n	80029d8 <UART_SetConfig+0x154>
 80029ca:	e00b      	b.n	80029e4 <UART_SetConfig+0x160>
 80029cc:	2300      	movs	r3, #0
 80029ce:	77fb      	strb	r3, [r7, #31]
 80029d0:	e061      	b.n	8002a96 <UART_SetConfig+0x212>
 80029d2:	2302      	movs	r3, #2
 80029d4:	77fb      	strb	r3, [r7, #31]
 80029d6:	e05e      	b.n	8002a96 <UART_SetConfig+0x212>
 80029d8:	2304      	movs	r3, #4
 80029da:	77fb      	strb	r3, [r7, #31]
 80029dc:	e05b      	b.n	8002a96 <UART_SetConfig+0x212>
 80029de:	2308      	movs	r3, #8
 80029e0:	77fb      	strb	r3, [r7, #31]
 80029e2:	e058      	b.n	8002a96 <UART_SetConfig+0x212>
 80029e4:	2310      	movs	r3, #16
 80029e6:	77fb      	strb	r3, [r7, #31]
 80029e8:	e055      	b.n	8002a96 <UART_SetConfig+0x212>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a47      	ldr	r2, [pc, #284]	@ (8002b0c <UART_SetConfig+0x288>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d124      	bne.n	8002a3e <UART_SetConfig+0x1ba>
 80029f4:	4b42      	ldr	r3, [pc, #264]	@ (8002b00 <UART_SetConfig+0x27c>)
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80029fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a00:	d011      	beq.n	8002a26 <UART_SetConfig+0x1a2>
 8002a02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a06:	d817      	bhi.n	8002a38 <UART_SetConfig+0x1b4>
 8002a08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a0c:	d011      	beq.n	8002a32 <UART_SetConfig+0x1ae>
 8002a0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a12:	d811      	bhi.n	8002a38 <UART_SetConfig+0x1b4>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <UART_SetConfig+0x19c>
 8002a18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a1c:	d006      	beq.n	8002a2c <UART_SetConfig+0x1a8>
 8002a1e:	e00b      	b.n	8002a38 <UART_SetConfig+0x1b4>
 8002a20:	2300      	movs	r3, #0
 8002a22:	77fb      	strb	r3, [r7, #31]
 8002a24:	e037      	b.n	8002a96 <UART_SetConfig+0x212>
 8002a26:	2302      	movs	r3, #2
 8002a28:	77fb      	strb	r3, [r7, #31]
 8002a2a:	e034      	b.n	8002a96 <UART_SetConfig+0x212>
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	77fb      	strb	r3, [r7, #31]
 8002a30:	e031      	b.n	8002a96 <UART_SetConfig+0x212>
 8002a32:	2308      	movs	r3, #8
 8002a34:	77fb      	strb	r3, [r7, #31]
 8002a36:	e02e      	b.n	8002a96 <UART_SetConfig+0x212>
 8002a38:	2310      	movs	r3, #16
 8002a3a:	77fb      	strb	r3, [r7, #31]
 8002a3c:	e02b      	b.n	8002a96 <UART_SetConfig+0x212>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a33      	ldr	r2, [pc, #204]	@ (8002b10 <UART_SetConfig+0x28c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d124      	bne.n	8002a92 <UART_SetConfig+0x20e>
 8002a48:	4b2d      	ldr	r3, [pc, #180]	@ (8002b00 <UART_SetConfig+0x27c>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002a50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a54:	d011      	beq.n	8002a7a <UART_SetConfig+0x1f6>
 8002a56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a5a:	d817      	bhi.n	8002a8c <UART_SetConfig+0x208>
 8002a5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a60:	d011      	beq.n	8002a86 <UART_SetConfig+0x202>
 8002a62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a66:	d811      	bhi.n	8002a8c <UART_SetConfig+0x208>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <UART_SetConfig+0x1f0>
 8002a6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a70:	d006      	beq.n	8002a80 <UART_SetConfig+0x1fc>
 8002a72:	e00b      	b.n	8002a8c <UART_SetConfig+0x208>
 8002a74:	2300      	movs	r3, #0
 8002a76:	77fb      	strb	r3, [r7, #31]
 8002a78:	e00d      	b.n	8002a96 <UART_SetConfig+0x212>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	77fb      	strb	r3, [r7, #31]
 8002a7e:	e00a      	b.n	8002a96 <UART_SetConfig+0x212>
 8002a80:	2304      	movs	r3, #4
 8002a82:	77fb      	strb	r3, [r7, #31]
 8002a84:	e007      	b.n	8002a96 <UART_SetConfig+0x212>
 8002a86:	2308      	movs	r3, #8
 8002a88:	77fb      	strb	r3, [r7, #31]
 8002a8a:	e004      	b.n	8002a96 <UART_SetConfig+0x212>
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	77fb      	strb	r3, [r7, #31]
 8002a90:	e001      	b.n	8002a96 <UART_SetConfig+0x212>
 8002a92:	2310      	movs	r3, #16
 8002a94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a9e:	d16b      	bne.n	8002b78 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002aa0:	7ffb      	ldrb	r3, [r7, #31]
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d838      	bhi.n	8002b18 <UART_SetConfig+0x294>
 8002aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8002aac <UART_SetConfig+0x228>)
 8002aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aac:	08002ad1 	.word	0x08002ad1
 8002ab0:	08002ad9 	.word	0x08002ad9
 8002ab4:	08002ae1 	.word	0x08002ae1
 8002ab8:	08002b19 	.word	0x08002b19
 8002abc:	08002ae7 	.word	0x08002ae7
 8002ac0:	08002b19 	.word	0x08002b19
 8002ac4:	08002b19 	.word	0x08002b19
 8002ac8:	08002b19 	.word	0x08002b19
 8002acc:	08002aef 	.word	0x08002aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ad0:	f7ff fba0 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8002ad4:	61b8      	str	r0, [r7, #24]
        break;
 8002ad6:	e024      	b.n	8002b22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ad8:	f7ff fbbe 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8002adc:	61b8      	str	r0, [r7, #24]
        break;
 8002ade:	e020      	b.n	8002b22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b14 <UART_SetConfig+0x290>)
 8002ae2:	61bb      	str	r3, [r7, #24]
        break;
 8002ae4:	e01d      	b.n	8002b22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ae6:	f7ff fb35 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002aea:	61b8      	str	r0, [r7, #24]
        break;
 8002aec:	e019      	b.n	8002b22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002af2:	61bb      	str	r3, [r7, #24]
        break;
 8002af4:	e015      	b.n	8002b22 <UART_SetConfig+0x29e>
 8002af6:	bf00      	nop
 8002af8:	efff69f3 	.word	0xefff69f3
 8002afc:	40013800 	.word	0x40013800
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40004400 	.word	0x40004400
 8002b08:	40004800 	.word	0x40004800
 8002b0c:	40004c00 	.word	0x40004c00
 8002b10:	40005000 	.word	0x40005000
 8002b14:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	77bb      	strb	r3, [r7, #30]
        break;
 8002b20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d073      	beq.n	8002c10 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	005a      	lsls	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	085b      	lsrs	r3, r3, #1
 8002b32:	441a      	add	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b0f      	cmp	r3, #15
 8002b42:	d916      	bls.n	8002b72 <UART_SetConfig+0x2ee>
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b4a:	d212      	bcs.n	8002b72 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f023 030f 	bic.w	r3, r3, #15
 8002b54:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	89fb      	ldrh	r3, [r7, #14]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	89fa      	ldrh	r2, [r7, #14]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	e04e      	b.n	8002c10 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	77bb      	strb	r3, [r7, #30]
 8002b76:	e04b      	b.n	8002c10 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b78:	7ffb      	ldrb	r3, [r7, #31]
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d827      	bhi.n	8002bce <UART_SetConfig+0x34a>
 8002b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b84 <UART_SetConfig+0x300>)
 8002b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b84:	08002ba9 	.word	0x08002ba9
 8002b88:	08002bb1 	.word	0x08002bb1
 8002b8c:	08002bb9 	.word	0x08002bb9
 8002b90:	08002bcf 	.word	0x08002bcf
 8002b94:	08002bbf 	.word	0x08002bbf
 8002b98:	08002bcf 	.word	0x08002bcf
 8002b9c:	08002bcf 	.word	0x08002bcf
 8002ba0:	08002bcf 	.word	0x08002bcf
 8002ba4:	08002bc7 	.word	0x08002bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ba8:	f7ff fb34 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8002bac:	61b8      	str	r0, [r7, #24]
        break;
 8002bae:	e013      	b.n	8002bd8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bb0:	f7ff fb52 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8002bb4:	61b8      	str	r0, [r7, #24]
        break;
 8002bb6:	e00f      	b.n	8002bd8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c28 <UART_SetConfig+0x3a4>)
 8002bba:	61bb      	str	r3, [r7, #24]
        break;
 8002bbc:	e00c      	b.n	8002bd8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bbe:	f7ff fac9 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002bc2:	61b8      	str	r0, [r7, #24]
        break;
 8002bc4:	e008      	b.n	8002bd8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bca:	61bb      	str	r3, [r7, #24]
        break;
 8002bcc:	e004      	b.n	8002bd8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	77bb      	strb	r3, [r7, #30]
        break;
 8002bd6:	bf00      	nop
    }

    if (pclk != 0U)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d018      	beq.n	8002c10 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	085a      	lsrs	r2, r3, #1
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	441a      	add	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d909      	bls.n	8002c0c <UART_SetConfig+0x388>
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfe:	d205      	bcs.n	8002c0c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	e001      	b.n	8002c10 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002c1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3720      	adds	r7, #32
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	007a1200 	.word	0x007a1200

08002c2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01a      	beq.n	8002d42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d2a:	d10a      	bne.n	8002d42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
  }
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b098      	sub	sp, #96	@ 0x60
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d80:	f7fd fd6c 	bl	800085c <HAL_GetTick>
 8002d84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d12e      	bne.n	8002df2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f88c 	bl	8002ec0 <UART_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d021      	beq.n	8002df2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db6:	e853 3f00 	ldrex	r3, [r3]
 8002dba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002dd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002dd4:	e841 2300 	strex	r3, r2, [r1]
 8002dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1e6      	bne.n	8002dae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e062      	b.n	8002eb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d149      	bne.n	8002e94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f856 	bl	8002ec0 <UART_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d03c      	beq.n	8002e94 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	e853 3f00 	ldrex	r3, [r3]
 8002e26:	623b      	str	r3, [r7, #32]
   return(result);
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e38:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e40:	e841 2300 	strex	r3, r2, [r1]
 8002e44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e6      	bne.n	8002e1a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3308      	adds	r3, #8
 8002e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	e853 3f00 	ldrex	r3, [r3]
 8002e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3308      	adds	r3, #8
 8002e6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e6c:	61fa      	str	r2, [r7, #28]
 8002e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e70:	69b9      	ldr	r1, [r7, #24]
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	e841 2300 	strex	r3, r2, [r1]
 8002e78:	617b      	str	r3, [r7, #20]
   return(result);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1e5      	bne.n	8002e4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e011      	b.n	8002eb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3758      	adds	r7, #88	@ 0x58
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed0:	e04f      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ed8:	d04b      	beq.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7fd fcbf 	bl	800085c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e04e      	b.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d037      	beq.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b80      	cmp	r3, #128	@ 0x80
 8002f06:	d034      	beq.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b40      	cmp	r3, #64	@ 0x40
 8002f0c:	d031      	beq.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d110      	bne.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2208      	movs	r2, #8
 8002f22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f838 	bl	8002f9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e029      	b.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f4c:	d111      	bne.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f81e 	bl	8002f9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e00f      	b.n	8002f92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d0a0      	beq.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b095      	sub	sp, #84	@ 0x54
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002faa:	e853 3f00 	ldrex	r3, [r3]
 8002fae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e6      	bne.n	8002fa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3308      	adds	r3, #8
 8002fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ff4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ffc:	e841 2300 	strex	r3, r2, [r1]
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e5      	bne.n	8002fd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300c:	2b01      	cmp	r3, #1
 800300e:	d118      	bne.n	8003042 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	60bb      	str	r3, [r7, #8]
   return(result);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f023 0310 	bic.w	r3, r3, #16
 8003024:	647b      	str	r3, [r7, #68]	@ 0x44
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6979      	ldr	r1, [r7, #20]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	613b      	str	r3, [r7, #16]
   return(result);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e6      	bne.n	8003010 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003056:	bf00      	nop
 8003058:	3754      	adds	r7, #84	@ 0x54
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <_vsiprintf_r>:
 8003064:	b510      	push	{r4, lr}
 8003066:	b09a      	sub	sp, #104	@ 0x68
 8003068:	2400      	movs	r4, #0
 800306a:	9100      	str	r1, [sp, #0]
 800306c:	9104      	str	r1, [sp, #16]
 800306e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003072:	9105      	str	r1, [sp, #20]
 8003074:	9102      	str	r1, [sp, #8]
 8003076:	4905      	ldr	r1, [pc, #20]	@ (800308c <_vsiprintf_r+0x28>)
 8003078:	9103      	str	r1, [sp, #12]
 800307a:	4669      	mov	r1, sp
 800307c:	9419      	str	r4, [sp, #100]	@ 0x64
 800307e:	f000 f8a1 	bl	80031c4 <_svfiprintf_r>
 8003082:	9b00      	ldr	r3, [sp, #0]
 8003084:	701c      	strb	r4, [r3, #0]
 8003086:	b01a      	add	sp, #104	@ 0x68
 8003088:	bd10      	pop	{r4, pc}
 800308a:	bf00      	nop
 800308c:	ffff0208 	.word	0xffff0208

08003090 <vsiprintf>:
 8003090:	4613      	mov	r3, r2
 8003092:	460a      	mov	r2, r1
 8003094:	4601      	mov	r1, r0
 8003096:	4802      	ldr	r0, [pc, #8]	@ (80030a0 <vsiprintf+0x10>)
 8003098:	6800      	ldr	r0, [r0, #0]
 800309a:	f7ff bfe3 	b.w	8003064 <_vsiprintf_r>
 800309e:	bf00      	nop
 80030a0:	2000000c 	.word	0x2000000c

080030a4 <memset>:
 80030a4:	4402      	add	r2, r0
 80030a6:	4603      	mov	r3, r0
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d100      	bne.n	80030ae <memset+0xa>
 80030ac:	4770      	bx	lr
 80030ae:	f803 1b01 	strb.w	r1, [r3], #1
 80030b2:	e7f9      	b.n	80030a8 <memset+0x4>

080030b4 <__errno>:
 80030b4:	4b01      	ldr	r3, [pc, #4]	@ (80030bc <__errno+0x8>)
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	2000000c 	.word	0x2000000c

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	4d0d      	ldr	r5, [pc, #52]	@ (80030f8 <__libc_init_array+0x38>)
 80030c4:	4c0d      	ldr	r4, [pc, #52]	@ (80030fc <__libc_init_array+0x3c>)
 80030c6:	1b64      	subs	r4, r4, r5
 80030c8:	10a4      	asrs	r4, r4, #2
 80030ca:	2600      	movs	r6, #0
 80030cc:	42a6      	cmp	r6, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003100 <__libc_init_array+0x40>)
 80030d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003104 <__libc_init_array+0x44>)
 80030d4:	f000 fc64 	bl	80039a0 <_init>
 80030d8:	1b64      	subs	r4, r4, r5
 80030da:	10a4      	asrs	r4, r4, #2
 80030dc:	2600      	movs	r6, #0
 80030de:	42a6      	cmp	r6, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e8:	4798      	blx	r3
 80030ea:	3601      	adds	r6, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f2:	4798      	blx	r3
 80030f4:	3601      	adds	r6, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	08003b20 	.word	0x08003b20
 80030fc:	08003b20 	.word	0x08003b20
 8003100:	08003b20 	.word	0x08003b20
 8003104:	08003b24 	.word	0x08003b24

08003108 <__retarget_lock_acquire_recursive>:
 8003108:	4770      	bx	lr

0800310a <__retarget_lock_release_recursive>:
 800310a:	4770      	bx	lr

0800310c <__ssputs_r>:
 800310c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003110:	688e      	ldr	r6, [r1, #8]
 8003112:	461f      	mov	r7, r3
 8003114:	42be      	cmp	r6, r7
 8003116:	680b      	ldr	r3, [r1, #0]
 8003118:	4682      	mov	sl, r0
 800311a:	460c      	mov	r4, r1
 800311c:	4690      	mov	r8, r2
 800311e:	d82d      	bhi.n	800317c <__ssputs_r+0x70>
 8003120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003124:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003128:	d026      	beq.n	8003178 <__ssputs_r+0x6c>
 800312a:	6965      	ldr	r5, [r4, #20]
 800312c:	6909      	ldr	r1, [r1, #16]
 800312e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003132:	eba3 0901 	sub.w	r9, r3, r1
 8003136:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800313a:	1c7b      	adds	r3, r7, #1
 800313c:	444b      	add	r3, r9
 800313e:	106d      	asrs	r5, r5, #1
 8003140:	429d      	cmp	r5, r3
 8003142:	bf38      	it	cc
 8003144:	461d      	movcc	r5, r3
 8003146:	0553      	lsls	r3, r2, #21
 8003148:	d527      	bpl.n	800319a <__ssputs_r+0x8e>
 800314a:	4629      	mov	r1, r5
 800314c:	f000 f958 	bl	8003400 <_malloc_r>
 8003150:	4606      	mov	r6, r0
 8003152:	b360      	cbz	r0, 80031ae <__ssputs_r+0xa2>
 8003154:	6921      	ldr	r1, [r4, #16]
 8003156:	464a      	mov	r2, r9
 8003158:	f000 fbc2 	bl	80038e0 <memcpy>
 800315c:	89a3      	ldrh	r3, [r4, #12]
 800315e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003166:	81a3      	strh	r3, [r4, #12]
 8003168:	6126      	str	r6, [r4, #16]
 800316a:	6165      	str	r5, [r4, #20]
 800316c:	444e      	add	r6, r9
 800316e:	eba5 0509 	sub.w	r5, r5, r9
 8003172:	6026      	str	r6, [r4, #0]
 8003174:	60a5      	str	r5, [r4, #8]
 8003176:	463e      	mov	r6, r7
 8003178:	42be      	cmp	r6, r7
 800317a:	d900      	bls.n	800317e <__ssputs_r+0x72>
 800317c:	463e      	mov	r6, r7
 800317e:	6820      	ldr	r0, [r4, #0]
 8003180:	4632      	mov	r2, r6
 8003182:	4641      	mov	r1, r8
 8003184:	f000 fb82 	bl	800388c <memmove>
 8003188:	68a3      	ldr	r3, [r4, #8]
 800318a:	1b9b      	subs	r3, r3, r6
 800318c:	60a3      	str	r3, [r4, #8]
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	4433      	add	r3, r6
 8003192:	6023      	str	r3, [r4, #0]
 8003194:	2000      	movs	r0, #0
 8003196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319a:	462a      	mov	r2, r5
 800319c:	f000 fb48 	bl	8003830 <_realloc_r>
 80031a0:	4606      	mov	r6, r0
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d1e0      	bne.n	8003168 <__ssputs_r+0x5c>
 80031a6:	6921      	ldr	r1, [r4, #16]
 80031a8:	4650      	mov	r0, sl
 80031aa:	f000 fba7 	bl	80038fc <_free_r>
 80031ae:	230c      	movs	r3, #12
 80031b0:	f8ca 3000 	str.w	r3, [sl]
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ba:	81a3      	strh	r3, [r4, #12]
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031c0:	e7e9      	b.n	8003196 <__ssputs_r+0x8a>
	...

080031c4 <_svfiprintf_r>:
 80031c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c8:	4698      	mov	r8, r3
 80031ca:	898b      	ldrh	r3, [r1, #12]
 80031cc:	061b      	lsls	r3, r3, #24
 80031ce:	b09d      	sub	sp, #116	@ 0x74
 80031d0:	4607      	mov	r7, r0
 80031d2:	460d      	mov	r5, r1
 80031d4:	4614      	mov	r4, r2
 80031d6:	d510      	bpl.n	80031fa <_svfiprintf_r+0x36>
 80031d8:	690b      	ldr	r3, [r1, #16]
 80031da:	b973      	cbnz	r3, 80031fa <_svfiprintf_r+0x36>
 80031dc:	2140      	movs	r1, #64	@ 0x40
 80031de:	f000 f90f 	bl	8003400 <_malloc_r>
 80031e2:	6028      	str	r0, [r5, #0]
 80031e4:	6128      	str	r0, [r5, #16]
 80031e6:	b930      	cbnz	r0, 80031f6 <_svfiprintf_r+0x32>
 80031e8:	230c      	movs	r3, #12
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031f0:	b01d      	add	sp, #116	@ 0x74
 80031f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f6:	2340      	movs	r3, #64	@ 0x40
 80031f8:	616b      	str	r3, [r5, #20]
 80031fa:	2300      	movs	r3, #0
 80031fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80031fe:	2320      	movs	r3, #32
 8003200:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003204:	f8cd 800c 	str.w	r8, [sp, #12]
 8003208:	2330      	movs	r3, #48	@ 0x30
 800320a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80033a8 <_svfiprintf_r+0x1e4>
 800320e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003212:	f04f 0901 	mov.w	r9, #1
 8003216:	4623      	mov	r3, r4
 8003218:	469a      	mov	sl, r3
 800321a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800321e:	b10a      	cbz	r2, 8003224 <_svfiprintf_r+0x60>
 8003220:	2a25      	cmp	r2, #37	@ 0x25
 8003222:	d1f9      	bne.n	8003218 <_svfiprintf_r+0x54>
 8003224:	ebba 0b04 	subs.w	fp, sl, r4
 8003228:	d00b      	beq.n	8003242 <_svfiprintf_r+0x7e>
 800322a:	465b      	mov	r3, fp
 800322c:	4622      	mov	r2, r4
 800322e:	4629      	mov	r1, r5
 8003230:	4638      	mov	r0, r7
 8003232:	f7ff ff6b 	bl	800310c <__ssputs_r>
 8003236:	3001      	adds	r0, #1
 8003238:	f000 80a7 	beq.w	800338a <_svfiprintf_r+0x1c6>
 800323c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800323e:	445a      	add	r2, fp
 8003240:	9209      	str	r2, [sp, #36]	@ 0x24
 8003242:	f89a 3000 	ldrb.w	r3, [sl]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 809f 	beq.w	800338a <_svfiprintf_r+0x1c6>
 800324c:	2300      	movs	r3, #0
 800324e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003256:	f10a 0a01 	add.w	sl, sl, #1
 800325a:	9304      	str	r3, [sp, #16]
 800325c:	9307      	str	r3, [sp, #28]
 800325e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003262:	931a      	str	r3, [sp, #104]	@ 0x68
 8003264:	4654      	mov	r4, sl
 8003266:	2205      	movs	r2, #5
 8003268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800326c:	484e      	ldr	r0, [pc, #312]	@ (80033a8 <_svfiprintf_r+0x1e4>)
 800326e:	f7fc ffbf 	bl	80001f0 <memchr>
 8003272:	9a04      	ldr	r2, [sp, #16]
 8003274:	b9d8      	cbnz	r0, 80032ae <_svfiprintf_r+0xea>
 8003276:	06d0      	lsls	r0, r2, #27
 8003278:	bf44      	itt	mi
 800327a:	2320      	movmi	r3, #32
 800327c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003280:	0711      	lsls	r1, r2, #28
 8003282:	bf44      	itt	mi
 8003284:	232b      	movmi	r3, #43	@ 0x2b
 8003286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800328a:	f89a 3000 	ldrb.w	r3, [sl]
 800328e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003290:	d015      	beq.n	80032be <_svfiprintf_r+0xfa>
 8003292:	9a07      	ldr	r2, [sp, #28]
 8003294:	4654      	mov	r4, sl
 8003296:	2000      	movs	r0, #0
 8003298:	f04f 0c0a 	mov.w	ip, #10
 800329c:	4621      	mov	r1, r4
 800329e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032a2:	3b30      	subs	r3, #48	@ 0x30
 80032a4:	2b09      	cmp	r3, #9
 80032a6:	d94b      	bls.n	8003340 <_svfiprintf_r+0x17c>
 80032a8:	b1b0      	cbz	r0, 80032d8 <_svfiprintf_r+0x114>
 80032aa:	9207      	str	r2, [sp, #28]
 80032ac:	e014      	b.n	80032d8 <_svfiprintf_r+0x114>
 80032ae:	eba0 0308 	sub.w	r3, r0, r8
 80032b2:	fa09 f303 	lsl.w	r3, r9, r3
 80032b6:	4313      	orrs	r3, r2
 80032b8:	9304      	str	r3, [sp, #16]
 80032ba:	46a2      	mov	sl, r4
 80032bc:	e7d2      	b.n	8003264 <_svfiprintf_r+0xa0>
 80032be:	9b03      	ldr	r3, [sp, #12]
 80032c0:	1d19      	adds	r1, r3, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	9103      	str	r1, [sp, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfbb      	ittet	lt
 80032ca:	425b      	neglt	r3, r3
 80032cc:	f042 0202 	orrlt.w	r2, r2, #2
 80032d0:	9307      	strge	r3, [sp, #28]
 80032d2:	9307      	strlt	r3, [sp, #28]
 80032d4:	bfb8      	it	lt
 80032d6:	9204      	strlt	r2, [sp, #16]
 80032d8:	7823      	ldrb	r3, [r4, #0]
 80032da:	2b2e      	cmp	r3, #46	@ 0x2e
 80032dc:	d10a      	bne.n	80032f4 <_svfiprintf_r+0x130>
 80032de:	7863      	ldrb	r3, [r4, #1]
 80032e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80032e2:	d132      	bne.n	800334a <_svfiprintf_r+0x186>
 80032e4:	9b03      	ldr	r3, [sp, #12]
 80032e6:	1d1a      	adds	r2, r3, #4
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	9203      	str	r2, [sp, #12]
 80032ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032f0:	3402      	adds	r4, #2
 80032f2:	9305      	str	r3, [sp, #20]
 80032f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80033b8 <_svfiprintf_r+0x1f4>
 80032f8:	7821      	ldrb	r1, [r4, #0]
 80032fa:	2203      	movs	r2, #3
 80032fc:	4650      	mov	r0, sl
 80032fe:	f7fc ff77 	bl	80001f0 <memchr>
 8003302:	b138      	cbz	r0, 8003314 <_svfiprintf_r+0x150>
 8003304:	9b04      	ldr	r3, [sp, #16]
 8003306:	eba0 000a 	sub.w	r0, r0, sl
 800330a:	2240      	movs	r2, #64	@ 0x40
 800330c:	4082      	lsls	r2, r0
 800330e:	4313      	orrs	r3, r2
 8003310:	3401      	adds	r4, #1
 8003312:	9304      	str	r3, [sp, #16]
 8003314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003318:	4824      	ldr	r0, [pc, #144]	@ (80033ac <_svfiprintf_r+0x1e8>)
 800331a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800331e:	2206      	movs	r2, #6
 8003320:	f7fc ff66 	bl	80001f0 <memchr>
 8003324:	2800      	cmp	r0, #0
 8003326:	d036      	beq.n	8003396 <_svfiprintf_r+0x1d2>
 8003328:	4b21      	ldr	r3, [pc, #132]	@ (80033b0 <_svfiprintf_r+0x1ec>)
 800332a:	bb1b      	cbnz	r3, 8003374 <_svfiprintf_r+0x1b0>
 800332c:	9b03      	ldr	r3, [sp, #12]
 800332e:	3307      	adds	r3, #7
 8003330:	f023 0307 	bic.w	r3, r3, #7
 8003334:	3308      	adds	r3, #8
 8003336:	9303      	str	r3, [sp, #12]
 8003338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800333a:	4433      	add	r3, r6
 800333c:	9309      	str	r3, [sp, #36]	@ 0x24
 800333e:	e76a      	b.n	8003216 <_svfiprintf_r+0x52>
 8003340:	fb0c 3202 	mla	r2, ip, r2, r3
 8003344:	460c      	mov	r4, r1
 8003346:	2001      	movs	r0, #1
 8003348:	e7a8      	b.n	800329c <_svfiprintf_r+0xd8>
 800334a:	2300      	movs	r3, #0
 800334c:	3401      	adds	r4, #1
 800334e:	9305      	str	r3, [sp, #20]
 8003350:	4619      	mov	r1, r3
 8003352:	f04f 0c0a 	mov.w	ip, #10
 8003356:	4620      	mov	r0, r4
 8003358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800335c:	3a30      	subs	r2, #48	@ 0x30
 800335e:	2a09      	cmp	r2, #9
 8003360:	d903      	bls.n	800336a <_svfiprintf_r+0x1a6>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0c6      	beq.n	80032f4 <_svfiprintf_r+0x130>
 8003366:	9105      	str	r1, [sp, #20]
 8003368:	e7c4      	b.n	80032f4 <_svfiprintf_r+0x130>
 800336a:	fb0c 2101 	mla	r1, ip, r1, r2
 800336e:	4604      	mov	r4, r0
 8003370:	2301      	movs	r3, #1
 8003372:	e7f0      	b.n	8003356 <_svfiprintf_r+0x192>
 8003374:	ab03      	add	r3, sp, #12
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	462a      	mov	r2, r5
 800337a:	4b0e      	ldr	r3, [pc, #56]	@ (80033b4 <_svfiprintf_r+0x1f0>)
 800337c:	a904      	add	r1, sp, #16
 800337e:	4638      	mov	r0, r7
 8003380:	f3af 8000 	nop.w
 8003384:	1c42      	adds	r2, r0, #1
 8003386:	4606      	mov	r6, r0
 8003388:	d1d6      	bne.n	8003338 <_svfiprintf_r+0x174>
 800338a:	89ab      	ldrh	r3, [r5, #12]
 800338c:	065b      	lsls	r3, r3, #25
 800338e:	f53f af2d 	bmi.w	80031ec <_svfiprintf_r+0x28>
 8003392:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003394:	e72c      	b.n	80031f0 <_svfiprintf_r+0x2c>
 8003396:	ab03      	add	r3, sp, #12
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	462a      	mov	r2, r5
 800339c:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <_svfiprintf_r+0x1f0>)
 800339e:	a904      	add	r1, sp, #16
 80033a0:	4638      	mov	r0, r7
 80033a2:	f000 f91b 	bl	80035dc <_printf_i>
 80033a6:	e7ed      	b.n	8003384 <_svfiprintf_r+0x1c0>
 80033a8:	08003ae4 	.word	0x08003ae4
 80033ac:	08003aee 	.word	0x08003aee
 80033b0:	00000000 	.word	0x00000000
 80033b4:	0800310d 	.word	0x0800310d
 80033b8:	08003aea 	.word	0x08003aea

080033bc <sbrk_aligned>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	4e0f      	ldr	r6, [pc, #60]	@ (80033fc <sbrk_aligned+0x40>)
 80033c0:	460c      	mov	r4, r1
 80033c2:	6831      	ldr	r1, [r6, #0]
 80033c4:	4605      	mov	r5, r0
 80033c6:	b911      	cbnz	r1, 80033ce <sbrk_aligned+0x12>
 80033c8:	f000 fa7a 	bl	80038c0 <_sbrk_r>
 80033cc:	6030      	str	r0, [r6, #0]
 80033ce:	4621      	mov	r1, r4
 80033d0:	4628      	mov	r0, r5
 80033d2:	f000 fa75 	bl	80038c0 <_sbrk_r>
 80033d6:	1c43      	adds	r3, r0, #1
 80033d8:	d103      	bne.n	80033e2 <sbrk_aligned+0x26>
 80033da:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80033de:	4620      	mov	r0, r4
 80033e0:	bd70      	pop	{r4, r5, r6, pc}
 80033e2:	1cc4      	adds	r4, r0, #3
 80033e4:	f024 0403 	bic.w	r4, r4, #3
 80033e8:	42a0      	cmp	r0, r4
 80033ea:	d0f8      	beq.n	80033de <sbrk_aligned+0x22>
 80033ec:	1a21      	subs	r1, r4, r0
 80033ee:	4628      	mov	r0, r5
 80033f0:	f000 fa66 	bl	80038c0 <_sbrk_r>
 80033f4:	3001      	adds	r0, #1
 80033f6:	d1f2      	bne.n	80033de <sbrk_aligned+0x22>
 80033f8:	e7ef      	b.n	80033da <sbrk_aligned+0x1e>
 80033fa:	bf00      	nop
 80033fc:	20000244 	.word	0x20000244

08003400 <_malloc_r>:
 8003400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003404:	1ccd      	adds	r5, r1, #3
 8003406:	f025 0503 	bic.w	r5, r5, #3
 800340a:	3508      	adds	r5, #8
 800340c:	2d0c      	cmp	r5, #12
 800340e:	bf38      	it	cc
 8003410:	250c      	movcc	r5, #12
 8003412:	2d00      	cmp	r5, #0
 8003414:	4606      	mov	r6, r0
 8003416:	db01      	blt.n	800341c <_malloc_r+0x1c>
 8003418:	42a9      	cmp	r1, r5
 800341a:	d904      	bls.n	8003426 <_malloc_r+0x26>
 800341c:	230c      	movs	r3, #12
 800341e:	6033      	str	r3, [r6, #0]
 8003420:	2000      	movs	r0, #0
 8003422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003426:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034fc <_malloc_r+0xfc>
 800342a:	f000 f9f5 	bl	8003818 <__malloc_lock>
 800342e:	f8d8 3000 	ldr.w	r3, [r8]
 8003432:	461c      	mov	r4, r3
 8003434:	bb44      	cbnz	r4, 8003488 <_malloc_r+0x88>
 8003436:	4629      	mov	r1, r5
 8003438:	4630      	mov	r0, r6
 800343a:	f7ff ffbf 	bl	80033bc <sbrk_aligned>
 800343e:	1c43      	adds	r3, r0, #1
 8003440:	4604      	mov	r4, r0
 8003442:	d158      	bne.n	80034f6 <_malloc_r+0xf6>
 8003444:	f8d8 4000 	ldr.w	r4, [r8]
 8003448:	4627      	mov	r7, r4
 800344a:	2f00      	cmp	r7, #0
 800344c:	d143      	bne.n	80034d6 <_malloc_r+0xd6>
 800344e:	2c00      	cmp	r4, #0
 8003450:	d04b      	beq.n	80034ea <_malloc_r+0xea>
 8003452:	6823      	ldr	r3, [r4, #0]
 8003454:	4639      	mov	r1, r7
 8003456:	4630      	mov	r0, r6
 8003458:	eb04 0903 	add.w	r9, r4, r3
 800345c:	f000 fa30 	bl	80038c0 <_sbrk_r>
 8003460:	4581      	cmp	r9, r0
 8003462:	d142      	bne.n	80034ea <_malloc_r+0xea>
 8003464:	6821      	ldr	r1, [r4, #0]
 8003466:	1a6d      	subs	r5, r5, r1
 8003468:	4629      	mov	r1, r5
 800346a:	4630      	mov	r0, r6
 800346c:	f7ff ffa6 	bl	80033bc <sbrk_aligned>
 8003470:	3001      	adds	r0, #1
 8003472:	d03a      	beq.n	80034ea <_malloc_r+0xea>
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	442b      	add	r3, r5
 8003478:	6023      	str	r3, [r4, #0]
 800347a:	f8d8 3000 	ldr.w	r3, [r8]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	bb62      	cbnz	r2, 80034dc <_malloc_r+0xdc>
 8003482:	f8c8 7000 	str.w	r7, [r8]
 8003486:	e00f      	b.n	80034a8 <_malloc_r+0xa8>
 8003488:	6822      	ldr	r2, [r4, #0]
 800348a:	1b52      	subs	r2, r2, r5
 800348c:	d420      	bmi.n	80034d0 <_malloc_r+0xd0>
 800348e:	2a0b      	cmp	r2, #11
 8003490:	d917      	bls.n	80034c2 <_malloc_r+0xc2>
 8003492:	1961      	adds	r1, r4, r5
 8003494:	42a3      	cmp	r3, r4
 8003496:	6025      	str	r5, [r4, #0]
 8003498:	bf18      	it	ne
 800349a:	6059      	strne	r1, [r3, #4]
 800349c:	6863      	ldr	r3, [r4, #4]
 800349e:	bf08      	it	eq
 80034a0:	f8c8 1000 	streq.w	r1, [r8]
 80034a4:	5162      	str	r2, [r4, r5]
 80034a6:	604b      	str	r3, [r1, #4]
 80034a8:	4630      	mov	r0, r6
 80034aa:	f000 f9bb 	bl	8003824 <__malloc_unlock>
 80034ae:	f104 000b 	add.w	r0, r4, #11
 80034b2:	1d23      	adds	r3, r4, #4
 80034b4:	f020 0007 	bic.w	r0, r0, #7
 80034b8:	1ac2      	subs	r2, r0, r3
 80034ba:	bf1c      	itt	ne
 80034bc:	1a1b      	subne	r3, r3, r0
 80034be:	50a3      	strne	r3, [r4, r2]
 80034c0:	e7af      	b.n	8003422 <_malloc_r+0x22>
 80034c2:	6862      	ldr	r2, [r4, #4]
 80034c4:	42a3      	cmp	r3, r4
 80034c6:	bf0c      	ite	eq
 80034c8:	f8c8 2000 	streq.w	r2, [r8]
 80034cc:	605a      	strne	r2, [r3, #4]
 80034ce:	e7eb      	b.n	80034a8 <_malloc_r+0xa8>
 80034d0:	4623      	mov	r3, r4
 80034d2:	6864      	ldr	r4, [r4, #4]
 80034d4:	e7ae      	b.n	8003434 <_malloc_r+0x34>
 80034d6:	463c      	mov	r4, r7
 80034d8:	687f      	ldr	r7, [r7, #4]
 80034da:	e7b6      	b.n	800344a <_malloc_r+0x4a>
 80034dc:	461a      	mov	r2, r3
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	42a3      	cmp	r3, r4
 80034e2:	d1fb      	bne.n	80034dc <_malloc_r+0xdc>
 80034e4:	2300      	movs	r3, #0
 80034e6:	6053      	str	r3, [r2, #4]
 80034e8:	e7de      	b.n	80034a8 <_malloc_r+0xa8>
 80034ea:	230c      	movs	r3, #12
 80034ec:	6033      	str	r3, [r6, #0]
 80034ee:	4630      	mov	r0, r6
 80034f0:	f000 f998 	bl	8003824 <__malloc_unlock>
 80034f4:	e794      	b.n	8003420 <_malloc_r+0x20>
 80034f6:	6005      	str	r5, [r0, #0]
 80034f8:	e7d6      	b.n	80034a8 <_malloc_r+0xa8>
 80034fa:	bf00      	nop
 80034fc:	20000248 	.word	0x20000248

08003500 <_printf_common>:
 8003500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003504:	4616      	mov	r6, r2
 8003506:	4698      	mov	r8, r3
 8003508:	688a      	ldr	r2, [r1, #8]
 800350a:	690b      	ldr	r3, [r1, #16]
 800350c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003510:	4293      	cmp	r3, r2
 8003512:	bfb8      	it	lt
 8003514:	4613      	movlt	r3, r2
 8003516:	6033      	str	r3, [r6, #0]
 8003518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800351c:	4607      	mov	r7, r0
 800351e:	460c      	mov	r4, r1
 8003520:	b10a      	cbz	r2, 8003526 <_printf_common+0x26>
 8003522:	3301      	adds	r3, #1
 8003524:	6033      	str	r3, [r6, #0]
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	0699      	lsls	r1, r3, #26
 800352a:	bf42      	ittt	mi
 800352c:	6833      	ldrmi	r3, [r6, #0]
 800352e:	3302      	addmi	r3, #2
 8003530:	6033      	strmi	r3, [r6, #0]
 8003532:	6825      	ldr	r5, [r4, #0]
 8003534:	f015 0506 	ands.w	r5, r5, #6
 8003538:	d106      	bne.n	8003548 <_printf_common+0x48>
 800353a:	f104 0a19 	add.w	sl, r4, #25
 800353e:	68e3      	ldr	r3, [r4, #12]
 8003540:	6832      	ldr	r2, [r6, #0]
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	42ab      	cmp	r3, r5
 8003546:	dc26      	bgt.n	8003596 <_printf_common+0x96>
 8003548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800354c:	6822      	ldr	r2, [r4, #0]
 800354e:	3b00      	subs	r3, #0
 8003550:	bf18      	it	ne
 8003552:	2301      	movne	r3, #1
 8003554:	0692      	lsls	r2, r2, #26
 8003556:	d42b      	bmi.n	80035b0 <_printf_common+0xb0>
 8003558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800355c:	4641      	mov	r1, r8
 800355e:	4638      	mov	r0, r7
 8003560:	47c8      	blx	r9
 8003562:	3001      	adds	r0, #1
 8003564:	d01e      	beq.n	80035a4 <_printf_common+0xa4>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	6922      	ldr	r2, [r4, #16]
 800356a:	f003 0306 	and.w	r3, r3, #6
 800356e:	2b04      	cmp	r3, #4
 8003570:	bf02      	ittt	eq
 8003572:	68e5      	ldreq	r5, [r4, #12]
 8003574:	6833      	ldreq	r3, [r6, #0]
 8003576:	1aed      	subeq	r5, r5, r3
 8003578:	68a3      	ldr	r3, [r4, #8]
 800357a:	bf0c      	ite	eq
 800357c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003580:	2500      	movne	r5, #0
 8003582:	4293      	cmp	r3, r2
 8003584:	bfc4      	itt	gt
 8003586:	1a9b      	subgt	r3, r3, r2
 8003588:	18ed      	addgt	r5, r5, r3
 800358a:	2600      	movs	r6, #0
 800358c:	341a      	adds	r4, #26
 800358e:	42b5      	cmp	r5, r6
 8003590:	d11a      	bne.n	80035c8 <_printf_common+0xc8>
 8003592:	2000      	movs	r0, #0
 8003594:	e008      	b.n	80035a8 <_printf_common+0xa8>
 8003596:	2301      	movs	r3, #1
 8003598:	4652      	mov	r2, sl
 800359a:	4641      	mov	r1, r8
 800359c:	4638      	mov	r0, r7
 800359e:	47c8      	blx	r9
 80035a0:	3001      	adds	r0, #1
 80035a2:	d103      	bne.n	80035ac <_printf_common+0xac>
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ac:	3501      	adds	r5, #1
 80035ae:	e7c6      	b.n	800353e <_printf_common+0x3e>
 80035b0:	18e1      	adds	r1, r4, r3
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	2030      	movs	r0, #48	@ 0x30
 80035b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035ba:	4422      	add	r2, r4
 80035bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035c4:	3302      	adds	r3, #2
 80035c6:	e7c7      	b.n	8003558 <_printf_common+0x58>
 80035c8:	2301      	movs	r3, #1
 80035ca:	4622      	mov	r2, r4
 80035cc:	4641      	mov	r1, r8
 80035ce:	4638      	mov	r0, r7
 80035d0:	47c8      	blx	r9
 80035d2:	3001      	adds	r0, #1
 80035d4:	d0e6      	beq.n	80035a4 <_printf_common+0xa4>
 80035d6:	3601      	adds	r6, #1
 80035d8:	e7d9      	b.n	800358e <_printf_common+0x8e>
	...

080035dc <_printf_i>:
 80035dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035e0:	7e0f      	ldrb	r7, [r1, #24]
 80035e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035e4:	2f78      	cmp	r7, #120	@ 0x78
 80035e6:	4691      	mov	r9, r2
 80035e8:	4680      	mov	r8, r0
 80035ea:	460c      	mov	r4, r1
 80035ec:	469a      	mov	sl, r3
 80035ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035f2:	d807      	bhi.n	8003604 <_printf_i+0x28>
 80035f4:	2f62      	cmp	r7, #98	@ 0x62
 80035f6:	d80a      	bhi.n	800360e <_printf_i+0x32>
 80035f8:	2f00      	cmp	r7, #0
 80035fa:	f000 80d1 	beq.w	80037a0 <_printf_i+0x1c4>
 80035fe:	2f58      	cmp	r7, #88	@ 0x58
 8003600:	f000 80b8 	beq.w	8003774 <_printf_i+0x198>
 8003604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800360c:	e03a      	b.n	8003684 <_printf_i+0xa8>
 800360e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003612:	2b15      	cmp	r3, #21
 8003614:	d8f6      	bhi.n	8003604 <_printf_i+0x28>
 8003616:	a101      	add	r1, pc, #4	@ (adr r1, 800361c <_printf_i+0x40>)
 8003618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800361c:	08003675 	.word	0x08003675
 8003620:	08003689 	.word	0x08003689
 8003624:	08003605 	.word	0x08003605
 8003628:	08003605 	.word	0x08003605
 800362c:	08003605 	.word	0x08003605
 8003630:	08003605 	.word	0x08003605
 8003634:	08003689 	.word	0x08003689
 8003638:	08003605 	.word	0x08003605
 800363c:	08003605 	.word	0x08003605
 8003640:	08003605 	.word	0x08003605
 8003644:	08003605 	.word	0x08003605
 8003648:	08003787 	.word	0x08003787
 800364c:	080036b3 	.word	0x080036b3
 8003650:	08003741 	.word	0x08003741
 8003654:	08003605 	.word	0x08003605
 8003658:	08003605 	.word	0x08003605
 800365c:	080037a9 	.word	0x080037a9
 8003660:	08003605 	.word	0x08003605
 8003664:	080036b3 	.word	0x080036b3
 8003668:	08003605 	.word	0x08003605
 800366c:	08003605 	.word	0x08003605
 8003670:	08003749 	.word	0x08003749
 8003674:	6833      	ldr	r3, [r6, #0]
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6032      	str	r2, [r6, #0]
 800367c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003684:	2301      	movs	r3, #1
 8003686:	e09c      	b.n	80037c2 <_printf_i+0x1e6>
 8003688:	6833      	ldr	r3, [r6, #0]
 800368a:	6820      	ldr	r0, [r4, #0]
 800368c:	1d19      	adds	r1, r3, #4
 800368e:	6031      	str	r1, [r6, #0]
 8003690:	0606      	lsls	r6, r0, #24
 8003692:	d501      	bpl.n	8003698 <_printf_i+0xbc>
 8003694:	681d      	ldr	r5, [r3, #0]
 8003696:	e003      	b.n	80036a0 <_printf_i+0xc4>
 8003698:	0645      	lsls	r5, r0, #25
 800369a:	d5fb      	bpl.n	8003694 <_printf_i+0xb8>
 800369c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036a0:	2d00      	cmp	r5, #0
 80036a2:	da03      	bge.n	80036ac <_printf_i+0xd0>
 80036a4:	232d      	movs	r3, #45	@ 0x2d
 80036a6:	426d      	negs	r5, r5
 80036a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036ac:	4858      	ldr	r0, [pc, #352]	@ (8003810 <_printf_i+0x234>)
 80036ae:	230a      	movs	r3, #10
 80036b0:	e011      	b.n	80036d6 <_printf_i+0xfa>
 80036b2:	6821      	ldr	r1, [r4, #0]
 80036b4:	6833      	ldr	r3, [r6, #0]
 80036b6:	0608      	lsls	r0, r1, #24
 80036b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80036bc:	d402      	bmi.n	80036c4 <_printf_i+0xe8>
 80036be:	0649      	lsls	r1, r1, #25
 80036c0:	bf48      	it	mi
 80036c2:	b2ad      	uxthmi	r5, r5
 80036c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80036c6:	4852      	ldr	r0, [pc, #328]	@ (8003810 <_printf_i+0x234>)
 80036c8:	6033      	str	r3, [r6, #0]
 80036ca:	bf14      	ite	ne
 80036cc:	230a      	movne	r3, #10
 80036ce:	2308      	moveq	r3, #8
 80036d0:	2100      	movs	r1, #0
 80036d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036d6:	6866      	ldr	r6, [r4, #4]
 80036d8:	60a6      	str	r6, [r4, #8]
 80036da:	2e00      	cmp	r6, #0
 80036dc:	db05      	blt.n	80036ea <_printf_i+0x10e>
 80036de:	6821      	ldr	r1, [r4, #0]
 80036e0:	432e      	orrs	r6, r5
 80036e2:	f021 0104 	bic.w	r1, r1, #4
 80036e6:	6021      	str	r1, [r4, #0]
 80036e8:	d04b      	beq.n	8003782 <_printf_i+0x1a6>
 80036ea:	4616      	mov	r6, r2
 80036ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80036f0:	fb03 5711 	mls	r7, r3, r1, r5
 80036f4:	5dc7      	ldrb	r7, [r0, r7]
 80036f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036fa:	462f      	mov	r7, r5
 80036fc:	42bb      	cmp	r3, r7
 80036fe:	460d      	mov	r5, r1
 8003700:	d9f4      	bls.n	80036ec <_printf_i+0x110>
 8003702:	2b08      	cmp	r3, #8
 8003704:	d10b      	bne.n	800371e <_printf_i+0x142>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	07df      	lsls	r7, r3, #31
 800370a:	d508      	bpl.n	800371e <_printf_i+0x142>
 800370c:	6923      	ldr	r3, [r4, #16]
 800370e:	6861      	ldr	r1, [r4, #4]
 8003710:	4299      	cmp	r1, r3
 8003712:	bfde      	ittt	le
 8003714:	2330      	movle	r3, #48	@ 0x30
 8003716:	f806 3c01 	strble.w	r3, [r6, #-1]
 800371a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800371e:	1b92      	subs	r2, r2, r6
 8003720:	6122      	str	r2, [r4, #16]
 8003722:	f8cd a000 	str.w	sl, [sp]
 8003726:	464b      	mov	r3, r9
 8003728:	aa03      	add	r2, sp, #12
 800372a:	4621      	mov	r1, r4
 800372c:	4640      	mov	r0, r8
 800372e:	f7ff fee7 	bl	8003500 <_printf_common>
 8003732:	3001      	adds	r0, #1
 8003734:	d14a      	bne.n	80037cc <_printf_i+0x1f0>
 8003736:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800373a:	b004      	add	sp, #16
 800373c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	f043 0320 	orr.w	r3, r3, #32
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	4832      	ldr	r0, [pc, #200]	@ (8003814 <_printf_i+0x238>)
 800374a:	2778      	movs	r7, #120	@ 0x78
 800374c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	6831      	ldr	r1, [r6, #0]
 8003754:	061f      	lsls	r7, r3, #24
 8003756:	f851 5b04 	ldr.w	r5, [r1], #4
 800375a:	d402      	bmi.n	8003762 <_printf_i+0x186>
 800375c:	065f      	lsls	r7, r3, #25
 800375e:	bf48      	it	mi
 8003760:	b2ad      	uxthmi	r5, r5
 8003762:	6031      	str	r1, [r6, #0]
 8003764:	07d9      	lsls	r1, r3, #31
 8003766:	bf44      	itt	mi
 8003768:	f043 0320 	orrmi.w	r3, r3, #32
 800376c:	6023      	strmi	r3, [r4, #0]
 800376e:	b11d      	cbz	r5, 8003778 <_printf_i+0x19c>
 8003770:	2310      	movs	r3, #16
 8003772:	e7ad      	b.n	80036d0 <_printf_i+0xf4>
 8003774:	4826      	ldr	r0, [pc, #152]	@ (8003810 <_printf_i+0x234>)
 8003776:	e7e9      	b.n	800374c <_printf_i+0x170>
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	f023 0320 	bic.w	r3, r3, #32
 800377e:	6023      	str	r3, [r4, #0]
 8003780:	e7f6      	b.n	8003770 <_printf_i+0x194>
 8003782:	4616      	mov	r6, r2
 8003784:	e7bd      	b.n	8003702 <_printf_i+0x126>
 8003786:	6833      	ldr	r3, [r6, #0]
 8003788:	6825      	ldr	r5, [r4, #0]
 800378a:	6961      	ldr	r1, [r4, #20]
 800378c:	1d18      	adds	r0, r3, #4
 800378e:	6030      	str	r0, [r6, #0]
 8003790:	062e      	lsls	r6, r5, #24
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	d501      	bpl.n	800379a <_printf_i+0x1be>
 8003796:	6019      	str	r1, [r3, #0]
 8003798:	e002      	b.n	80037a0 <_printf_i+0x1c4>
 800379a:	0668      	lsls	r0, r5, #25
 800379c:	d5fb      	bpl.n	8003796 <_printf_i+0x1ba>
 800379e:	8019      	strh	r1, [r3, #0]
 80037a0:	2300      	movs	r3, #0
 80037a2:	6123      	str	r3, [r4, #16]
 80037a4:	4616      	mov	r6, r2
 80037a6:	e7bc      	b.n	8003722 <_printf_i+0x146>
 80037a8:	6833      	ldr	r3, [r6, #0]
 80037aa:	1d1a      	adds	r2, r3, #4
 80037ac:	6032      	str	r2, [r6, #0]
 80037ae:	681e      	ldr	r6, [r3, #0]
 80037b0:	6862      	ldr	r2, [r4, #4]
 80037b2:	2100      	movs	r1, #0
 80037b4:	4630      	mov	r0, r6
 80037b6:	f7fc fd1b 	bl	80001f0 <memchr>
 80037ba:	b108      	cbz	r0, 80037c0 <_printf_i+0x1e4>
 80037bc:	1b80      	subs	r0, r0, r6
 80037be:	6060      	str	r0, [r4, #4]
 80037c0:	6863      	ldr	r3, [r4, #4]
 80037c2:	6123      	str	r3, [r4, #16]
 80037c4:	2300      	movs	r3, #0
 80037c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037ca:	e7aa      	b.n	8003722 <_printf_i+0x146>
 80037cc:	6923      	ldr	r3, [r4, #16]
 80037ce:	4632      	mov	r2, r6
 80037d0:	4649      	mov	r1, r9
 80037d2:	4640      	mov	r0, r8
 80037d4:	47d0      	blx	sl
 80037d6:	3001      	adds	r0, #1
 80037d8:	d0ad      	beq.n	8003736 <_printf_i+0x15a>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	079b      	lsls	r3, r3, #30
 80037de:	d413      	bmi.n	8003808 <_printf_i+0x22c>
 80037e0:	68e0      	ldr	r0, [r4, #12]
 80037e2:	9b03      	ldr	r3, [sp, #12]
 80037e4:	4298      	cmp	r0, r3
 80037e6:	bfb8      	it	lt
 80037e8:	4618      	movlt	r0, r3
 80037ea:	e7a6      	b.n	800373a <_printf_i+0x15e>
 80037ec:	2301      	movs	r3, #1
 80037ee:	4632      	mov	r2, r6
 80037f0:	4649      	mov	r1, r9
 80037f2:	4640      	mov	r0, r8
 80037f4:	47d0      	blx	sl
 80037f6:	3001      	adds	r0, #1
 80037f8:	d09d      	beq.n	8003736 <_printf_i+0x15a>
 80037fa:	3501      	adds	r5, #1
 80037fc:	68e3      	ldr	r3, [r4, #12]
 80037fe:	9903      	ldr	r1, [sp, #12]
 8003800:	1a5b      	subs	r3, r3, r1
 8003802:	42ab      	cmp	r3, r5
 8003804:	dcf2      	bgt.n	80037ec <_printf_i+0x210>
 8003806:	e7eb      	b.n	80037e0 <_printf_i+0x204>
 8003808:	2500      	movs	r5, #0
 800380a:	f104 0619 	add.w	r6, r4, #25
 800380e:	e7f5      	b.n	80037fc <_printf_i+0x220>
 8003810:	08003af5 	.word	0x08003af5
 8003814:	08003b06 	.word	0x08003b06

08003818 <__malloc_lock>:
 8003818:	4801      	ldr	r0, [pc, #4]	@ (8003820 <__malloc_lock+0x8>)
 800381a:	f7ff bc75 	b.w	8003108 <__retarget_lock_acquire_recursive>
 800381e:	bf00      	nop
 8003820:	20000240 	.word	0x20000240

08003824 <__malloc_unlock>:
 8003824:	4801      	ldr	r0, [pc, #4]	@ (800382c <__malloc_unlock+0x8>)
 8003826:	f7ff bc70 	b.w	800310a <__retarget_lock_release_recursive>
 800382a:	bf00      	nop
 800382c:	20000240 	.word	0x20000240

08003830 <_realloc_r>:
 8003830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003834:	4607      	mov	r7, r0
 8003836:	4614      	mov	r4, r2
 8003838:	460d      	mov	r5, r1
 800383a:	b921      	cbnz	r1, 8003846 <_realloc_r+0x16>
 800383c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003840:	4611      	mov	r1, r2
 8003842:	f7ff bddd 	b.w	8003400 <_malloc_r>
 8003846:	b92a      	cbnz	r2, 8003854 <_realloc_r+0x24>
 8003848:	f000 f858 	bl	80038fc <_free_r>
 800384c:	4625      	mov	r5, r4
 800384e:	4628      	mov	r0, r5
 8003850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003854:	f000 f89c 	bl	8003990 <_malloc_usable_size_r>
 8003858:	4284      	cmp	r4, r0
 800385a:	4606      	mov	r6, r0
 800385c:	d802      	bhi.n	8003864 <_realloc_r+0x34>
 800385e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003862:	d8f4      	bhi.n	800384e <_realloc_r+0x1e>
 8003864:	4621      	mov	r1, r4
 8003866:	4638      	mov	r0, r7
 8003868:	f7ff fdca 	bl	8003400 <_malloc_r>
 800386c:	4680      	mov	r8, r0
 800386e:	b908      	cbnz	r0, 8003874 <_realloc_r+0x44>
 8003870:	4645      	mov	r5, r8
 8003872:	e7ec      	b.n	800384e <_realloc_r+0x1e>
 8003874:	42b4      	cmp	r4, r6
 8003876:	4622      	mov	r2, r4
 8003878:	4629      	mov	r1, r5
 800387a:	bf28      	it	cs
 800387c:	4632      	movcs	r2, r6
 800387e:	f000 f82f 	bl	80038e0 <memcpy>
 8003882:	4629      	mov	r1, r5
 8003884:	4638      	mov	r0, r7
 8003886:	f000 f839 	bl	80038fc <_free_r>
 800388a:	e7f1      	b.n	8003870 <_realloc_r+0x40>

0800388c <memmove>:
 800388c:	4288      	cmp	r0, r1
 800388e:	b510      	push	{r4, lr}
 8003890:	eb01 0402 	add.w	r4, r1, r2
 8003894:	d902      	bls.n	800389c <memmove+0x10>
 8003896:	4284      	cmp	r4, r0
 8003898:	4623      	mov	r3, r4
 800389a:	d807      	bhi.n	80038ac <memmove+0x20>
 800389c:	1e43      	subs	r3, r0, #1
 800389e:	42a1      	cmp	r1, r4
 80038a0:	d008      	beq.n	80038b4 <memmove+0x28>
 80038a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038aa:	e7f8      	b.n	800389e <memmove+0x12>
 80038ac:	4402      	add	r2, r0
 80038ae:	4601      	mov	r1, r0
 80038b0:	428a      	cmp	r2, r1
 80038b2:	d100      	bne.n	80038b6 <memmove+0x2a>
 80038b4:	bd10      	pop	{r4, pc}
 80038b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038be:	e7f7      	b.n	80038b0 <memmove+0x24>

080038c0 <_sbrk_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4d06      	ldr	r5, [pc, #24]	@ (80038dc <_sbrk_r+0x1c>)
 80038c4:	2300      	movs	r3, #0
 80038c6:	4604      	mov	r4, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	602b      	str	r3, [r5, #0]
 80038cc:	f7fc fefa 	bl	80006c4 <_sbrk>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d102      	bne.n	80038da <_sbrk_r+0x1a>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	b103      	cbz	r3, 80038da <_sbrk_r+0x1a>
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	bd38      	pop	{r3, r4, r5, pc}
 80038dc:	2000024c 	.word	0x2000024c

080038e0 <memcpy>:
 80038e0:	440a      	add	r2, r1
 80038e2:	4291      	cmp	r1, r2
 80038e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80038e8:	d100      	bne.n	80038ec <memcpy+0xc>
 80038ea:	4770      	bx	lr
 80038ec:	b510      	push	{r4, lr}
 80038ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038f6:	4291      	cmp	r1, r2
 80038f8:	d1f9      	bne.n	80038ee <memcpy+0xe>
 80038fa:	bd10      	pop	{r4, pc}

080038fc <_free_r>:
 80038fc:	b538      	push	{r3, r4, r5, lr}
 80038fe:	4605      	mov	r5, r0
 8003900:	2900      	cmp	r1, #0
 8003902:	d041      	beq.n	8003988 <_free_r+0x8c>
 8003904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003908:	1f0c      	subs	r4, r1, #4
 800390a:	2b00      	cmp	r3, #0
 800390c:	bfb8      	it	lt
 800390e:	18e4      	addlt	r4, r4, r3
 8003910:	f7ff ff82 	bl	8003818 <__malloc_lock>
 8003914:	4a1d      	ldr	r2, [pc, #116]	@ (800398c <_free_r+0x90>)
 8003916:	6813      	ldr	r3, [r2, #0]
 8003918:	b933      	cbnz	r3, 8003928 <_free_r+0x2c>
 800391a:	6063      	str	r3, [r4, #4]
 800391c:	6014      	str	r4, [r2, #0]
 800391e:	4628      	mov	r0, r5
 8003920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003924:	f7ff bf7e 	b.w	8003824 <__malloc_unlock>
 8003928:	42a3      	cmp	r3, r4
 800392a:	d908      	bls.n	800393e <_free_r+0x42>
 800392c:	6820      	ldr	r0, [r4, #0]
 800392e:	1821      	adds	r1, r4, r0
 8003930:	428b      	cmp	r3, r1
 8003932:	bf01      	itttt	eq
 8003934:	6819      	ldreq	r1, [r3, #0]
 8003936:	685b      	ldreq	r3, [r3, #4]
 8003938:	1809      	addeq	r1, r1, r0
 800393a:	6021      	streq	r1, [r4, #0]
 800393c:	e7ed      	b.n	800391a <_free_r+0x1e>
 800393e:	461a      	mov	r2, r3
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	b10b      	cbz	r3, 8003948 <_free_r+0x4c>
 8003944:	42a3      	cmp	r3, r4
 8003946:	d9fa      	bls.n	800393e <_free_r+0x42>
 8003948:	6811      	ldr	r1, [r2, #0]
 800394a:	1850      	adds	r0, r2, r1
 800394c:	42a0      	cmp	r0, r4
 800394e:	d10b      	bne.n	8003968 <_free_r+0x6c>
 8003950:	6820      	ldr	r0, [r4, #0]
 8003952:	4401      	add	r1, r0
 8003954:	1850      	adds	r0, r2, r1
 8003956:	4283      	cmp	r3, r0
 8003958:	6011      	str	r1, [r2, #0]
 800395a:	d1e0      	bne.n	800391e <_free_r+0x22>
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	6053      	str	r3, [r2, #4]
 8003962:	4408      	add	r0, r1
 8003964:	6010      	str	r0, [r2, #0]
 8003966:	e7da      	b.n	800391e <_free_r+0x22>
 8003968:	d902      	bls.n	8003970 <_free_r+0x74>
 800396a:	230c      	movs	r3, #12
 800396c:	602b      	str	r3, [r5, #0]
 800396e:	e7d6      	b.n	800391e <_free_r+0x22>
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	1821      	adds	r1, r4, r0
 8003974:	428b      	cmp	r3, r1
 8003976:	bf04      	itt	eq
 8003978:	6819      	ldreq	r1, [r3, #0]
 800397a:	685b      	ldreq	r3, [r3, #4]
 800397c:	6063      	str	r3, [r4, #4]
 800397e:	bf04      	itt	eq
 8003980:	1809      	addeq	r1, r1, r0
 8003982:	6021      	streq	r1, [r4, #0]
 8003984:	6054      	str	r4, [r2, #4]
 8003986:	e7ca      	b.n	800391e <_free_r+0x22>
 8003988:	bd38      	pop	{r3, r4, r5, pc}
 800398a:	bf00      	nop
 800398c:	20000248 	.word	0x20000248

08003990 <_malloc_usable_size_r>:
 8003990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003994:	1f18      	subs	r0, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	bfbc      	itt	lt
 800399a:	580b      	ldrlt	r3, [r1, r0]
 800399c:	18c0      	addlt	r0, r0, r3
 800399e:	4770      	bx	lr

080039a0 <_init>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr

080039ac <_fini>:
 80039ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ae:	bf00      	nop
 80039b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b2:	bc08      	pop	{r3}
 80039b4:	469e      	mov	lr, r3
 80039b6:	4770      	bx	lr
