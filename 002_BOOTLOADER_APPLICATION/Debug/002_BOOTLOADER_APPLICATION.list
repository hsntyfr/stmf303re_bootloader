
002_BOOTLOADER_APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004024  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080041c4  080041c4  000051c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800434c  0800434c  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800434c  0800434c  0000534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004354  08004354  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004354  08004354  00005354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004358  08004358  00005358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800435c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000304  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000360  20000360  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f63  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b70  00000000  00000000  0000ffef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  00011b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b1  00000000  00000000  000122e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020349  00000000  00000000  00012899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b297  00000000  00000000  00032be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1180  00000000  00000000  0003de79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000feff9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021c8  00000000  00000000  000ff03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00101204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080041ac 	.word	0x080041ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080041ac 	.word	0x080041ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <bl_get_ver_cmd>:
#include "bootloader_command.h"

void bl_get_ver_cmd(uint8_t* bl_rx_data){
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

	uint8_t bl_ver = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	75fb      	strb	r3, [r7, #23]
	print_message("BL_DEBUG_MSG: Bootloader get ver running\n");
 800029c:	4813      	ldr	r0, [pc, #76]	@ (80002ec <bl_get_ver_cmd+0x5c>)
 800029e:	f000 f86d 	bl	800037c <print_message>
	uint32_t cmd_package_length = bl_rx_data[0] + 1;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	613b      	str	r3, [r7, #16]
	uint32_t host_crc = *((uint32_t*)bl_rx_data + cmd_package_length - 4);
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80002b0:	3b04      	subs	r3, #4
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	4413      	add	r3, r2
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	60fb      	str	r3, [r7, #12]

	if(!bootloader_verify_crc(&bl_rx_data[0], cmd_package_length - 4, host_crc)){		//0 ise crc doÄŸru
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	3b04      	subs	r3, #4
 80002c0:	68fa      	ldr	r2, [r7, #12]
 80002c2:	4619      	mov	r1, r3
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f000 f815 	bl	80002f4 <bootloader_verify_crc>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d108      	bne.n	80002e2 <bl_get_ver_cmd+0x52>
		print_message("BL DEBUG MSG: Checksum success\n");
 80002d0:	4807      	ldr	r0, [pc, #28]	@ (80002f0 <bl_get_ver_cmd+0x60>)
 80002d2:	f000 f853 	bl	800037c <print_message>
		bootloader_send_ack(bl_rx_data[0], 1);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2101      	movs	r1, #1
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 f83f 	bl	8000360 <bootloader_send_ack>


	}

}
 80002e2:	bf00      	nop
 80002e4:	3718      	adds	r7, #24
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	080041c4 	.word	0x080041c4
 80002f0:	080041f0 	.word	0x080041f0

080002f4 <bootloader_verify_crc>:



uint8_t bootloader_verify_crc(uint8_t* buffer, uint32_t length, uint32_t crc_host){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b088      	sub	sp, #32
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	607a      	str	r2, [r7, #4]
	uint32_t crc_value = 0xff;
 8000300:	23ff      	movs	r3, #255	@ 0xff
 8000302:	61fb      	str	r3, [r7, #28]
	uint32_t data = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0; i < length; i++){
 8000308:	2300      	movs	r3, #0
 800030a:	61bb      	str	r3, [r7, #24]
 800030c:	e00f      	b.n	800032e <bootloader_verify_crc+0x3a>
		data = buffer[i];
 800030e:	68fa      	ldr	r2, [r7, #12]
 8000310:	69bb      	ldr	r3, [r7, #24]
 8000312:	4413      	add	r3, r2
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	617b      	str	r3, [r7, #20]
		crc_value = HAL_CRC_Accumulate(&hcrc, &data, 1);
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	2201      	movs	r2, #1
 800031e:	4619      	mov	r1, r3
 8000320:	480e      	ldr	r0, [pc, #56]	@ (800035c <bootloader_verify_crc+0x68>)
 8000322:	f000 fd53 	bl	8000dcc <HAL_CRC_Accumulate>
 8000326:	61f8      	str	r0, [r7, #28]
	for(uint32_t i = 0; i < length; i++){
 8000328:	69bb      	ldr	r3, [r7, #24]
 800032a:	3301      	adds	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
 800032e:	69ba      	ldr	r2, [r7, #24]
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	429a      	cmp	r2, r3
 8000334:	d3eb      	bcc.n	800030e <bootloader_verify_crc+0x1a>
	}

	__HAL_CRC_DR_RESET(&hcrc);
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <bootloader_verify_crc+0x68>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	689a      	ldr	r2, [r3, #8]
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <bootloader_verify_crc+0x68>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f042 0201 	orr.w	r2, r2, #1
 8000344:	609a      	str	r2, [r3, #8]
	if(crc_value == crc_host){
 8000346:	69fa      	ldr	r2, [r7, #28]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	429a      	cmp	r2, r3
 800034c:	d101      	bne.n	8000352 <bootloader_verify_crc+0x5e>
		return CRC_SUCCESS;
 800034e:	2300      	movs	r3, #0
 8000350:	e000      	b.n	8000354 <bootloader_verify_crc+0x60>
	}
	else{
		return CRC_FAIL;
 8000352:	2301      	movs	r3, #1
	}


	return 0;
}
 8000354:	4618      	mov	r0, r3
 8000356:	3720      	adds	r7, #32
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000078 	.word	0x20000078

08000360 <bootloader_send_ack>:


void bootloader_send_ack(uint8_t command_code, uint8_t follow_length){
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	460a      	mov	r2, r1
 800036a:	71fb      	strb	r3, [r7, #7]
 800036c:	4613      	mov	r3, r2
 800036e:	71bb      	strb	r3, [r7, #6]

}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <print_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_message(char* format, ...){
 800037c:	b40f      	push	{r0, r1, r2, r3}
 800037e:	b580      	push	{r7, lr}
 8000380:	b09a      	sub	sp, #104	@ 0x68
 8000382:	af00      	add	r7, sp, #0

	char coming_message[100];

	va_list va_list;
	va_start(va_list, format);
 8000384:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000388:	603b      	str	r3, [r7, #0]
	vsprintf(coming_message, format, va_list);
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	683a      	ldr	r2, [r7, #0]
 800038e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000390:	4618      	mov	r0, r3
 8000392:	f003 fa83 	bl	800389c <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)coming_message, strlen(coming_message), HAL_MAX_DELAY);
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff21 	bl	80001e0 <strlen>
 800039e:	4603      	mov	r3, r0
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	1d39      	adds	r1, r7, #4
 80003a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003a8:	4804      	ldr	r0, [pc, #16]	@ (80003bc <print_message+0x40>)
 80003aa:	f002 fd1f 	bl	8002dec <HAL_UART_Transmit>
	va_end(va_list);
}
 80003ae:	bf00      	nop
 80003b0:	3768      	adds	r7, #104	@ 0x68
 80003b2:	46bd      	mov	sp, r7
 80003b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003b8:	b004      	add	sp, #16
 80003ba:	4770      	bx	lr
 80003bc:	2000009c 	.word	0x2000009c

080003c0 <bootloader_uart_read_data>:

void bootloader_uart_read_data() {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
	uint8_t bl_rx_length = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	71fb      	strb	r3, [r7, #7]


	while(1){
		memset(bootloader_rx_data, 0, BL_RX_DATA_LENGTH);
 80003ca:	2264      	movs	r2, #100	@ 0x64
 80003cc:	2100      	movs	r1, #0
 80003ce:	480f      	ldr	r0, [pc, #60]	@ (800040c <bootloader_uart_read_data+0x4c>)
 80003d0:	f003 fa6e 	bl	80038b0 <memset>
		HAL_UART_Receive(&huart3, bootloader_rx_data, 1, HAL_MAX_DELAY);
 80003d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003d8:	2201      	movs	r2, #1
 80003da:	490c      	ldr	r1, [pc, #48]	@ (800040c <bootloader_uart_read_data+0x4c>)
 80003dc:	480c      	ldr	r0, [pc, #48]	@ (8000410 <bootloader_uart_read_data+0x50>)
 80003de:	f002 fd8e 	bl	8002efe <HAL_UART_Receive>
		bl_rx_length = bootloader_rx_data[0];
 80003e2:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <bootloader_uart_read_data+0x4c>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart3, &bootloader_rx_data[1], bl_rx_length, HAL_MAX_DELAY);
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003f0:	4908      	ldr	r1, [pc, #32]	@ (8000414 <bootloader_uart_read_data+0x54>)
 80003f2:	4807      	ldr	r0, [pc, #28]	@ (8000410 <bootloader_uart_read_data+0x50>)
 80003f4:	f002 fd83 	bl	8002efe <HAL_UART_Receive>

		switch (bootloader_rx_data[1]){
 80003f8:	4b04      	ldr	r3, [pc, #16]	@ (800040c <bootloader_uart_read_data+0x4c>)
 80003fa:	785b      	ldrb	r3, [r3, #1]
 80003fc:	2b51      	cmp	r3, #81	@ 0x51
 80003fe:	d103      	bne.n	8000408 <bootloader_uart_read_data+0x48>

		case BL_GET_VER:
			bl_get_ver_cmd(bootloader_rx_data);
 8000400:	4802      	ldr	r0, [pc, #8]	@ (800040c <bootloader_uart_read_data+0x4c>)
 8000402:	f7ff ff45 	bl	8000290 <bl_get_ver_cmd>
			break;
 8000406:	e000      	b.n	800040a <bootloader_uart_read_data+0x4a>

		default:
			break;
 8000408:	bf00      	nop
		memset(bootloader_rx_data, 0, BL_RX_DATA_LENGTH);
 800040a:	e7de      	b.n	80003ca <bootloader_uart_read_data+0xa>
 800040c:	200001ac 	.word	0x200001ac
 8000410:	20000124 	.word	0x20000124
 8000414:	200001ad 	.word	0x200001ad

08000418 <bootloader_jump_to_user_application>:
		}

	}
}

void bootloader_jump_to_user_application() {
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0


	//1- reset handlerin adresini tutan bir metot iÅŸaretÃ§isi
	void (*bootloader_application_reset_handler) (void);
	//2- kullanÄ±cÄ± uygulamasÄ±na atlandÄ±ÄŸÄ±nÄ± ilet
	print_message("BL DEBUG MSG: bootloader_jump_to_user_application called\n");
 800041e:	480d      	ldr	r0, [pc, #52]	@ (8000454 <bootloader_jump_to_user_application+0x3c>)
 8000420:	f7ff ffac 	bl	800037c <print_message>
	//3- MSP'nin deÄŸerini tut
	uint32_t MSP_value = *(volatile uint32_t*) FLASH_SECTOR_2_BASE_ADDRESS;
 8000424:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <bootloader_jump_to_user_application+0x40>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	60fb      	str	r3, [r7, #12]
	uint32_t reset_value = *(volatile uint32_t*) (FLASH_SECTOR_2_BASE_ADDRESS + 4);
 800042a:	4b0c      	ldr	r3, [pc, #48]	@ (800045c <bootloader_jump_to_user_application+0x44>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	60bb      	str	r3, [r7, #8]
	bootloader_application_reset_handler = (void *) reset_value;
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	607b      	str	r3, [r7, #4]
	print_message("BL DEBUG MODE: MSP value: %#x\n", MSP_value);
 8000434:	68f9      	ldr	r1, [r7, #12]
 8000436:	480a      	ldr	r0, [pc, #40]	@ (8000460 <bootloader_jump_to_user_application+0x48>)
 8000438:	f7ff ffa0 	bl	800037c <print_message>
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	f383 8808 	msr	MSP, r3
}
 8000446:	bf00      	nop
	//setmsp den sonra bir metot vb olursa iÅŸlevini yerine getiremeyebilir
	__set_MSP(MSP_value);
	bootloader_application_reset_handler();
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4798      	blx	r3
	bootloader_application_reset_handler = (void *) reset_value;
	print_message("BL DEBUG MODE: reset value: %#x\n", reset_value);
	bootloader_application_reset_handler();*/


}
 800044c:	bf00      	nop
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	08004210 	.word	0x08004210
 8000458:	08008000 	.word	0x08008000
 800045c:	08008004 	.word	0x08008004
 8000460:	0800424c 	.word	0x0800424c

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000468:	f000 fadc 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046c:	f000 f82c 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000470:	f000 f900 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000474:	f000 f89e 	bl	80005b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000478:	f000 f8cc 	bl	8000614 <MX_USART3_UART_Init>
  MX_CRC_Init();
 800047c:	f000 f878 	bl	8000570 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_SET){
 8000480:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000484:	480d      	ldr	r0, [pc, #52]	@ (80004bc <main+0x58>)
 8000486:	f000 ffc7 	bl	8001418 <HAL_GPIO_ReadPin>
 800048a:	4603      	mov	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	d005      	beq.n	800049c <main+0x38>

	  print_message("BL DEBUG MODE: Button is pressed go to BL mode\n");
 8000490:	480b      	ldr	r0, [pc, #44]	@ (80004c0 <main+0x5c>)
 8000492:	f7ff ff73 	bl	800037c <print_message>

	  bootloader_uart_read_data();
 8000496:	f7ff ff93 	bl	80003c0 <bootloader_uart_read_data>
 800049a:	e004      	b.n	80004a6 <main+0x42>

  }
  else {

	  print_message("BL DEBUG MODE: Button is not pressed executing user application\n");
 800049c:	4809      	ldr	r0, [pc, #36]	@ (80004c4 <main+0x60>)
 800049e:	f7ff ff6d 	bl	800037c <print_message>

	  bootloader_jump_to_user_application();
 80004a2:	f7ff ffb9 	bl	8000418 <bootloader_jump_to_user_application>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004a6:	2120      	movs	r1, #32
 80004a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004ac:	f000 ffe4 	bl	8001478 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80004b0:	2064      	movs	r0, #100	@ 0x64
 80004b2:	f000 fb1d 	bl	8000af0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004b6:	bf00      	nop
 80004b8:	e7f5      	b.n	80004a6 <main+0x42>
 80004ba:	bf00      	nop
 80004bc:	48000800 	.word	0x48000800
 80004c0:	0800426c 	.word	0x0800426c
 80004c4:	0800429c 	.word	0x0800429c

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b0a6      	sub	sp, #152	@ 0x98
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80004d2:	2228      	movs	r2, #40	@ 0x28
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 f9ea 	bl	80038b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]
 80004ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2258      	movs	r2, #88	@ 0x58
 80004f0:	2100      	movs	r1, #0
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 f9dc 	bl	80038b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f8:	2302      	movs	r3, #2
 80004fa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fc:	2301      	movs	r3, #1
 80004fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000500:	2310      	movs	r3, #16
 8000502:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000506:	2300      	movs	r3, #0
 8000508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000510:	4618      	mov	r0, r3
 8000512:	f000 ffcb 	bl	80014ac <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800051c:	f000 f904 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	230f      	movs	r3, #15
 8000522:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000524:	2300      	movs	r3, #0
 8000526:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000534:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f001 ffda 	bl	80024f4 <HAL_RCC_ClockConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000546:	f000 f8ef 	bl	8000728 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800054a:	2306      	movs	r3, #6
 800054c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f002 f9dd 	bl	8002918 <HAL_RCCEx_PeriphCLKConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000564:	f000 f8e0 	bl	8000728 <Error_Handler>
  }
}
 8000568:	bf00      	nop
 800056a:	3798      	adds	r7, #152	@ 0x98
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000574:	4b0d      	ldr	r3, [pc, #52]	@ (80005ac <MX_CRC_Init+0x3c>)
 8000576:	4a0e      	ldr	r2, [pc, #56]	@ (80005b0 <MX_CRC_Init+0x40>)
 8000578:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800057a:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <MX_CRC_Init+0x3c>)
 800057c:	2200      	movs	r2, #0
 800057e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000580:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <MX_CRC_Init+0x3c>)
 8000582:	2200      	movs	r2, #0
 8000584:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000586:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <MX_CRC_Init+0x3c>)
 8000588:	2200      	movs	r2, #0
 800058a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800058c:	4b07      	ldr	r3, [pc, #28]	@ (80005ac <MX_CRC_Init+0x3c>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000592:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <MX_CRC_Init+0x3c>)
 8000594:	2201      	movs	r2, #1
 8000596:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000598:	4804      	ldr	r0, [pc, #16]	@ (80005ac <MX_CRC_Init+0x3c>)
 800059a:	f000 fbb3 	bl	8000d04 <HAL_CRC_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005a4:	f000 f8c0 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000078 	.word	0x20000078
 80005b0:	40023000 	.word	0x40023000

080005b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b8:	4b14      	ldr	r3, [pc, #80]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005ba:	4a15      	ldr	r2, [pc, #84]	@ (8000610 <MX_USART2_UART_Init+0x5c>)
 80005bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005be:	4b13      	ldr	r3, [pc, #76]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005c0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80005c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b11      	ldr	r3, [pc, #68]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005f8:	f002 fbaa 	bl	8002d50 <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000602:	f000 f891 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000009c 	.word	0x2000009c
 8000610:	40004400 	.word	0x40004400

08000614 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <MX_USART3_UART_Init+0x58>)
 800061a:	4a15      	ldr	r2, [pc, #84]	@ (8000670 <MX_USART3_UART_Init+0x5c>)
 800061c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <MX_USART3_UART_Init+0x58>)
 8000620:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000624:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_USART3_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <MX_USART3_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_USART3_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <MX_USART3_UART_Init+0x58>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <MX_USART3_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_USART3_UART_Init+0x58>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	@ (800066c <MX_USART3_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_USART3_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	@ (800066c <MX_USART3_UART_Init+0x58>)
 8000658:	f002 fb7a 	bl	8002d50 <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000662:	f000 f861 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000124 	.word	0x20000124
 8000670:	40004800 	.word	0x40004800

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	4b25      	ldr	r3, [pc, #148]	@ (8000720 <MX_GPIO_Init+0xac>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a24      	ldr	r2, [pc, #144]	@ (8000720 <MX_GPIO_Init+0xac>)
 8000690:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000694:	6153      	str	r3, [r2, #20]
 8000696:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <MX_GPIO_Init+0xac>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <MX_GPIO_Init+0xac>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000720 <MX_GPIO_Init+0xac>)
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ac:	6153      	str	r3, [r2, #20]
 80006ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <MX_GPIO_Init+0xac>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <MX_GPIO_Init+0xac>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a18      	ldr	r2, [pc, #96]	@ (8000720 <MX_GPIO_Init+0xac>)
 80006c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_GPIO_Init+0xac>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006da:	f000 feb5 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	4619      	mov	r1, r3
 80006f2:	480c      	ldr	r0, [pc, #48]	@ (8000724 <MX_GPIO_Init+0xb0>)
 80006f4:	f000 fd06 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006f8:	2320      	movs	r3, #32
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000712:	f000 fcf7 	bl	8001104 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000716:	bf00      	nop
 8000718:	3720      	adds	r7, #32
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000
 8000724:	48000800 	.word	0x48000800

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <Error_Handler+0x8>

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <HAL_MspInit+0x44>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a0e      	ldr	r2, [pc, #56]	@ (8000778 <HAL_MspInit+0x44>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <HAL_MspInit+0x44>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <HAL_MspInit+0x44>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a08      	ldr	r2, [pc, #32]	@ (8000778 <HAL_MspInit+0x44>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075c:	61d3      	str	r3, [r2, #28]
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <HAL_MspInit+0x44>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000

0800077c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a0a      	ldr	r2, [pc, #40]	@ (80007b4 <HAL_CRC_MspInit+0x38>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d10b      	bne.n	80007a6 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_CRC_MspInit+0x3c>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a09      	ldr	r2, [pc, #36]	@ (80007b8 <HAL_CRC_MspInit+0x3c>)
 8000794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <HAL_CRC_MspInit+0x3c>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023000 	.word	0x40023000
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	@ 0x30
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a3d      	ldr	r2, [pc, #244]	@ (80008d0 <HAL_UART_MspInit+0x114>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d145      	bne.n	800086a <HAL_UART_MspInit+0xae>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007de:	4b3d      	ldr	r3, [pc, #244]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a3c      	ldr	r2, [pc, #240]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b3a      	ldr	r3, [pc, #232]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	4b37      	ldr	r3, [pc, #220]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a36      	ldr	r2, [pc, #216]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b34      	ldr	r3, [pc, #208]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a30      	ldr	r2, [pc, #192]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 8000814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b2e      	ldr	r3, [pc, #184]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000826:	2308      	movs	r3, #8
 8000828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000836:	2307      	movs	r3, #7
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000844:	f000 fc5e 	bl	8001104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000848:	2308      	movs	r3, #8
 800084a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000854:	2303      	movs	r3, #3
 8000856:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000858:	2307      	movs	r3, #7
 800085a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	481d      	ldr	r0, [pc, #116]	@ (80008d8 <HAL_UART_MspInit+0x11c>)
 8000864:	f000 fc4e 	bl	8001104 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000868:	e02d      	b.n	80008c6 <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART3)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <HAL_UART_MspInit+0x120>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d128      	bne.n	80008c6 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000874:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 8000876:	69db      	ldr	r3, [r3, #28]
 8000878:	4a16      	ldr	r2, [pc, #88]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 800087a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800087e:	61d3      	str	r3, [r2, #28]
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	4a10      	ldr	r2, [pc, #64]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 8000892:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000896:	6153      	str	r3, [r2, #20]
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <HAL_UART_MspInit+0x118>)
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008a4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80008a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008b6:	2307      	movs	r3, #7
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <HAL_UART_MspInit+0x11c>)
 80008c2:	f000 fc1f 	bl	8001104 <HAL_GPIO_Init>
}
 80008c6:	bf00      	nop
 80008c8:	3730      	adds	r7, #48	@ 0x30
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40004400 	.word	0x40004400
 80008d4:	40021000 	.word	0x40021000
 80008d8:	48000400 	.word	0x48000400
 80008dc:	40004800 	.word	0x40004800

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <NMI_Handler+0x4>

080008e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <MemManage_Handler+0x4>

080008f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <UsageFault_Handler+0x4>

08000908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000936:	f000 f8bb 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000948:	4a14      	ldr	r2, [pc, #80]	@ (800099c <_sbrk+0x5c>)
 800094a:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <_sbrk+0x60>)
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000954:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d102      	bne.n	8000962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <_sbrk+0x64>)
 800095e:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <_sbrk+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <_sbrk+0x64>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	429a      	cmp	r2, r3
 800096e:	d207      	bcs.n	8000980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000970:	f002 ffa6 	bl	80038c0 <__errno>
 8000974:	4603      	mov	r3, r0
 8000976:	220c      	movs	r2, #12
 8000978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800097e:	e009      	b.n	8000994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000980:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000986:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	4a05      	ldr	r2, [pc, #20]	@ (80009a4 <_sbrk+0x64>)
 8000990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20010000 	.word	0x20010000
 80009a0:	00000400 	.word	0x00000400
 80009a4:	20000210 	.word	0x20000210
 80009a8:	20000360 	.word	0x20000360

080009ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <SystemInit+0x20>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009b6:	4a05      	ldr	r2, [pc, #20]	@ (80009cc <SystemInit+0x20>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a08 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d4:	f7ff ffea 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d8:	480c      	ldr	r0, [pc, #48]	@ (8000a0c <LoopForever+0x6>)
  ldr r1, =_edata
 80009da:	490d      	ldr	r1, [pc, #52]	@ (8000a10 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a14 <LoopForever+0xe>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e0:	e002      	b.n	80009e8 <LoopCopyDataInit>

080009e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009e6:	3304      	adds	r3, #4

080009e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009ec:	d3f9      	bcc.n	80009e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f0:	4c0a      	ldr	r4, [pc, #40]	@ (8000a1c <LoopForever+0x16>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f4:	e001      	b.n	80009fa <LoopFillZerobss>

080009f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f8:	3204      	adds	r2, #4

080009fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009fc:	d3fb      	bcc.n	80009f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009fe:	f002 ff65 	bl	80038cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a02:	f7ff fd2f 	bl	8000464 <main>

08000a06 <LoopForever>:

LoopForever:
    b LoopForever
 8000a06:	e7fe      	b.n	8000a06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a10:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a14:	0800435c 	.word	0x0800435c
  ldr r2, =_sbss
 8000a18:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a1c:	20000360 	.word	0x20000360

08000a20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC1_2_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_Init+0x28>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	@ (8000a4c <HAL_Init+0x28>)
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f931 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	200f      	movs	r0, #15
 8000a3c:	f000 f808 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff fe78 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40022000 	.word	0x40022000

08000a50 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f93b 	bl	8000cea <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a8c:	f000 f911 	bl	8000cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	@ (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	@ (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000214 	.word	0x20000214

08000ad8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;  
 8000adc:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	20000214 	.word	0x20000214

08000af0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff ffee 	bl	8000ad8 <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffde 	bl	8000ad8 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff47 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff5c 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffb0 	bl	8000c58 <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e054      	b.n	8000dc0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7f5b      	ldrb	r3, [r3, #29]
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d105      	bne.n	8000d2c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fd28 	bl	800077c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2202      	movs	r2, #2
 8000d30:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	791b      	ldrb	r3, [r3, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10c      	bne.n	8000d54 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a22      	ldr	r2, [pc, #136]	@ (8000dc8 <HAL_CRC_Init+0xc4>)
 8000d40:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0218 	bic.w	r2, r2, #24
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	e00c      	b.n	8000d6e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6899      	ldr	r1, [r3, #8]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f942 	bl	8000fe8 <HAL_CRCEx_Polynomial_Set>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e028      	b.n	8000dc0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	795b      	ldrb	r3, [r3, #5]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d105      	bne.n	8000d82 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	e004      	b.n	8000d8c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6912      	ldr	r2, [r2, #16]
 8000d8a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	695a      	ldr	r2, [r3, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	699a      	ldr	r2, [r3, #24]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	430a      	orrs	r2, r1
 8000db6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	04c11db7 	.word	0x04c11db7

08000dcc <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2202      	movs	r2, #2
 8000de0:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d006      	beq.n	8000df8 <HAL_CRC_Accumulate+0x2c>
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d829      	bhi.n	8000e42 <HAL_CRC_Accumulate+0x76>
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d019      	beq.n	8000e26 <HAL_CRC_Accumulate+0x5a>
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d01e      	beq.n	8000e34 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8000df6:	e024      	b.n	8000e42 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	e00a      	b.n	8000e14 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	441a      	add	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6812      	ldr	r2, [r2, #0]
 8000e0c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3f0      	bcc.n	8000dfe <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	613b      	str	r3, [r7, #16]
      break;
 8000e24:	e00e      	b.n	8000e44 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	68f8      	ldr	r0, [r7, #12]
 8000e2c:	f000 f812 	bl	8000e54 <CRC_Handle_8>
 8000e30:	6138      	str	r0, [r7, #16]
      break;
 8000e32:	e007      	b.n	8000e44 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f000 f89b 	bl	8000f74 <CRC_Handle_16>
 8000e3e:	6138      	str	r0, [r7, #16]
      break;
 8000e40:	e000      	b.n	8000e44 <HAL_CRC_Accumulate+0x78>
      break;
 8000e42:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2201      	movs	r2, #1
 8000e48:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8000e4a:	693b      	ldr	r3, [r7, #16]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	@ 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	e023      	b.n	8000eae <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	3301      	adds	r3, #1
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	440b      	add	r3, r1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000e80:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	3302      	adds	r3, #2
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	440b      	add	r3, r1
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8000e90:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	3303      	adds	r3, #3
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	440b      	add	r3, r1
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8000ea4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000ea6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d3d6      	bcc.n	8000e66 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d04f      	beq.n	8000f62 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d107      	bne.n	8000edc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	6812      	ldr	r2, [r2, #0]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d117      	bne.n	8000f16 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	4413      	add	r3, r2
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	3301      	adds	r3, #1
 8000efc:	68b9      	ldr	r1, [r7, #8]
 8000efe:	440b      	add	r3, r1
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b21b      	sxth	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	8b7a      	ldrh	r2, [r7, #26]
 8000f14:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d120      	bne.n	8000f62 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	4413      	add	r3, r2
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	3301      	adds	r3, #1
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	440b      	add	r3, r1
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	8b7a      	ldrh	r2, [r7, #26]
 8000f4e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	4413      	add	r3, r2
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3724      	adds	r7, #36	@ 0x24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	e013      	b.n	8000fae <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	440b      	add	r3, r1
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	085b      	lsrs	r3, r3, #1
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3e6      	bcc.n	8000f86 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d009      	beq.n	8000fd6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	4413      	add	r3, r2
 8000fd0:	881a      	ldrh	r2, [r3, #0]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000ff8:	231f      	movs	r3, #31
 8000ffa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	75fb      	strb	r3, [r7, #23]
 800100a:	e063      	b.n	80010d4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800100c:	bf00      	nop
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	613a      	str	r2, [r7, #16]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d009      	beq.n	800102c <HAL_CRCEx_Polynomial_Set+0x44>
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	fa22 f303 	lsr.w	r3, r2, r3
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f0      	beq.n	800100e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b18      	cmp	r3, #24
 8001030:	d846      	bhi.n	80010c0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001032:	a201      	add	r2, pc, #4	@ (adr r2, 8001038 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	080010c7 	.word	0x080010c7
 800103c:	080010c1 	.word	0x080010c1
 8001040:	080010c1 	.word	0x080010c1
 8001044:	080010c1 	.word	0x080010c1
 8001048:	080010c1 	.word	0x080010c1
 800104c:	080010c1 	.word	0x080010c1
 8001050:	080010c1 	.word	0x080010c1
 8001054:	080010c1 	.word	0x080010c1
 8001058:	080010b5 	.word	0x080010b5
 800105c:	080010c1 	.word	0x080010c1
 8001060:	080010c1 	.word	0x080010c1
 8001064:	080010c1 	.word	0x080010c1
 8001068:	080010c1 	.word	0x080010c1
 800106c:	080010c1 	.word	0x080010c1
 8001070:	080010c1 	.word	0x080010c1
 8001074:	080010c1 	.word	0x080010c1
 8001078:	080010a9 	.word	0x080010a9
 800107c:	080010c1 	.word	0x080010c1
 8001080:	080010c1 	.word	0x080010c1
 8001084:	080010c1 	.word	0x080010c1
 8001088:	080010c1 	.word	0x080010c1
 800108c:	080010c1 	.word	0x080010c1
 8001090:	080010c1 	.word	0x080010c1
 8001094:	080010c1 	.word	0x080010c1
 8001098:	0800109d 	.word	0x0800109d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d913      	bls.n	80010ca <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010a6:	e010      	b.n	80010ca <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	2b07      	cmp	r3, #7
 80010ac:	d90f      	bls.n	80010ce <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010b2:	e00c      	b.n	80010ce <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	d90b      	bls.n	80010d2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010be:	e008      	b.n	80010d2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	75fb      	strb	r3, [r7, #23]
        break;
 80010c4:	e006      	b.n	80010d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010c6:	bf00      	nop
 80010c8:	e004      	b.n	80010d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010ca:	bf00      	nop
 80010cc:	e002      	b.n	80010d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010ce:	bf00      	nop
 80010d0:	e000      	b.n	80010d4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010d2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10d      	bne.n	80010f6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f023 0118 	bic.w	r1, r3, #24
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80010f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001112:	e160      	b.n	80013d6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	4013      	ands	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8152 	beq.w	80013d0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d005      	beq.n	8001144 <HAL_GPIO_Init+0x40>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d130      	bne.n	80011a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117a:	2201      	movs	r2, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	f003 0201 	and.w	r2, r3, #1
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d017      	beq.n	80011e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d123      	bne.n	8001236 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	6939      	ldr	r1, [r7, #16]
 8001232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0203 	and.w	r2, r3, #3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80ac 	beq.w	80013d0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001278:	4b5e      	ldr	r3, [pc, #376]	@ (80013f4 <HAL_GPIO_Init+0x2f0>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a5d      	ldr	r2, [pc, #372]	@ (80013f4 <HAL_GPIO_Init+0x2f0>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b5b      	ldr	r3, [pc, #364]	@ (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001290:	4a59      	ldr	r2, [pc, #356]	@ (80013f8 <HAL_GPIO_Init+0x2f4>)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012ba:	d025      	beq.n	8001308 <HAL_GPIO_Init+0x204>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a4f      	ldr	r2, [pc, #316]	@ (80013fc <HAL_GPIO_Init+0x2f8>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d01f      	beq.n	8001304 <HAL_GPIO_Init+0x200>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a4e      	ldr	r2, [pc, #312]	@ (8001400 <HAL_GPIO_Init+0x2fc>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d019      	beq.n	8001300 <HAL_GPIO_Init+0x1fc>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001404 <HAL_GPIO_Init+0x300>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d013      	beq.n	80012fc <HAL_GPIO_Init+0x1f8>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001408 <HAL_GPIO_Init+0x304>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d00d      	beq.n	80012f8 <HAL_GPIO_Init+0x1f4>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a4b      	ldr	r2, [pc, #300]	@ (800140c <HAL_GPIO_Init+0x308>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d007      	beq.n	80012f4 <HAL_GPIO_Init+0x1f0>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001410 <HAL_GPIO_Init+0x30c>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d101      	bne.n	80012f0 <HAL_GPIO_Init+0x1ec>
 80012ec:	2306      	movs	r3, #6
 80012ee:	e00c      	b.n	800130a <HAL_GPIO_Init+0x206>
 80012f0:	2307      	movs	r3, #7
 80012f2:	e00a      	b.n	800130a <HAL_GPIO_Init+0x206>
 80012f4:	2305      	movs	r3, #5
 80012f6:	e008      	b.n	800130a <HAL_GPIO_Init+0x206>
 80012f8:	2304      	movs	r3, #4
 80012fa:	e006      	b.n	800130a <HAL_GPIO_Init+0x206>
 80012fc:	2303      	movs	r3, #3
 80012fe:	e004      	b.n	800130a <HAL_GPIO_Init+0x206>
 8001300:	2302      	movs	r3, #2
 8001302:	e002      	b.n	800130a <HAL_GPIO_Init+0x206>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_GPIO_Init+0x206>
 8001308:	2300      	movs	r3, #0
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	f002 0203 	and.w	r2, r2, #3
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	4093      	lsls	r3, r2
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800131a:	4937      	ldr	r1, [pc, #220]	@ (80013f8 <HAL_GPIO_Init+0x2f4>)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001328:	4b3a      	ldr	r3, [pc, #232]	@ (8001414 <HAL_GPIO_Init+0x310>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800134c:	4a31      	ldr	r2, [pc, #196]	@ (8001414 <HAL_GPIO_Init+0x310>)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001352:	4b30      	ldr	r3, [pc, #192]	@ (8001414 <HAL_GPIO_Init+0x310>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001376:	4a27      	ldr	r2, [pc, #156]	@ (8001414 <HAL_GPIO_Init+0x310>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800137c:	4b25      	ldr	r3, [pc, #148]	@ (8001414 <HAL_GPIO_Init+0x310>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <HAL_GPIO_Init+0x310>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_GPIO_Init+0x310>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013ca:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <HAL_GPIO_Init+0x310>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f47f ae97 	bne.w	8001114 <HAL_GPIO_Init+0x10>
  }
}
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
 80013ea:	371c      	adds	r7, #28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	48000400 	.word	0x48000400
 8001400:	48000800 	.word	0x48000800
 8001404:	48000c00 	.word	0x48000c00
 8001408:	48001000 	.word	0x48001000
 800140c:	48001400 	.word	0x48001400
 8001410:	48001800 	.word	0x48001800
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691a      	ldr	r2, [r3, #16]
 8001428:	887b      	ldrh	r3, [r7, #2]
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001430:	2301      	movs	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
 8001434:	e001      	b.n	800143a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001464:	e002      	b.n	800146c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4013      	ands	r3, r2
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43d9      	mvns	r1, r3
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	400b      	ands	r3, r1
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014bc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f001 b80a 	b.w	80024e6 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 8161 	beq.w	80017aa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014e8:	4bae      	ldr	r3, [pc, #696]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	d00c      	beq.n	800150e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014f4:	4bab      	ldr	r3, [pc, #684]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d157      	bne.n	80015b0 <HAL_RCC_OscConfig+0x104>
 8001500:	4ba8      	ldr	r3, [pc, #672]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800150c:	d150      	bne.n	80015b0 <HAL_RCC_OscConfig+0x104>
 800150e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001512:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800151a:	fa93 f3a3 	rbit	r3, r3
 800151e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001522:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b3f      	cmp	r3, #63	@ 0x3f
 800152e:	d802      	bhi.n	8001536 <HAL_RCC_OscConfig+0x8a>
 8001530:	4b9c      	ldr	r3, [pc, #624]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	e015      	b.n	8001562 <HAL_RCC_OscConfig+0xb6>
 8001536:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800153a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800154a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800154e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001552:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001556:	fa93 f3a3 	rbit	r3, r3
 800155a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800155e:	4b91      	ldr	r3, [pc, #580]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 8001560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001562:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001566:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800156a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800156e:	fa92 f2a2 	rbit	r2, r2
 8001572:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001576:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800157a:	fab2 f282 	clz	r2, r2
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	f042 0220 	orr.w	r2, r2, #32
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	f002 021f 	and.w	r2, r2, #31
 800158a:	2101      	movs	r1, #1
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	4013      	ands	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8108 	beq.w	80017a8 <HAL_RCC_OscConfig+0x2fc>
 8001598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800159c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f040 80ff 	bne.w	80017a8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f000 bf9b 	b.w	80024e6 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x124>
 80015c2:	4b78      	ldr	r3, [pc, #480]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a77      	ldr	r2, [pc, #476]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e036      	b.n	800163e <HAL_RCC_OscConfig+0x192>
 80015d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0x14e>
 80015e0:	4b70      	ldr	r3, [pc, #448]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a6f      	ldr	r2, [pc, #444]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 80015e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b6d      	ldr	r3, [pc, #436]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a6c      	ldr	r2, [pc, #432]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 80015f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e021      	b.n	800163e <HAL_RCC_OscConfig+0x192>
 80015fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800160a:	d10c      	bne.n	8001626 <HAL_RCC_OscConfig+0x17a>
 800160c:	4b65      	ldr	r3, [pc, #404]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a64      	ldr	r2, [pc, #400]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 8001612:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	4b62      	ldr	r3, [pc, #392]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a61      	ldr	r2, [pc, #388]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 800161e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e00b      	b.n	800163e <HAL_RCC_OscConfig+0x192>
 8001626:	4b5f      	ldr	r3, [pc, #380]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5e      	ldr	r2, [pc, #376]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 800162c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	4b5c      	ldr	r3, [pc, #368]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a5b      	ldr	r2, [pc, #364]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 8001638:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800163c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800163e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001642:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d054      	beq.n	80016f8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fa43 	bl	8000ad8 <HAL_GetTick>
 8001652:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	e00a      	b.n	800166e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fa3e 	bl	8000ad8 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b64      	cmp	r3, #100	@ 0x64
 8001666:	d902      	bls.n	800166e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	f000 bf3c 	b.w	80024e6 <HAL_RCC_OscConfig+0x103a>
 800166e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001672:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001682:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b3f      	cmp	r3, #63	@ 0x3f
 800168e:	d802      	bhi.n	8001696 <HAL_RCC_OscConfig+0x1ea>
 8001690:	4b44      	ldr	r3, [pc, #272]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	e015      	b.n	80016c2 <HAL_RCC_OscConfig+0x216>
 8001696:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800169a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80016aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016ae:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80016b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80016be:	4b39      	ldr	r3, [pc, #228]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016c6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80016ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80016ce:	fa92 f2a2 	rbit	r2, r2
 80016d2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80016d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80016da:	fab2 f282 	clz	r2, r2
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	f042 0220 	orr.w	r2, r2, #32
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	f002 021f 	and.w	r2, r2, #31
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f202 	lsl.w	r2, r1, r2
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0b0      	beq.n	8001658 <HAL_RCC_OscConfig+0x1ac>
 80016f6:	e058      	b.n	80017aa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff f9ee 	bl	8000ad8 <HAL_GetTick>
 80016fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001702:	f7ff f9e9 	bl	8000ad8 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	@ 0x64
 8001710:	d902      	bls.n	8001718 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	f000 bee7 	b.w	80024e6 <HAL_RCC_OscConfig+0x103a>
 8001718:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800171c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800172c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001730:	fab3 f383 	clz	r3, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b3f      	cmp	r3, #63	@ 0x3f
 8001738:	d802      	bhi.n	8001740 <HAL_RCC_OscConfig+0x294>
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	e015      	b.n	800176c <HAL_RCC_OscConfig+0x2c0>
 8001740:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001744:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001748:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800174c:	fa93 f3a3 	rbit	r3, r3
 8001750:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001754:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001758:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800175c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001760:	fa93 f3a3 	rbit	r3, r3
 8001764:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001768:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <HAL_RCC_OscConfig+0x2f8>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001770:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001774:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001778:	fa92 f2a2 	rbit	r2, r2
 800177c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001780:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001784:	fab2 f282 	clz	r2, r2
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	f042 0220 	orr.w	r2, r2, #32
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	f002 021f 	and.w	r2, r2, #31
 8001794:	2101      	movs	r1, #1
 8001796:	fa01 f202 	lsl.w	r2, r1, r2
 800179a:	4013      	ands	r3, r2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1b0      	bne.n	8001702 <HAL_RCC_OscConfig+0x256>
 80017a0:	e003      	b.n	80017aa <HAL_RCC_OscConfig+0x2fe>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 816d 	beq.w	8001a9a <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017c0:	4bcd      	ldr	r3, [pc, #820]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d00c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017cc:	4bca      	ldr	r3, [pc, #808]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d16e      	bne.n	80018b6 <HAL_RCC_OscConfig+0x40a>
 80017d8:	4bc7      	ldr	r3, [pc, #796]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80017e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017e4:	d167      	bne.n	80018b6 <HAL_RCC_OscConfig+0x40a>
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80017f0:	fa93 f3a3 	rbit	r3, r3
 80017f4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80017f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b3f      	cmp	r3, #63	@ 0x3f
 8001804:	d802      	bhi.n	800180c <HAL_RCC_OscConfig+0x360>
 8001806:	4bbc      	ldr	r3, [pc, #752]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	e013      	b.n	8001834 <HAL_RCC_OscConfig+0x388>
 800180c:	2302      	movs	r3, #2
 800180e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001816:	fa93 f3a3 	rbit	r3, r3
 800181a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800181e:	2302      	movs	r3, #2
 8001820:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001824:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001830:	4bb1      	ldr	r3, [pc, #708]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	2202      	movs	r2, #2
 8001836:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800183a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800183e:	fa92 f2a2 	rbit	r2, r2
 8001842:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001846:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800184a:	fab2 f282 	clz	r2, r2
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	f042 0220 	orr.w	r2, r2, #32
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	f002 021f 	and.w	r2, r2, #31
 800185a:	2101      	movs	r1, #1
 800185c:	fa01 f202 	lsl.w	r2, r1, r2
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00a      	beq.n	800187c <HAL_RCC_OscConfig+0x3d0>
 8001866:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800186a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d002      	beq.n	800187c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	f000 be35 	b.w	80024e6 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b9e      	ldr	r3, [pc, #632]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001888:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	21f8      	movs	r1, #248	@ 0xf8
 8001892:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800189a:	fa91 f1a1 	rbit	r1, r1
 800189e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80018a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80018a6:	fab1 f181 	clz	r1, r1
 80018aa:	b2c9      	uxtb	r1, r1
 80018ac:	408b      	lsls	r3, r1
 80018ae:	4992      	ldr	r1, [pc, #584]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b4:	e0f1      	b.n	8001a9a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 8083 	beq.w	80019ce <HAL_RCC_OscConfig+0x522>
 80018c8:	2301      	movs	r3, #1
 80018ca:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ce:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80018da:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	461a      	mov	r2, r3
 80018f0:	2301      	movs	r3, #1
 80018f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff f8f0 	bl	8000ad8 <HAL_GetTick>
 80018f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff f8eb 	bl	8000ad8 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d902      	bls.n	8001914 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	f000 bde9 	b.w	80024e6 <HAL_RCC_OscConfig+0x103a>
 8001914:	2302      	movs	r3, #2
 8001916:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001926:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b3f      	cmp	r3, #63	@ 0x3f
 8001932:	d802      	bhi.n	800193a <HAL_RCC_OscConfig+0x48e>
 8001934:	4b70      	ldr	r3, [pc, #448]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e013      	b.n	8001962 <HAL_RCC_OscConfig+0x4b6>
 800193a:	2302      	movs	r3, #2
 800193c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800194c:	2302      	movs	r3, #2
 800194e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001952:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800195e:	4b66      	ldr	r3, [pc, #408]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	2202      	movs	r2, #2
 8001964:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001968:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800196c:	fa92 f2a2 	rbit	r2, r2
 8001970:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001974:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001978:	fab2 f282 	clz	r2, r2
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	f042 0220 	orr.w	r2, r2, #32
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f002 021f 	and.w	r2, r2, #31
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f202 	lsl.w	r2, r1, r2
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0b4      	beq.n	80018fe <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b58      	ldr	r3, [pc, #352]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800199c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	21f8      	movs	r1, #248	@ 0xf8
 80019aa:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ae:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80019b2:	fa91 f1a1 	rbit	r1, r1
 80019b6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80019ba:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80019be:	fab1 f181 	clz	r1, r1
 80019c2:	b2c9      	uxtb	r1, r1
 80019c4:	408b      	lsls	r3, r1
 80019c6:	494c      	ldr	r1, [pc, #304]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e065      	b.n	8001a9a <HAL_RCC_OscConfig+0x5ee>
 80019ce:	2301      	movs	r3, #1
 80019d0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80019e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019ee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	461a      	mov	r2, r3
 80019f6:	2300      	movs	r3, #0
 80019f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff f86d 	bl	8000ad8 <HAL_GetTick>
 80019fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff f868 	bl	8000ad8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d902      	bls.n	8001a1a <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	f000 bd66 	b.w	80024e6 <HAL_RCC_OscConfig+0x103a>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001a2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a38:	d802      	bhi.n	8001a40 <HAL_RCC_OscConfig+0x594>
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	e013      	b.n	8001a68 <HAL_RCC_OscConfig+0x5bc>
 8001a40:	2302      	movs	r3, #2
 8001a42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001a4a:	fa93 f3a3 	rbit	r3, r3
 8001a4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001a52:	2302      	movs	r3, #2
 8001a54:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a58:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a64:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <HAL_RCC_OscConfig+0x64c>)
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	2202      	movs	r2, #2
 8001a6a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001a6e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a72:	fa92 f2a2 	rbit	r2, r2
 8001a76:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001a7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a7e:	fab2 f282 	clz	r2, r2
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	f042 0220 	orr.w	r2, r2, #32
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	f002 021f 	and.w	r2, r2, #31
 8001a8e:	2101      	movs	r1, #1
 8001a90:	fa01 f202 	lsl.w	r2, r1, r2
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1b4      	bne.n	8001a04 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8119 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 8082 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x71a>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001acc:	fa93 f3a3 	rbit	r3, r3
 8001ad0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001ad4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad8:	fab3 f383 	clz	r3, r3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_RCC_OscConfig+0x650>)
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2301      	movs	r3, #1
 8001aea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7fe fff4 	bl	8000ad8 <HAL_GetTick>
 8001af0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af4:	e00f      	b.n	8001b16 <HAL_RCC_OscConfig+0x66a>
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b00:	f7fe ffea 	bl	8000ad8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d902      	bls.n	8001b16 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	f000 bce8 	b.w	80024e6 <HAL_RCC_OscConfig+0x103a>
 8001b16:	2302      	movs	r3, #2
 8001b18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001b20:	fa93 f2a3 	rbit	r2, r3
 8001b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b28:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b36:	2202      	movs	r2, #2
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b56:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b62:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	fa93 f2a3 	rbit	r2, r3
 8001b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b70:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b76:	4bb0      	ldr	r3, [pc, #704]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001b78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b82:	2102      	movs	r1, #2
 8001b84:	6019      	str	r1, [r3, #0]
 8001b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	fa93 f1a3 	rbit	r1, r3
 8001b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b9c:	6019      	str	r1, [r3, #0]
  return result;
 8001b9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d09d      	beq.n	8001b00 <HAL_RCC_OscConfig+0x654>
 8001bc4:	e08d      	b.n	8001ce2 <HAL_RCC_OscConfig+0x836>
 8001bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001be8:	601a      	str	r2, [r3, #0]
  return result;
 8001bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001bf2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8001e3c <HAL_RCC_OscConfig+0x990>)
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	461a      	mov	r2, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c08:	f7fe ff66 	bl	8000ad8 <HAL_GetTick>
 8001c0c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c12:	f7fe ff61 	bl	8000ad8 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d902      	bls.n	8001c28 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	f000 bc5f 	b.w	80024e6 <HAL_RCC_OscConfig+0x103a>
 8001c28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c30:	2202      	movs	r2, #2
 8001c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c38:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fa93 f2a3 	rbit	r2, r3
 8001c42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c46:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c54:	2202      	movs	r2, #2
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fa93 f2a3 	rbit	r2, r3
 8001c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c74:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c78:	2202      	movs	r2, #2
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c80:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	fa93 f2a3 	rbit	r2, r3
 8001c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	4b68      	ldr	r3, [pc, #416]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001c96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	6019      	str	r1, [r3, #0]
 8001ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	fa93 f1a3 	rbit	r1, r3
 8001cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001cba:	6019      	str	r1, [r3, #0]
  return result;
 8001cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	fab3 f383 	clz	r3, r3
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d197      	bne.n	8001c12 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 819c 	beq.w	8002030 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b4e      	ldr	r3, [pc, #312]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d116      	bne.n	8001d38 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b48      	ldr	r3, [pc, #288]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001d1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d30:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4b41      	ldr	r3, [pc, #260]	@ (8001e40 <HAL_RCC_OscConfig+0x994>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d11a      	bne.n	8001d7a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d44:	4b3e      	ldr	r3, [pc, #248]	@ (8001e40 <HAL_RCC_OscConfig+0x994>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a3d      	ldr	r2, [pc, #244]	@ (8001e40 <HAL_RCC_OscConfig+0x994>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d50:	f7fe fec2 	bl	8000ad8 <HAL_GetTick>
 8001d54:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	e009      	b.n	8001d6e <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5a:	f7fe febd 	bl	8000ad8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	@ 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e3bb      	b.n	80024e6 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b34      	ldr	r3, [pc, #208]	@ (8001e40 <HAL_RCC_OscConfig+0x994>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0ef      	beq.n	8001d5a <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_OscConfig+0x8ec>
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	e035      	b.n	8001e04 <HAL_RCC_OscConfig+0x958>
 8001d98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x916>
 8001da8:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4a22      	ldr	r2, [pc, #136]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	4b20      	ldr	r3, [pc, #128]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001dba:	f023 0304 	bic.w	r3, r3, #4
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	e020      	b.n	8001e04 <HAL_RCC_OscConfig+0x958>
 8001dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x940>
 8001dd2:	4b19      	ldr	r3, [pc, #100]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a18      	ldr	r2, [pc, #96]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6213      	str	r3, [r2, #32]
 8001dde:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4a15      	ldr	r2, [pc, #84]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6213      	str	r3, [r2, #32]
 8001dea:	e00b      	b.n	8001e04 <HAL_RCC_OscConfig+0x958>
 8001dec:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a11      	ldr	r2, [pc, #68]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	@ (8001e38 <HAL_RCC_OscConfig+0x98c>)
 8001dfe:	f023 0304 	bic.w	r3, r3, #4
 8001e02:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8085 	beq.w	8001f20 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e16:	f7fe fe5f 	bl	8000ad8 <HAL_GetTick>
 8001e1a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1e:	e011      	b.n	8001e44 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7fe fe5a 	bl	8000ad8 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d907      	bls.n	8001e44 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e356      	b.n	80024e6 <HAL_RCC_OscConfig+0x103a>
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	10908120 	.word	0x10908120
 8001e40:	40007000 	.word	0x40007000
 8001e44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e48:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e54:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fa93 f2a3 	rbit	r2, r3
 8001e5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e62:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e70:	2202      	movs	r2, #2
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e78:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fa93 f2a3 	rbit	r2, r3
 8001e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e86:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e8a:	601a      	str	r2, [r3, #0]
  return result;
 8001e8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e90:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <HAL_RCC_OscConfig+0xa00>
 8001ea6:	4b98      	ldr	r3, [pc, #608]	@ (8002108 <HAL_RCC_OscConfig+0xc5c>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	e013      	b.n	8001ed4 <HAL_RCC_OscConfig+0xa28>
 8001eac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eb0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ebc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	fa93 f2a3 	rbit	r2, r3
 8001ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eca:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	4b8d      	ldr	r3, [pc, #564]	@ (8002108 <HAL_RCC_OscConfig+0xc5c>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ed8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001edc:	2102      	movs	r1, #2
 8001ede:	6011      	str	r1, [r2, #0]
 8001ee0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ee4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	fa92 f1a2 	rbit	r1, r2
 8001eee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ef2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001ef6:	6011      	str	r1, [r2, #0]
  return result;
 8001ef8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001efc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	fab2 f282 	clz	r2, r2
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f002 021f 	and.w	r2, r2, #31
 8001f12:	2101      	movs	r1, #1
 8001f14:	fa01 f202 	lsl.w	r2, r1, r2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d080      	beq.n	8001e20 <HAL_RCC_OscConfig+0x974>
 8001f1e:	e07d      	b.n	800201c <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f20:	f7fe fdda 	bl	8000ad8 <HAL_GetTick>
 8001f24:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f28:	e00b      	b.n	8001f42 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7fe fdd5 	bl	8000ad8 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e2d1      	b.n	80024e6 <HAL_RCC_OscConfig+0x103a>
 8001f42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f46:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f52:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	fa93 f2a3 	rbit	r2, r3
 8001f5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f60:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f6e:	2202      	movs	r2, #2
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f76:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	fa93 f2a3 	rbit	r2, r3
 8001f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f84:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f88:	601a      	str	r2, [r3, #0]
  return result;
 8001f8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f8e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f92:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <HAL_RCC_OscConfig+0xafe>
 8001fa4:	4b58      	ldr	r3, [pc, #352]	@ (8002108 <HAL_RCC_OscConfig+0xc5c>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	e013      	b.n	8001fd2 <HAL_RCC_OscConfig+0xb26>
 8001faa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fae:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fba:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	fa93 f2a3 	rbit	r2, r3
 8001fc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	4b4e      	ldr	r3, [pc, #312]	@ (8002108 <HAL_RCC_OscConfig+0xc5c>)
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fd6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fda:	2102      	movs	r1, #2
 8001fdc:	6011      	str	r1, [r2, #0]
 8001fde:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fe2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	fa92 f1a2 	rbit	r1, r2
 8001fec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ff0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001ff4:	6011      	str	r1, [r2, #0]
  return result;
 8001ff6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ffa:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	fab2 f282 	clz	r2, r2
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	f002 021f 	and.w	r2, r2, #31
 8002010:	2101      	movs	r1, #1
 8002012:	fa01 f202 	lsl.w	r2, r1, r2
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d186      	bne.n	8001f2a <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800201c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b38      	ldr	r3, [pc, #224]	@ (8002108 <HAL_RCC_OscConfig+0xc5c>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	4a37      	ldr	r2, [pc, #220]	@ (8002108 <HAL_RCC_OscConfig+0xc5c>)
 800202a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800202e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002034:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 8251 	beq.w	80024e4 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002042:	4b31      	ldr	r3, [pc, #196]	@ (8002108 <HAL_RCC_OscConfig+0xc5c>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b08      	cmp	r3, #8
 800204c:	f000 820f 	beq.w	800246e <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002050:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002054:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b02      	cmp	r3, #2
 800205e:	f040 8165 	bne.w	800232c <HAL_RCC_OscConfig+0xe80>
 8002062:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002066:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800206a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800206e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002074:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002082:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002086:	601a      	str	r2, [r3, #0]
  return result;
 8002088:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002090:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800209c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	461a      	mov	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe fd16 	bl	8000ad8 <HAL_GetTick>
 80020ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b0:	e009      	b.n	80020c6 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe fd11 	bl	8000ad8 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e20f      	b.n	80024e6 <HAL_RCC_OscConfig+0x103a>
 80020c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80020ea:	601a      	str	r2, [r3, #0]
  return result;
 80020ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80020f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80020fe:	d805      	bhi.n	800210c <HAL_RCC_OscConfig+0xc60>
 8002100:	4b01      	ldr	r3, [pc, #4]	@ (8002108 <HAL_RCC_OscConfig+0xc5c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	e02a      	b.n	800215c <HAL_RCC_OscConfig+0xcb0>
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002110:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002114:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002118:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002136:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800213a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002144:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	fa93 f2a3 	rbit	r2, r3
 800214e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002152:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	4bca      	ldr	r3, [pc, #808]	@ (8002484 <HAL_RCC_OscConfig+0xfd8>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002160:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002164:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002168:	6011      	str	r1, [r2, #0]
 800216a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800216e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	fa92 f1a2 	rbit	r1, r2
 8002178:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800217c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002180:	6011      	str	r1, [r2, #0]
  return result;
 8002182:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002186:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	fab2 f282 	clz	r2, r2
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	f042 0220 	orr.w	r2, r2, #32
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	f002 021f 	and.w	r2, r2, #31
 800219c:	2101      	movs	r1, #1
 800219e:	fa01 f202 	lsl.w	r2, r1, r2
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d184      	bne.n	80020b2 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a8:	4bb6      	ldr	r3, [pc, #728]	@ (8002484 <HAL_RCC_OscConfig+0xfd8>)
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	f023 020f 	bic.w	r2, r3, #15
 80021b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	49b1      	ldr	r1, [pc, #708]	@ (8002484 <HAL_RCC_OscConfig+0xfd8>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80021c2:	4bb0      	ldr	r3, [pc, #704]	@ (8002484 <HAL_RCC_OscConfig+0xfd8>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80021ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6a19      	ldr	r1, [r3, #32]
 80021d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	430b      	orrs	r3, r1
 80021e4:	49a7      	ldr	r1, [pc, #668]	@ (8002484 <HAL_RCC_OscConfig+0xfd8>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
 80021ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ee:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	fa93 f2a3 	rbit	r2, r3
 8002206:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800220e:	601a      	str	r2, [r3, #0]
  return result;
 8002210:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002214:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002218:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002224:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	461a      	mov	r2, r3
 800222c:	2301      	movs	r3, #1
 800222e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fc52 	bl	8000ad8 <HAL_GetTick>
 8002234:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002238:	e009      	b.n	800224e <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223a:	f7fe fc4d 	bl	8000ad8 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e14b      	b.n	80024e6 <HAL_RCC_OscConfig+0x103a>
 800224e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002252:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002256:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800225a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002260:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	fa93 f2a3 	rbit	r2, r3
 800226a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800226e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002272:	601a      	str	r2, [r3, #0]
  return result;
 8002274:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002278:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800227c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b3f      	cmp	r3, #63	@ 0x3f
 8002286:	d802      	bhi.n	800228e <HAL_RCC_OscConfig+0xde2>
 8002288:	4b7e      	ldr	r3, [pc, #504]	@ (8002484 <HAL_RCC_OscConfig+0xfd8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	e027      	b.n	80022de <HAL_RCC_OscConfig+0xe32>
 800228e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002292:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002296:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800229a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ae:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80022bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d4:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	4b6a      	ldr	r3, [pc, #424]	@ (8002484 <HAL_RCC_OscConfig+0xfd8>)
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022e2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022e6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022ea:	6011      	str	r1, [r2, #0]
 80022ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022f0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	fa92 f1a2 	rbit	r1, r2
 80022fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022fe:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002302:	6011      	str	r1, [r2, #0]
  return result;
 8002304:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002308:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	fab2 f282 	clz	r2, r2
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	f042 0220 	orr.w	r2, r2, #32
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	f002 021f 	and.w	r2, r2, #31
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f202 	lsl.w	r2, r1, r2
 8002324:	4013      	ands	r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d087      	beq.n	800223a <HAL_RCC_OscConfig+0xd8e>
 800232a:	e0db      	b.n	80024e4 <HAL_RCC_OscConfig+0x1038>
 800232c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002330:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002334:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002338:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	fa93 f2a3 	rbit	r2, r3
 8002348:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800234c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002350:	601a      	str	r2, [r3, #0]
  return result;
 8002352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002356:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800235a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002366:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	461a      	mov	r2, r3
 800236e:	2300      	movs	r3, #0
 8002370:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7fe fbb1 	bl	8000ad8 <HAL_GetTick>
 8002376:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237a:	e009      	b.n	8002390 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237c:	f7fe fbac 	bl	8000ad8 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0aa      	b.n	80024e6 <HAL_RCC_OscConfig+0x103a>
 8002390:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002394:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002398:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800239c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	fa93 f2a3 	rbit	r2, r3
 80023ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023b4:	601a      	str	r2, [r3, #0]
  return result;
 80023b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ba:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80023c8:	d802      	bhi.n	80023d0 <HAL_RCC_OscConfig+0xf24>
 80023ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002484 <HAL_RCC_OscConfig+0xfd8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	e027      	b.n	8002420 <HAL_RCC_OscConfig+0xf74>
 80023d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80023d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fa93 f2a3 	rbit	r2, r3
 80023ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80023fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002408:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002416:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_RCC_OscConfig+0xfd8>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002424:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002428:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800242c:	6011      	str	r1, [r2, #0]
 800242e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002432:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	fa92 f1a2 	rbit	r1, r2
 800243c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002440:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002444:	6011      	str	r1, [r2, #0]
  return result;
 8002446:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800244a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	fab2 f282 	clz	r2, r2
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	f042 0220 	orr.w	r2, r2, #32
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	f002 021f 	and.w	r2, r2, #31
 8002460:	2101      	movs	r1, #1
 8002462:	fa01 f202 	lsl.w	r2, r1, r2
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d187      	bne.n	800237c <HAL_RCC_OscConfig+0xed0>
 800246c:	e03a      	b.n	80024e4 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002472:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d104      	bne.n	8002488 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e031      	b.n	80024e6 <HAL_RCC_OscConfig+0x103a>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002488:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_RCC_OscConfig+0x1044>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002490:	4b17      	ldr	r3, [pc, #92]	@ (80024f0 <HAL_RCC_OscConfig+0x1044>)
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002498:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800249c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80024a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d117      	bne.n	80024e0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024b4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d10b      	bne.n	80024e0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80024c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b09e      	sub	sp, #120	@ 0x78
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e154      	b.n	80027b6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800250c:	4b89      	ldr	r3, [pc, #548]	@ (8002734 <HAL_RCC_ClockConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d910      	bls.n	800253c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b86      	ldr	r3, [pc, #536]	@ (8002734 <HAL_RCC_ClockConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0207 	bic.w	r2, r3, #7
 8002522:	4984      	ldr	r1, [pc, #528]	@ (8002734 <HAL_RCC_ClockConfig+0x240>)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252a:	4b82      	ldr	r3, [pc, #520]	@ (8002734 <HAL_RCC_ClockConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e13c      	b.n	80027b6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b7b      	ldr	r3, [pc, #492]	@ (8002738 <HAL_RCC_ClockConfig+0x244>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4978      	ldr	r1, [pc, #480]	@ (8002738 <HAL_RCC_ClockConfig+0x244>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80cd 	beq.w	8002702 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d137      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xec>
 8002570:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002574:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800257e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b3f      	cmp	r3, #63	@ 0x3f
 8002588:	d802      	bhi.n	8002590 <HAL_RCC_ClockConfig+0x9c>
 800258a:	4b6b      	ldr	r3, [pc, #428]	@ (8002738 <HAL_RCC_ClockConfig+0x244>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	e00f      	b.n	80025b0 <HAL_RCC_ClockConfig+0xbc>
 8002590:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002594:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	667b      	str	r3, [r7, #100]	@ 0x64
 800259e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80025a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025ac:	4b62      	ldr	r3, [pc, #392]	@ (8002738 <HAL_RCC_ClockConfig+0x244>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025b8:	fa92 f2a2 	rbit	r2, r2
 80025bc:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80025be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025c0:	fab2 f282 	clz	r2, r2
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	f042 0220 	orr.w	r2, r2, #32
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	f002 021f 	and.w	r2, r2, #31
 80025d0:	2101      	movs	r1, #1
 80025d2:	fa01 f202 	lsl.w	r2, r1, r2
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d171      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0ea      	b.n	80027b6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d137      	bne.n	8002658 <HAL_RCC_ClockConfig+0x164>
 80025e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ec:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80025f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8002600:	d802      	bhi.n	8002608 <HAL_RCC_ClockConfig+0x114>
 8002602:	4b4d      	ldr	r3, [pc, #308]	@ (8002738 <HAL_RCC_ClockConfig+0x244>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	e00f      	b.n	8002628 <HAL_RCC_ClockConfig+0x134>
 8002608:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800260c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	647b      	str	r3, [r7, #68]	@ 0x44
 8002616:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800261a:	643b      	str	r3, [r7, #64]	@ 0x40
 800261c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002624:	4b44      	ldr	r3, [pc, #272]	@ (8002738 <HAL_RCC_ClockConfig+0x244>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800262c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800262e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002630:	fa92 f2a2 	rbit	r2, r2
 8002634:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002636:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002638:	fab2 f282 	clz	r2, r2
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	f042 0220 	orr.w	r2, r2, #32
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	f002 021f 	and.w	r2, r2, #31
 8002648:	2101      	movs	r1, #1
 800264a:	fa01 f202 	lsl.w	r2, r1, r2
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d135      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0ae      	b.n	80027b6 <HAL_RCC_ClockConfig+0x2c2>
 8002658:	2302      	movs	r3, #2
 800265a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b3f      	cmp	r3, #63	@ 0x3f
 800266e:	d802      	bhi.n	8002676 <HAL_RCC_ClockConfig+0x182>
 8002670:	4b31      	ldr	r3, [pc, #196]	@ (8002738 <HAL_RCC_ClockConfig+0x244>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	e00d      	b.n	8002692 <HAL_RCC_ClockConfig+0x19e>
 8002676:	2302      	movs	r3, #2
 8002678:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	627b      	str	r3, [r7, #36]	@ 0x24
 8002682:	2302      	movs	r3, #2
 8002684:	623b      	str	r3, [r7, #32]
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	4b2a      	ldr	r3, [pc, #168]	@ (8002738 <HAL_RCC_ClockConfig+0x244>)
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	2202      	movs	r2, #2
 8002694:	61ba      	str	r2, [r7, #24]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	fa92 f2a2 	rbit	r2, r2
 800269c:	617a      	str	r2, [r7, #20]
  return result;
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	fab2 f282 	clz	r2, r2
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	f042 0220 	orr.w	r2, r2, #32
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	f002 021f 	and.w	r2, r2, #31
 80026b0:	2101      	movs	r1, #1
 80026b2:	fa01 f202 	lsl.w	r2, r1, r2
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e07a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002738 <HAL_RCC_ClockConfig+0x244>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f023 0203 	bic.w	r2, r3, #3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	491a      	ldr	r1, [pc, #104]	@ (8002738 <HAL_RCC_ClockConfig+0x244>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d2:	f7fe fa01 	bl	8000ad8 <HAL_GetTick>
 80026d6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026da:	f7fe f9fd 	bl	8000ad8 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e062      	b.n	80027b6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <HAL_RCC_ClockConfig+0x244>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 020c 	and.w	r2, r3, #12
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	429a      	cmp	r2, r3
 8002700:	d1eb      	bne.n	80026da <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002702:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <HAL_RCC_ClockConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d215      	bcs.n	800273c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002710:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <HAL_RCC_ClockConfig+0x240>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 0207 	bic.w	r2, r3, #7
 8002718:	4906      	ldr	r1, [pc, #24]	@ (8002734 <HAL_RCC_ClockConfig+0x240>)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002720:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <HAL_RCC_ClockConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d006      	beq.n	800273c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e041      	b.n	80027b6 <HAL_RCC_ClockConfig+0x2c2>
 8002732:	bf00      	nop
 8002734:	40022000 	.word	0x40022000
 8002738:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002748:	4b1d      	ldr	r3, [pc, #116]	@ (80027c0 <HAL_RCC_ClockConfig+0x2cc>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	491a      	ldr	r1, [pc, #104]	@ (80027c0 <HAL_RCC_ClockConfig+0x2cc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d009      	beq.n	800277a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002766:	4b16      	ldr	r3, [pc, #88]	@ (80027c0 <HAL_RCC_ClockConfig+0x2cc>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4912      	ldr	r1, [pc, #72]	@ (80027c0 <HAL_RCC_ClockConfig+0x2cc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800277a:	f000 f829 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 800277e:	4601      	mov	r1, r0
 8002780:	4b0f      	ldr	r3, [pc, #60]	@ (80027c0 <HAL_RCC_ClockConfig+0x2cc>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002788:	22f0      	movs	r2, #240	@ 0xf0
 800278a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	fa92 f2a2 	rbit	r2, r2
 8002792:	60fa      	str	r2, [r7, #12]
  return result;
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	fab2 f282 	clz	r2, r2
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	40d3      	lsrs	r3, r2
 800279e:	4a09      	ldr	r2, [pc, #36]	@ (80027c4 <HAL_RCC_ClockConfig+0x2d0>)
 80027a0:	5cd3      	ldrb	r3, [r2, r3]
 80027a2:	fa21 f303 	lsr.w	r3, r1, r3
 80027a6:	4a08      	ldr	r2, [pc, #32]	@ (80027c8 <HAL_RCC_ClockConfig+0x2d4>)
 80027a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027aa:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <HAL_RCC_ClockConfig+0x2d8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe f94e 	bl	8000a50 <HAL_InitTick>
  
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3778      	adds	r7, #120	@ 0x78
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	080042e0 	.word	0x080042e0
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80027ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d002      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x30>
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d003      	beq.n	8002806 <HAL_RCC_GetSysClockFreq+0x36>
 80027fe:	e029      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002800:	4b1a      	ldr	r3, [pc, #104]	@ (800286c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002802:	613b      	str	r3, [r7, #16]
      break;
 8002804:	e029      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0c9b      	lsrs	r3, r3, #18
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	4a18      	ldr	r2, [pc, #96]	@ (8002870 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002810:	5cd3      	ldrb	r3, [r2, r3]
 8002812:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002814:	4b14      	ldr	r3, [pc, #80]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x98>)
 8002816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	4a15      	ldr	r2, [pc, #84]	@ (8002874 <HAL_RCC_GetSysClockFreq+0xa4>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800282c:	4a0f      	ldr	r2, [pc, #60]	@ (800286c <HAL_RCC_GetSysClockFreq+0x9c>)
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	fbb2 f2f3 	udiv	r2, r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	e007      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800283e:	4a0b      	ldr	r2, [pc, #44]	@ (800286c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	fbb2 f2f3 	udiv	r2, r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	613b      	str	r3, [r7, #16]
      break;
 8002852:	e002      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002856:	613b      	str	r3, [r7, #16]
      break;
 8002858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285a:	693b      	ldr	r3, [r7, #16]
}
 800285c:	4618      	mov	r0, r3
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	40021000 	.word	0x40021000
 800286c:	007a1200 	.word	0x007a1200
 8002870:	080042f8 	.word	0x080042f8
 8002874:	08004308 	.word	0x08004308

08002878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800287c:	4b03      	ldr	r3, [pc, #12]	@ (800288c <HAL_RCC_GetHCLKFreq+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000000 	.word	0x20000000

08002890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002896:	f7ff ffef 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 800289a:	4601      	mov	r1, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028a4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80028a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	fa92 f2a2 	rbit	r2, r2
 80028b0:	603a      	str	r2, [r7, #0]
  return result;
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	fab2 f282 	clz	r2, r2
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	40d3      	lsrs	r3, r2
 80028bc:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	080042f0 	.word	0x080042f0

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028da:	f7ff ffcd 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028de:	4601      	mov	r1, r0
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80028e8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80028ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	fa92 f2a2 	rbit	r2, r2
 80028f4:	603a      	str	r2, [r7, #0]
  return result;
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	fab2 f282 	clz	r2, r2
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	40d3      	lsrs	r3, r2
 8002900:	4a04      	ldr	r2, [pc, #16]	@ (8002914 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002902:	5cd3      	ldrb	r3, [r2, r3]
 8002904:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000
 8002914:	080042f0 	.word	0x080042f0

08002918 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b092      	sub	sp, #72	@ 0x48
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002928:	2300      	movs	r3, #0
 800292a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80d2 	beq.w	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10e      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002948:	4b4a      	ldr	r3, [pc, #296]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4a49      	ldr	r2, [pc, #292]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800294e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002952:	61d3      	str	r3, [r2, #28]
 8002954:	4b47      	ldr	r3, [pc, #284]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002960:	2301      	movs	r3, #1
 8002962:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	4b44      	ldr	r3, [pc, #272]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296e:	2b00      	cmp	r3, #0
 8002970:	d118      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002972:	4b41      	ldr	r3, [pc, #260]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a40      	ldr	r2, [pc, #256]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297e:	f7fe f8ab 	bl	8000ad8 <HAL_GetTick>
 8002982:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002984:	e008      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002986:	f7fe f8a7 	bl	8000ad8 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b64      	cmp	r3, #100	@ 0x64
 8002992:	d901      	bls.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e1d4      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	4b37      	ldr	r3, [pc, #220]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029a4:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8082 	beq.w	8002aba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d07a      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80029dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b25      	ldr	r3, [pc, #148]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	461a      	mov	r2, r3
 80029ee:	2301      	movs	r3, #1
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	461a      	mov	r2, r3
 8002a12:	2300      	movs	r3, #0
 8002a14:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a16:	4a17      	ldr	r2, [pc, #92]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a1a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d049      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7fe f857 	bl	8000ad8 <HAL_GetTick>
 8002a2a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe f853 	bl	8000ad8 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e17e      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002a44:	2302      	movs	r3, #2
 8002a46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a50:	2302      	movs	r3, #2
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a6e:	4b01      	ldr	r3, [pc, #4]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	e00d      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40007000 	.word	0x40007000
 8002a7c:	10908100 	.word	0x10908100
 8002a80:	2302      	movs	r3, #2
 8002a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	4b9a      	ldr	r3, [pc, #616]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	2202      	movs	r2, #2
 8002a92:	613a      	str	r2, [r7, #16]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	fa92 f2a2 	rbit	r2, r2
 8002a9a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	fab2 f282 	clz	r2, r2
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f002 021f 	and.w	r2, r2, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0b9      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002aba:	4b8f      	ldr	r3, [pc, #572]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	498c      	ldr	r1, [pc, #560]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002acc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d105      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad4:	4b88      	ldr	r3, [pc, #544]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4a87      	ldr	r2, [pc, #540]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ade:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aec:	4b82      	ldr	r3, [pc, #520]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	f023 0203 	bic.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	497f      	ldr	r1, [pc, #508]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4978      	ldr	r1, [pc, #480]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b28:	4b73      	ldr	r3, [pc, #460]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	4970      	ldr	r1, [pc, #448]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b46:	4b6c      	ldr	r3, [pc, #432]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f023 0210 	bic.w	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	4969      	ldr	r1, [pc, #420]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b64:	4b64      	ldr	r3, [pc, #400]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b70:	4961      	ldr	r1, [pc, #388]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b82:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f023 0220 	bic.w	r2, r3, #32
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	495a      	ldr	r1, [pc, #360]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ba0:	4b55      	ldr	r3, [pc, #340]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	4952      	ldr	r1, [pc, #328]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	494b      	ldr	r1, [pc, #300]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bdc:	4b46      	ldr	r3, [pc, #280]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	4943      	ldr	r1, [pc, #268]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	493c      	ldr	r1, [pc, #240]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c18:	4b37      	ldr	r3, [pc, #220]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	4934      	ldr	r1, [pc, #208]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c36:	4b30      	ldr	r3, [pc, #192]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c42:	492d      	ldr	r1, [pc, #180]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c54:	4b28      	ldr	r3, [pc, #160]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c60:	4925      	ldr	r1, [pc, #148]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c72:	4b21      	ldr	r3, [pc, #132]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c76:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	491e      	ldr	r1, [pc, #120]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002c90:	4b19      	ldr	r3, [pc, #100]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9c:	4916      	ldr	r1, [pc, #88]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002cae:	4b12      	ldr	r3, [pc, #72]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cba:	490f      	ldr	r1, [pc, #60]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd8:	4907      	ldr	r1, [pc, #28]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002cea:	4b03      	ldr	r3, [pc, #12]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	e002      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cfe:	4913      	ldr	r1, [pc, #76]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d10:	4b0e      	ldr	r3, [pc, #56]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1c:	490b      	ldr	r1, [pc, #44]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002d2e:	4b07      	ldr	r3, [pc, #28]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d3a:	4904      	ldr	r1, [pc, #16]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3748      	adds	r7, #72	@ 0x48
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000

08002d50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e040      	b.n	8002de4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d106      	bne.n	8002d78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fd fd22 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2224      	movs	r2, #36	@ 0x24
 8002d7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 0201 	bic.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fb4e 	bl	8003438 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f977 	bl	8003090 <UART_SetConfig>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e01b      	b.n	8002de4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fbcd 	bl	800357c <UART_CheckIdleState>
 8002de2:	4603      	mov	r3, r0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	@ 0x28
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d177      	bne.n	8002ef4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_UART_Transmit+0x24>
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e070      	b.n	8002ef6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2221      	movs	r2, #33	@ 0x21
 8002e20:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e22:	f7fd fe59 	bl	8000ad8 <HAL_GetTick>
 8002e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	88fa      	ldrh	r2, [r7, #6]
 8002e2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e40:	d108      	bne.n	8002e54 <HAL_UART_Transmit+0x68>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d104      	bne.n	8002e54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	61bb      	str	r3, [r7, #24]
 8002e52:	e003      	b.n	8002e5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e5c:	e02f      	b.n	8002ebe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	2180      	movs	r1, #128	@ 0x80
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fc2f 	bl	80036cc <UART_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e03b      	b.n	8002ef6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	881a      	ldrh	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e90:	b292      	uxth	r2, r2
 8002e92:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	3302      	adds	r3, #2
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	e007      	b.n	8002eac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	781a      	ldrb	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1c9      	bne.n	8002e5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2140      	movs	r1, #64	@ 0x40
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fbf9 	bl	80036cc <UART_WaitOnFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e005      	b.n	8002ef6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2220      	movs	r2, #32
 8002eee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e000      	b.n	8002ef6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002ef4:	2302      	movs	r3, #2
  }
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b08a      	sub	sp, #40	@ 0x28
 8002f02:	af02      	add	r7, sp, #8
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	f040 80b6 	bne.w	8003086 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_UART_Receive+0x28>
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e0ae      	b.n	8003088 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2222      	movs	r2, #34	@ 0x22
 8002f36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f40:	f7fd fdca 	bl	8000ad8 <HAL_GetTick>
 8002f44:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	88fa      	ldrh	r2, [r7, #6]
 8002f4a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f5e:	d10e      	bne.n	8002f7e <HAL_UART_Receive+0x80>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d105      	bne.n	8002f74 <HAL_UART_Receive+0x76>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002f6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f72:	e02d      	b.n	8002fd0 <HAL_UART_Receive+0xd2>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	22ff      	movs	r2, #255	@ 0xff
 8002f78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f7c:	e028      	b.n	8002fd0 <HAL_UART_Receive+0xd2>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <HAL_UART_Receive+0xa4>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d104      	bne.n	8002f98 <HAL_UART_Receive+0x9a>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	22ff      	movs	r2, #255	@ 0xff
 8002f92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f96:	e01b      	b.n	8002fd0 <HAL_UART_Receive+0xd2>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	227f      	movs	r2, #127	@ 0x7f
 8002f9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002fa0:	e016      	b.n	8002fd0 <HAL_UART_Receive+0xd2>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002faa:	d10d      	bne.n	8002fc8 <HAL_UART_Receive+0xca>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d104      	bne.n	8002fbe <HAL_UART_Receive+0xc0>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	227f      	movs	r2, #127	@ 0x7f
 8002fb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002fbc:	e008      	b.n	8002fd0 <HAL_UART_Receive+0xd2>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	223f      	movs	r2, #63	@ 0x3f
 8002fc2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002fc6:	e003      	b.n	8002fd0 <HAL_UART_Receive+0xd2>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002fd6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fe0:	d108      	bne.n	8002ff4 <HAL_UART_Receive+0xf6>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d104      	bne.n	8002ff4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	e003      	b.n	8002ffc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002ffc:	e037      	b.n	800306e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2200      	movs	r2, #0
 8003006:	2120      	movs	r1, #32
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fb5f 	bl	80036cc <UART_WaitOnFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e033      	b.n	8003088 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10c      	bne.n	8003040 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800302c:	b29a      	uxth	r2, r3
 800302e:	8a7b      	ldrh	r3, [r7, #18]
 8003030:	4013      	ands	r3, r2
 8003032:	b29a      	uxth	r2, r3
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	3302      	adds	r3, #2
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e00d      	b.n	800305c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003046:	b29b      	uxth	r3, r3
 8003048:	b2da      	uxtb	r2, r3
 800304a:	8a7b      	ldrh	r3, [r7, #18]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	4013      	ands	r3, r2
 8003050:	b2da      	uxtb	r2, r3
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3301      	adds	r3, #1
 800305a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1c1      	bne.n	8002ffe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	e000      	b.n	8003088 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003086:	2302      	movs	r3, #2
  }
}
 8003088:	4618      	mov	r0, r3
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b92      	ldr	r3, [pc, #584]	@ (8003304 <UART_SetConfig+0x274>)
 80030bc:	4013      	ands	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	6979      	ldr	r1, [r7, #20]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	430a      	orrs	r2, r1
 8003100:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a80      	ldr	r2, [pc, #512]	@ (8003308 <UART_SetConfig+0x278>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d120      	bne.n	800314e <UART_SetConfig+0xbe>
 800310c:	4b7f      	ldr	r3, [pc, #508]	@ (800330c <UART_SetConfig+0x27c>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b03      	cmp	r3, #3
 8003116:	d817      	bhi.n	8003148 <UART_SetConfig+0xb8>
 8003118:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <UART_SetConfig+0x90>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003131 	.word	0x08003131
 8003124:	0800313d 	.word	0x0800313d
 8003128:	08003143 	.word	0x08003143
 800312c:	08003137 	.word	0x08003137
 8003130:	2301      	movs	r3, #1
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e0b5      	b.n	80032a2 <UART_SetConfig+0x212>
 8003136:	2302      	movs	r3, #2
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e0b2      	b.n	80032a2 <UART_SetConfig+0x212>
 800313c:	2304      	movs	r3, #4
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e0af      	b.n	80032a2 <UART_SetConfig+0x212>
 8003142:	2308      	movs	r3, #8
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e0ac      	b.n	80032a2 <UART_SetConfig+0x212>
 8003148:	2310      	movs	r3, #16
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	e0a9      	b.n	80032a2 <UART_SetConfig+0x212>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a6f      	ldr	r2, [pc, #444]	@ (8003310 <UART_SetConfig+0x280>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d124      	bne.n	80031a2 <UART_SetConfig+0x112>
 8003158:	4b6c      	ldr	r3, [pc, #432]	@ (800330c <UART_SetConfig+0x27c>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003160:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003164:	d011      	beq.n	800318a <UART_SetConfig+0xfa>
 8003166:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800316a:	d817      	bhi.n	800319c <UART_SetConfig+0x10c>
 800316c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003170:	d011      	beq.n	8003196 <UART_SetConfig+0x106>
 8003172:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003176:	d811      	bhi.n	800319c <UART_SetConfig+0x10c>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <UART_SetConfig+0xf4>
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003180:	d006      	beq.n	8003190 <UART_SetConfig+0x100>
 8003182:	e00b      	b.n	800319c <UART_SetConfig+0x10c>
 8003184:	2300      	movs	r3, #0
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e08b      	b.n	80032a2 <UART_SetConfig+0x212>
 800318a:	2302      	movs	r3, #2
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e088      	b.n	80032a2 <UART_SetConfig+0x212>
 8003190:	2304      	movs	r3, #4
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e085      	b.n	80032a2 <UART_SetConfig+0x212>
 8003196:	2308      	movs	r3, #8
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e082      	b.n	80032a2 <UART_SetConfig+0x212>
 800319c:	2310      	movs	r3, #16
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e07f      	b.n	80032a2 <UART_SetConfig+0x212>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003314 <UART_SetConfig+0x284>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d124      	bne.n	80031f6 <UART_SetConfig+0x166>
 80031ac:	4b57      	ldr	r3, [pc, #348]	@ (800330c <UART_SetConfig+0x27c>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80031b4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031b8:	d011      	beq.n	80031de <UART_SetConfig+0x14e>
 80031ba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031be:	d817      	bhi.n	80031f0 <UART_SetConfig+0x160>
 80031c0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031c4:	d011      	beq.n	80031ea <UART_SetConfig+0x15a>
 80031c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031ca:	d811      	bhi.n	80031f0 <UART_SetConfig+0x160>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <UART_SetConfig+0x148>
 80031d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031d4:	d006      	beq.n	80031e4 <UART_SetConfig+0x154>
 80031d6:	e00b      	b.n	80031f0 <UART_SetConfig+0x160>
 80031d8:	2300      	movs	r3, #0
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e061      	b.n	80032a2 <UART_SetConfig+0x212>
 80031de:	2302      	movs	r3, #2
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e05e      	b.n	80032a2 <UART_SetConfig+0x212>
 80031e4:	2304      	movs	r3, #4
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e05b      	b.n	80032a2 <UART_SetConfig+0x212>
 80031ea:	2308      	movs	r3, #8
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	e058      	b.n	80032a2 <UART_SetConfig+0x212>
 80031f0:	2310      	movs	r3, #16
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e055      	b.n	80032a2 <UART_SetConfig+0x212>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a47      	ldr	r2, [pc, #284]	@ (8003318 <UART_SetConfig+0x288>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d124      	bne.n	800324a <UART_SetConfig+0x1ba>
 8003200:	4b42      	ldr	r3, [pc, #264]	@ (800330c <UART_SetConfig+0x27c>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003208:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800320c:	d011      	beq.n	8003232 <UART_SetConfig+0x1a2>
 800320e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003212:	d817      	bhi.n	8003244 <UART_SetConfig+0x1b4>
 8003214:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003218:	d011      	beq.n	800323e <UART_SetConfig+0x1ae>
 800321a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800321e:	d811      	bhi.n	8003244 <UART_SetConfig+0x1b4>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <UART_SetConfig+0x19c>
 8003224:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003228:	d006      	beq.n	8003238 <UART_SetConfig+0x1a8>
 800322a:	e00b      	b.n	8003244 <UART_SetConfig+0x1b4>
 800322c:	2300      	movs	r3, #0
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e037      	b.n	80032a2 <UART_SetConfig+0x212>
 8003232:	2302      	movs	r3, #2
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e034      	b.n	80032a2 <UART_SetConfig+0x212>
 8003238:	2304      	movs	r3, #4
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e031      	b.n	80032a2 <UART_SetConfig+0x212>
 800323e:	2308      	movs	r3, #8
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	e02e      	b.n	80032a2 <UART_SetConfig+0x212>
 8003244:	2310      	movs	r3, #16
 8003246:	77fb      	strb	r3, [r7, #31]
 8003248:	e02b      	b.n	80032a2 <UART_SetConfig+0x212>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a33      	ldr	r2, [pc, #204]	@ (800331c <UART_SetConfig+0x28c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d124      	bne.n	800329e <UART_SetConfig+0x20e>
 8003254:	4b2d      	ldr	r3, [pc, #180]	@ (800330c <UART_SetConfig+0x27c>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800325c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003260:	d011      	beq.n	8003286 <UART_SetConfig+0x1f6>
 8003262:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003266:	d817      	bhi.n	8003298 <UART_SetConfig+0x208>
 8003268:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800326c:	d011      	beq.n	8003292 <UART_SetConfig+0x202>
 800326e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003272:	d811      	bhi.n	8003298 <UART_SetConfig+0x208>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <UART_SetConfig+0x1f0>
 8003278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800327c:	d006      	beq.n	800328c <UART_SetConfig+0x1fc>
 800327e:	e00b      	b.n	8003298 <UART_SetConfig+0x208>
 8003280:	2300      	movs	r3, #0
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e00d      	b.n	80032a2 <UART_SetConfig+0x212>
 8003286:	2302      	movs	r3, #2
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e00a      	b.n	80032a2 <UART_SetConfig+0x212>
 800328c:	2304      	movs	r3, #4
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e007      	b.n	80032a2 <UART_SetConfig+0x212>
 8003292:	2308      	movs	r3, #8
 8003294:	77fb      	strb	r3, [r7, #31]
 8003296:	e004      	b.n	80032a2 <UART_SetConfig+0x212>
 8003298:	2310      	movs	r3, #16
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e001      	b.n	80032a2 <UART_SetConfig+0x212>
 800329e:	2310      	movs	r3, #16
 80032a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032aa:	d16b      	bne.n	8003384 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80032ac:	7ffb      	ldrb	r3, [r7, #31]
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d838      	bhi.n	8003324 <UART_SetConfig+0x294>
 80032b2:	a201      	add	r2, pc, #4	@ (adr r2, 80032b8 <UART_SetConfig+0x228>)
 80032b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	080032e5 	.word	0x080032e5
 80032c0:	080032ed 	.word	0x080032ed
 80032c4:	08003325 	.word	0x08003325
 80032c8:	080032f3 	.word	0x080032f3
 80032cc:	08003325 	.word	0x08003325
 80032d0:	08003325 	.word	0x08003325
 80032d4:	08003325 	.word	0x08003325
 80032d8:	080032fb 	.word	0x080032fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032dc:	f7ff fad8 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 80032e0:	61b8      	str	r0, [r7, #24]
        break;
 80032e2:	e024      	b.n	800332e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e4:	f7ff faf6 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 80032e8:	61b8      	str	r0, [r7, #24]
        break;
 80032ea:	e020      	b.n	800332e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003320 <UART_SetConfig+0x290>)
 80032ee:	61bb      	str	r3, [r7, #24]
        break;
 80032f0:	e01d      	b.n	800332e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f2:	f7ff fa6d 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 80032f6:	61b8      	str	r0, [r7, #24]
        break;
 80032f8:	e019      	b.n	800332e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032fe:	61bb      	str	r3, [r7, #24]
        break;
 8003300:	e015      	b.n	800332e <UART_SetConfig+0x29e>
 8003302:	bf00      	nop
 8003304:	efff69f3 	.word	0xefff69f3
 8003308:	40013800 	.word	0x40013800
 800330c:	40021000 	.word	0x40021000
 8003310:	40004400 	.word	0x40004400
 8003314:	40004800 	.word	0x40004800
 8003318:	40004c00 	.word	0x40004c00
 800331c:	40005000 	.word	0x40005000
 8003320:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	77bb      	strb	r3, [r7, #30]
        break;
 800332c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d073      	beq.n	800341c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	005a      	lsls	r2, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	441a      	add	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b0f      	cmp	r3, #15
 800334e:	d916      	bls.n	800337e <UART_SetConfig+0x2ee>
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003356:	d212      	bcs.n	800337e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	b29b      	uxth	r3, r3
 800335c:	f023 030f 	bic.w	r3, r3, #15
 8003360:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	b29b      	uxth	r3, r3
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	b29a      	uxth	r2, r3
 800336e:	89fb      	ldrh	r3, [r7, #14]
 8003370:	4313      	orrs	r3, r2
 8003372:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	89fa      	ldrh	r2, [r7, #14]
 800337a:	60da      	str	r2, [r3, #12]
 800337c:	e04e      	b.n	800341c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	77bb      	strb	r3, [r7, #30]
 8003382:	e04b      	b.n	800341c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003384:	7ffb      	ldrb	r3, [r7, #31]
 8003386:	2b08      	cmp	r3, #8
 8003388:	d827      	bhi.n	80033da <UART_SetConfig+0x34a>
 800338a:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <UART_SetConfig+0x300>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033b5 	.word	0x080033b5
 8003394:	080033bd 	.word	0x080033bd
 8003398:	080033c5 	.word	0x080033c5
 800339c:	080033db 	.word	0x080033db
 80033a0:	080033cb 	.word	0x080033cb
 80033a4:	080033db 	.word	0x080033db
 80033a8:	080033db 	.word	0x080033db
 80033ac:	080033db 	.word	0x080033db
 80033b0:	080033d3 	.word	0x080033d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b4:	f7ff fa6c 	bl	8002890 <HAL_RCC_GetPCLK1Freq>
 80033b8:	61b8      	str	r0, [r7, #24]
        break;
 80033ba:	e013      	b.n	80033e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033bc:	f7ff fa8a 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 80033c0:	61b8      	str	r0, [r7, #24]
        break;
 80033c2:	e00f      	b.n	80033e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003434 <UART_SetConfig+0x3a4>)
 80033c6:	61bb      	str	r3, [r7, #24]
        break;
 80033c8:	e00c      	b.n	80033e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ca:	f7ff fa01 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 80033ce:	61b8      	str	r0, [r7, #24]
        break;
 80033d0:	e008      	b.n	80033e4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033d6:	61bb      	str	r3, [r7, #24]
        break;
 80033d8:	e004      	b.n	80033e4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	77bb      	strb	r3, [r7, #30]
        break;
 80033e2:	bf00      	nop
    }

    if (pclk != 0U)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d018      	beq.n	800341c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	085a      	lsrs	r2, r3, #1
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	441a      	add	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b0f      	cmp	r3, #15
 8003402:	d909      	bls.n	8003418 <UART_SetConfig+0x388>
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800340a:	d205      	bcs.n	8003418 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	b29a      	uxth	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	e001      	b.n	800341c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003428:	7fbb      	ldrb	r3, [r7, #30]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	007a1200 	.word	0x007a1200

08003438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01a      	beq.n	800354e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003536:	d10a      	bne.n	800354e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  }
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b098      	sub	sp, #96	@ 0x60
 8003580:	af02      	add	r7, sp, #8
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800358c:	f7fd faa4 	bl	8000ad8 <HAL_GetTick>
 8003590:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b08      	cmp	r3, #8
 800359e:	d12e      	bne.n	80035fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f88c 	bl	80036cc <UART_WaitOnFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d021      	beq.n	80035fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c2:	e853 3f00 	ldrex	r3, [r3]
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035e0:	e841 2300 	strex	r3, r2, [r1]
 80035e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e6      	bne.n	80035ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e062      	b.n	80036c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b04      	cmp	r3, #4
 800360a:	d149      	bne.n	80036a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800360c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003614:	2200      	movs	r2, #0
 8003616:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f856 	bl	80036cc <UART_WaitOnFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d03c      	beq.n	80036a0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	623b      	str	r3, [r7, #32]
   return(result);
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800363a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003644:	633b      	str	r3, [r7, #48]	@ 0x30
 8003646:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800364a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e6      	bne.n	8003626 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3308      	adds	r3, #8
 800365e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	60fb      	str	r3, [r7, #12]
   return(result);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3308      	adds	r3, #8
 8003676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003678:	61fa      	str	r2, [r7, #28]
 800367a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	69b9      	ldr	r1, [r7, #24]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	617b      	str	r3, [r7, #20]
   return(result);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e5      	bne.n	8003658 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e011      	b.n	80036c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3758      	adds	r7, #88	@ 0x58
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036dc:	e04f      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036e4:	d04b      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7fd f9f7 	bl	8000ad8 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <UART_WaitOnFlagUntilTimeout+0x30>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e04e      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	d037      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0xb2>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b80      	cmp	r3, #128	@ 0x80
 8003712:	d034      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b40      	cmp	r3, #64	@ 0x40
 8003718:	d031      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b08      	cmp	r3, #8
 8003726:	d110      	bne.n	800374a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2208      	movs	r2, #8
 800372e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 f838 	bl	80037a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2208      	movs	r2, #8
 800373a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e029      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003758:	d111      	bne.n	800377e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003762:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f81e 	bl	80037a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e00f      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4013      	ands	r3, r2
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	429a      	cmp	r2, r3
 800379a:	d0a0      	beq.n	80036de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b095      	sub	sp, #84	@ 0x54
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80037ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e6      	bne.n	80037ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3308      	adds	r3, #8
 80037e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3308      	adds	r3, #8
 80037fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e5      	bne.n	80037e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003818:	2b01      	cmp	r3, #1
 800381a:	d118      	bne.n	800384e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	60bb      	str	r3, [r7, #8]
   return(result);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f023 0310 	bic.w	r3, r3, #16
 8003830:	647b      	str	r3, [r7, #68]	@ 0x44
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800383a:	61bb      	str	r3, [r7, #24]
 800383c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6979      	ldr	r1, [r7, #20]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	613b      	str	r3, [r7, #16]
   return(result);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e6      	bne.n	800381c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003862:	bf00      	nop
 8003864:	3754      	adds	r7, #84	@ 0x54
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <_vsiprintf_r>:
 8003870:	b510      	push	{r4, lr}
 8003872:	b09a      	sub	sp, #104	@ 0x68
 8003874:	2400      	movs	r4, #0
 8003876:	9100      	str	r1, [sp, #0]
 8003878:	9104      	str	r1, [sp, #16]
 800387a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800387e:	9105      	str	r1, [sp, #20]
 8003880:	9102      	str	r1, [sp, #8]
 8003882:	4905      	ldr	r1, [pc, #20]	@ (8003898 <_vsiprintf_r+0x28>)
 8003884:	9103      	str	r1, [sp, #12]
 8003886:	4669      	mov	r1, sp
 8003888:	9419      	str	r4, [sp, #100]	@ 0x64
 800388a:	f000 f8a1 	bl	80039d0 <_svfiprintf_r>
 800388e:	9b00      	ldr	r3, [sp, #0]
 8003890:	701c      	strb	r4, [r3, #0]
 8003892:	b01a      	add	sp, #104	@ 0x68
 8003894:	bd10      	pop	{r4, pc}
 8003896:	bf00      	nop
 8003898:	ffff0208 	.word	0xffff0208

0800389c <vsiprintf>:
 800389c:	4613      	mov	r3, r2
 800389e:	460a      	mov	r2, r1
 80038a0:	4601      	mov	r1, r0
 80038a2:	4802      	ldr	r0, [pc, #8]	@ (80038ac <vsiprintf+0x10>)
 80038a4:	6800      	ldr	r0, [r0, #0]
 80038a6:	f7ff bfe3 	b.w	8003870 <_vsiprintf_r>
 80038aa:	bf00      	nop
 80038ac:	2000000c 	.word	0x2000000c

080038b0 <memset>:
 80038b0:	4402      	add	r2, r0
 80038b2:	4603      	mov	r3, r0
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d100      	bne.n	80038ba <memset+0xa>
 80038b8:	4770      	bx	lr
 80038ba:	f803 1b01 	strb.w	r1, [r3], #1
 80038be:	e7f9      	b.n	80038b4 <memset+0x4>

080038c0 <__errno>:
 80038c0:	4b01      	ldr	r3, [pc, #4]	@ (80038c8 <__errno+0x8>)
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	2000000c 	.word	0x2000000c

080038cc <__libc_init_array>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003904 <__libc_init_array+0x38>)
 80038d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003908 <__libc_init_array+0x3c>)
 80038d2:	1b64      	subs	r4, r4, r5
 80038d4:	10a4      	asrs	r4, r4, #2
 80038d6:	2600      	movs	r6, #0
 80038d8:	42a6      	cmp	r6, r4
 80038da:	d109      	bne.n	80038f0 <__libc_init_array+0x24>
 80038dc:	4d0b      	ldr	r5, [pc, #44]	@ (800390c <__libc_init_array+0x40>)
 80038de:	4c0c      	ldr	r4, [pc, #48]	@ (8003910 <__libc_init_array+0x44>)
 80038e0:	f000 fc64 	bl	80041ac <_init>
 80038e4:	1b64      	subs	r4, r4, r5
 80038e6:	10a4      	asrs	r4, r4, #2
 80038e8:	2600      	movs	r6, #0
 80038ea:	42a6      	cmp	r6, r4
 80038ec:	d105      	bne.n	80038fa <__libc_init_array+0x2e>
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
 80038f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f4:	4798      	blx	r3
 80038f6:	3601      	adds	r6, #1
 80038f8:	e7ee      	b.n	80038d8 <__libc_init_array+0xc>
 80038fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80038fe:	4798      	blx	r3
 8003900:	3601      	adds	r6, #1
 8003902:	e7f2      	b.n	80038ea <__libc_init_array+0x1e>
 8003904:	08004354 	.word	0x08004354
 8003908:	08004354 	.word	0x08004354
 800390c:	08004354 	.word	0x08004354
 8003910:	08004358 	.word	0x08004358

08003914 <__retarget_lock_acquire_recursive>:
 8003914:	4770      	bx	lr

08003916 <__retarget_lock_release_recursive>:
 8003916:	4770      	bx	lr

08003918 <__ssputs_r>:
 8003918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800391c:	688e      	ldr	r6, [r1, #8]
 800391e:	461f      	mov	r7, r3
 8003920:	42be      	cmp	r6, r7
 8003922:	680b      	ldr	r3, [r1, #0]
 8003924:	4682      	mov	sl, r0
 8003926:	460c      	mov	r4, r1
 8003928:	4690      	mov	r8, r2
 800392a:	d82d      	bhi.n	8003988 <__ssputs_r+0x70>
 800392c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003930:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003934:	d026      	beq.n	8003984 <__ssputs_r+0x6c>
 8003936:	6965      	ldr	r5, [r4, #20]
 8003938:	6909      	ldr	r1, [r1, #16]
 800393a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800393e:	eba3 0901 	sub.w	r9, r3, r1
 8003942:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003946:	1c7b      	adds	r3, r7, #1
 8003948:	444b      	add	r3, r9
 800394a:	106d      	asrs	r5, r5, #1
 800394c:	429d      	cmp	r5, r3
 800394e:	bf38      	it	cc
 8003950:	461d      	movcc	r5, r3
 8003952:	0553      	lsls	r3, r2, #21
 8003954:	d527      	bpl.n	80039a6 <__ssputs_r+0x8e>
 8003956:	4629      	mov	r1, r5
 8003958:	f000 f958 	bl	8003c0c <_malloc_r>
 800395c:	4606      	mov	r6, r0
 800395e:	b360      	cbz	r0, 80039ba <__ssputs_r+0xa2>
 8003960:	6921      	ldr	r1, [r4, #16]
 8003962:	464a      	mov	r2, r9
 8003964:	f000 fbc2 	bl	80040ec <memcpy>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800396e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003972:	81a3      	strh	r3, [r4, #12]
 8003974:	6126      	str	r6, [r4, #16]
 8003976:	6165      	str	r5, [r4, #20]
 8003978:	444e      	add	r6, r9
 800397a:	eba5 0509 	sub.w	r5, r5, r9
 800397e:	6026      	str	r6, [r4, #0]
 8003980:	60a5      	str	r5, [r4, #8]
 8003982:	463e      	mov	r6, r7
 8003984:	42be      	cmp	r6, r7
 8003986:	d900      	bls.n	800398a <__ssputs_r+0x72>
 8003988:	463e      	mov	r6, r7
 800398a:	6820      	ldr	r0, [r4, #0]
 800398c:	4632      	mov	r2, r6
 800398e:	4641      	mov	r1, r8
 8003990:	f000 fb82 	bl	8004098 <memmove>
 8003994:	68a3      	ldr	r3, [r4, #8]
 8003996:	1b9b      	subs	r3, r3, r6
 8003998:	60a3      	str	r3, [r4, #8]
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	4433      	add	r3, r6
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	2000      	movs	r0, #0
 80039a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a6:	462a      	mov	r2, r5
 80039a8:	f000 fb48 	bl	800403c <_realloc_r>
 80039ac:	4606      	mov	r6, r0
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d1e0      	bne.n	8003974 <__ssputs_r+0x5c>
 80039b2:	6921      	ldr	r1, [r4, #16]
 80039b4:	4650      	mov	r0, sl
 80039b6:	f000 fba7 	bl	8004108 <_free_r>
 80039ba:	230c      	movs	r3, #12
 80039bc:	f8ca 3000 	str.w	r3, [sl]
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039c6:	81a3      	strh	r3, [r4, #12]
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039cc:	e7e9      	b.n	80039a2 <__ssputs_r+0x8a>
	...

080039d0 <_svfiprintf_r>:
 80039d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039d4:	4698      	mov	r8, r3
 80039d6:	898b      	ldrh	r3, [r1, #12]
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	b09d      	sub	sp, #116	@ 0x74
 80039dc:	4607      	mov	r7, r0
 80039de:	460d      	mov	r5, r1
 80039e0:	4614      	mov	r4, r2
 80039e2:	d510      	bpl.n	8003a06 <_svfiprintf_r+0x36>
 80039e4:	690b      	ldr	r3, [r1, #16]
 80039e6:	b973      	cbnz	r3, 8003a06 <_svfiprintf_r+0x36>
 80039e8:	2140      	movs	r1, #64	@ 0x40
 80039ea:	f000 f90f 	bl	8003c0c <_malloc_r>
 80039ee:	6028      	str	r0, [r5, #0]
 80039f0:	6128      	str	r0, [r5, #16]
 80039f2:	b930      	cbnz	r0, 8003a02 <_svfiprintf_r+0x32>
 80039f4:	230c      	movs	r3, #12
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039fc:	b01d      	add	sp, #116	@ 0x74
 80039fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a02:	2340      	movs	r3, #64	@ 0x40
 8003a04:	616b      	str	r3, [r5, #20]
 8003a06:	2300      	movs	r3, #0
 8003a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a0a:	2320      	movs	r3, #32
 8003a0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a14:	2330      	movs	r3, #48	@ 0x30
 8003a16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003bb4 <_svfiprintf_r+0x1e4>
 8003a1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a1e:	f04f 0901 	mov.w	r9, #1
 8003a22:	4623      	mov	r3, r4
 8003a24:	469a      	mov	sl, r3
 8003a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a2a:	b10a      	cbz	r2, 8003a30 <_svfiprintf_r+0x60>
 8003a2c:	2a25      	cmp	r2, #37	@ 0x25
 8003a2e:	d1f9      	bne.n	8003a24 <_svfiprintf_r+0x54>
 8003a30:	ebba 0b04 	subs.w	fp, sl, r4
 8003a34:	d00b      	beq.n	8003a4e <_svfiprintf_r+0x7e>
 8003a36:	465b      	mov	r3, fp
 8003a38:	4622      	mov	r2, r4
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	4638      	mov	r0, r7
 8003a3e:	f7ff ff6b 	bl	8003918 <__ssputs_r>
 8003a42:	3001      	adds	r0, #1
 8003a44:	f000 80a7 	beq.w	8003b96 <_svfiprintf_r+0x1c6>
 8003a48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a4a:	445a      	add	r2, fp
 8003a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 809f 	beq.w	8003b96 <_svfiprintf_r+0x1c6>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a62:	f10a 0a01 	add.w	sl, sl, #1
 8003a66:	9304      	str	r3, [sp, #16]
 8003a68:	9307      	str	r3, [sp, #28]
 8003a6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a70:	4654      	mov	r4, sl
 8003a72:	2205      	movs	r2, #5
 8003a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a78:	484e      	ldr	r0, [pc, #312]	@ (8003bb4 <_svfiprintf_r+0x1e4>)
 8003a7a:	f7fc fbb9 	bl	80001f0 <memchr>
 8003a7e:	9a04      	ldr	r2, [sp, #16]
 8003a80:	b9d8      	cbnz	r0, 8003aba <_svfiprintf_r+0xea>
 8003a82:	06d0      	lsls	r0, r2, #27
 8003a84:	bf44      	itt	mi
 8003a86:	2320      	movmi	r3, #32
 8003a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a8c:	0711      	lsls	r1, r2, #28
 8003a8e:	bf44      	itt	mi
 8003a90:	232b      	movmi	r3, #43	@ 0x2b
 8003a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a96:	f89a 3000 	ldrb.w	r3, [sl]
 8003a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a9c:	d015      	beq.n	8003aca <_svfiprintf_r+0xfa>
 8003a9e:	9a07      	ldr	r2, [sp, #28]
 8003aa0:	4654      	mov	r4, sl
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f04f 0c0a 	mov.w	ip, #10
 8003aa8:	4621      	mov	r1, r4
 8003aaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003aae:	3b30      	subs	r3, #48	@ 0x30
 8003ab0:	2b09      	cmp	r3, #9
 8003ab2:	d94b      	bls.n	8003b4c <_svfiprintf_r+0x17c>
 8003ab4:	b1b0      	cbz	r0, 8003ae4 <_svfiprintf_r+0x114>
 8003ab6:	9207      	str	r2, [sp, #28]
 8003ab8:	e014      	b.n	8003ae4 <_svfiprintf_r+0x114>
 8003aba:	eba0 0308 	sub.w	r3, r0, r8
 8003abe:	fa09 f303 	lsl.w	r3, r9, r3
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	9304      	str	r3, [sp, #16]
 8003ac6:	46a2      	mov	sl, r4
 8003ac8:	e7d2      	b.n	8003a70 <_svfiprintf_r+0xa0>
 8003aca:	9b03      	ldr	r3, [sp, #12]
 8003acc:	1d19      	adds	r1, r3, #4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	9103      	str	r1, [sp, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bfbb      	ittet	lt
 8003ad6:	425b      	neglt	r3, r3
 8003ad8:	f042 0202 	orrlt.w	r2, r2, #2
 8003adc:	9307      	strge	r3, [sp, #28]
 8003ade:	9307      	strlt	r3, [sp, #28]
 8003ae0:	bfb8      	it	lt
 8003ae2:	9204      	strlt	r2, [sp, #16]
 8003ae4:	7823      	ldrb	r3, [r4, #0]
 8003ae6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ae8:	d10a      	bne.n	8003b00 <_svfiprintf_r+0x130>
 8003aea:	7863      	ldrb	r3, [r4, #1]
 8003aec:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aee:	d132      	bne.n	8003b56 <_svfiprintf_r+0x186>
 8003af0:	9b03      	ldr	r3, [sp, #12]
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	9203      	str	r2, [sp, #12]
 8003af8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003afc:	3402      	adds	r4, #2
 8003afe:	9305      	str	r3, [sp, #20]
 8003b00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003bc4 <_svfiprintf_r+0x1f4>
 8003b04:	7821      	ldrb	r1, [r4, #0]
 8003b06:	2203      	movs	r2, #3
 8003b08:	4650      	mov	r0, sl
 8003b0a:	f7fc fb71 	bl	80001f0 <memchr>
 8003b0e:	b138      	cbz	r0, 8003b20 <_svfiprintf_r+0x150>
 8003b10:	9b04      	ldr	r3, [sp, #16]
 8003b12:	eba0 000a 	sub.w	r0, r0, sl
 8003b16:	2240      	movs	r2, #64	@ 0x40
 8003b18:	4082      	lsls	r2, r0
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	3401      	adds	r4, #1
 8003b1e:	9304      	str	r3, [sp, #16]
 8003b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b24:	4824      	ldr	r0, [pc, #144]	@ (8003bb8 <_svfiprintf_r+0x1e8>)
 8003b26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b2a:	2206      	movs	r2, #6
 8003b2c:	f7fc fb60 	bl	80001f0 <memchr>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d036      	beq.n	8003ba2 <_svfiprintf_r+0x1d2>
 8003b34:	4b21      	ldr	r3, [pc, #132]	@ (8003bbc <_svfiprintf_r+0x1ec>)
 8003b36:	bb1b      	cbnz	r3, 8003b80 <_svfiprintf_r+0x1b0>
 8003b38:	9b03      	ldr	r3, [sp, #12]
 8003b3a:	3307      	adds	r3, #7
 8003b3c:	f023 0307 	bic.w	r3, r3, #7
 8003b40:	3308      	adds	r3, #8
 8003b42:	9303      	str	r3, [sp, #12]
 8003b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b46:	4433      	add	r3, r6
 8003b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b4a:	e76a      	b.n	8003a22 <_svfiprintf_r+0x52>
 8003b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b50:	460c      	mov	r4, r1
 8003b52:	2001      	movs	r0, #1
 8003b54:	e7a8      	b.n	8003aa8 <_svfiprintf_r+0xd8>
 8003b56:	2300      	movs	r3, #0
 8003b58:	3401      	adds	r4, #1
 8003b5a:	9305      	str	r3, [sp, #20]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f04f 0c0a 	mov.w	ip, #10
 8003b62:	4620      	mov	r0, r4
 8003b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b68:	3a30      	subs	r2, #48	@ 0x30
 8003b6a:	2a09      	cmp	r2, #9
 8003b6c:	d903      	bls.n	8003b76 <_svfiprintf_r+0x1a6>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0c6      	beq.n	8003b00 <_svfiprintf_r+0x130>
 8003b72:	9105      	str	r1, [sp, #20]
 8003b74:	e7c4      	b.n	8003b00 <_svfiprintf_r+0x130>
 8003b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e7f0      	b.n	8003b62 <_svfiprintf_r+0x192>
 8003b80:	ab03      	add	r3, sp, #12
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	462a      	mov	r2, r5
 8003b86:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc0 <_svfiprintf_r+0x1f0>)
 8003b88:	a904      	add	r1, sp, #16
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	f3af 8000 	nop.w
 8003b90:	1c42      	adds	r2, r0, #1
 8003b92:	4606      	mov	r6, r0
 8003b94:	d1d6      	bne.n	8003b44 <_svfiprintf_r+0x174>
 8003b96:	89ab      	ldrh	r3, [r5, #12]
 8003b98:	065b      	lsls	r3, r3, #25
 8003b9a:	f53f af2d 	bmi.w	80039f8 <_svfiprintf_r+0x28>
 8003b9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ba0:	e72c      	b.n	80039fc <_svfiprintf_r+0x2c>
 8003ba2:	ab03      	add	r3, sp, #12
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	462a      	mov	r2, r5
 8003ba8:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <_svfiprintf_r+0x1f0>)
 8003baa:	a904      	add	r1, sp, #16
 8003bac:	4638      	mov	r0, r7
 8003bae:	f000 f91b 	bl	8003de8 <_printf_i>
 8003bb2:	e7ed      	b.n	8003b90 <_svfiprintf_r+0x1c0>
 8003bb4:	08004318 	.word	0x08004318
 8003bb8:	08004322 	.word	0x08004322
 8003bbc:	00000000 	.word	0x00000000
 8003bc0:	08003919 	.word	0x08003919
 8003bc4:	0800431e 	.word	0x0800431e

08003bc8 <sbrk_aligned>:
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	4e0f      	ldr	r6, [pc, #60]	@ (8003c08 <sbrk_aligned+0x40>)
 8003bcc:	460c      	mov	r4, r1
 8003bce:	6831      	ldr	r1, [r6, #0]
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	b911      	cbnz	r1, 8003bda <sbrk_aligned+0x12>
 8003bd4:	f000 fa7a 	bl	80040cc <_sbrk_r>
 8003bd8:	6030      	str	r0, [r6, #0]
 8003bda:	4621      	mov	r1, r4
 8003bdc:	4628      	mov	r0, r5
 8003bde:	f000 fa75 	bl	80040cc <_sbrk_r>
 8003be2:	1c43      	adds	r3, r0, #1
 8003be4:	d103      	bne.n	8003bee <sbrk_aligned+0x26>
 8003be6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003bea:	4620      	mov	r0, r4
 8003bec:	bd70      	pop	{r4, r5, r6, pc}
 8003bee:	1cc4      	adds	r4, r0, #3
 8003bf0:	f024 0403 	bic.w	r4, r4, #3
 8003bf4:	42a0      	cmp	r0, r4
 8003bf6:	d0f8      	beq.n	8003bea <sbrk_aligned+0x22>
 8003bf8:	1a21      	subs	r1, r4, r0
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	f000 fa66 	bl	80040cc <_sbrk_r>
 8003c00:	3001      	adds	r0, #1
 8003c02:	d1f2      	bne.n	8003bea <sbrk_aligned+0x22>
 8003c04:	e7ef      	b.n	8003be6 <sbrk_aligned+0x1e>
 8003c06:	bf00      	nop
 8003c08:	20000354 	.word	0x20000354

08003c0c <_malloc_r>:
 8003c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c10:	1ccd      	adds	r5, r1, #3
 8003c12:	f025 0503 	bic.w	r5, r5, #3
 8003c16:	3508      	adds	r5, #8
 8003c18:	2d0c      	cmp	r5, #12
 8003c1a:	bf38      	it	cc
 8003c1c:	250c      	movcc	r5, #12
 8003c1e:	2d00      	cmp	r5, #0
 8003c20:	4606      	mov	r6, r0
 8003c22:	db01      	blt.n	8003c28 <_malloc_r+0x1c>
 8003c24:	42a9      	cmp	r1, r5
 8003c26:	d904      	bls.n	8003c32 <_malloc_r+0x26>
 8003c28:	230c      	movs	r3, #12
 8003c2a:	6033      	str	r3, [r6, #0]
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d08 <_malloc_r+0xfc>
 8003c36:	f000 f9f5 	bl	8004024 <__malloc_lock>
 8003c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c3e:	461c      	mov	r4, r3
 8003c40:	bb44      	cbnz	r4, 8003c94 <_malloc_r+0x88>
 8003c42:	4629      	mov	r1, r5
 8003c44:	4630      	mov	r0, r6
 8003c46:	f7ff ffbf 	bl	8003bc8 <sbrk_aligned>
 8003c4a:	1c43      	adds	r3, r0, #1
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	d158      	bne.n	8003d02 <_malloc_r+0xf6>
 8003c50:	f8d8 4000 	ldr.w	r4, [r8]
 8003c54:	4627      	mov	r7, r4
 8003c56:	2f00      	cmp	r7, #0
 8003c58:	d143      	bne.n	8003ce2 <_malloc_r+0xd6>
 8003c5a:	2c00      	cmp	r4, #0
 8003c5c:	d04b      	beq.n	8003cf6 <_malloc_r+0xea>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	4639      	mov	r1, r7
 8003c62:	4630      	mov	r0, r6
 8003c64:	eb04 0903 	add.w	r9, r4, r3
 8003c68:	f000 fa30 	bl	80040cc <_sbrk_r>
 8003c6c:	4581      	cmp	r9, r0
 8003c6e:	d142      	bne.n	8003cf6 <_malloc_r+0xea>
 8003c70:	6821      	ldr	r1, [r4, #0]
 8003c72:	1a6d      	subs	r5, r5, r1
 8003c74:	4629      	mov	r1, r5
 8003c76:	4630      	mov	r0, r6
 8003c78:	f7ff ffa6 	bl	8003bc8 <sbrk_aligned>
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d03a      	beq.n	8003cf6 <_malloc_r+0xea>
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	442b      	add	r3, r5
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	f8d8 3000 	ldr.w	r3, [r8]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	bb62      	cbnz	r2, 8003ce8 <_malloc_r+0xdc>
 8003c8e:	f8c8 7000 	str.w	r7, [r8]
 8003c92:	e00f      	b.n	8003cb4 <_malloc_r+0xa8>
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	1b52      	subs	r2, r2, r5
 8003c98:	d420      	bmi.n	8003cdc <_malloc_r+0xd0>
 8003c9a:	2a0b      	cmp	r2, #11
 8003c9c:	d917      	bls.n	8003cce <_malloc_r+0xc2>
 8003c9e:	1961      	adds	r1, r4, r5
 8003ca0:	42a3      	cmp	r3, r4
 8003ca2:	6025      	str	r5, [r4, #0]
 8003ca4:	bf18      	it	ne
 8003ca6:	6059      	strne	r1, [r3, #4]
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	bf08      	it	eq
 8003cac:	f8c8 1000 	streq.w	r1, [r8]
 8003cb0:	5162      	str	r2, [r4, r5]
 8003cb2:	604b      	str	r3, [r1, #4]
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	f000 f9bb 	bl	8004030 <__malloc_unlock>
 8003cba:	f104 000b 	add.w	r0, r4, #11
 8003cbe:	1d23      	adds	r3, r4, #4
 8003cc0:	f020 0007 	bic.w	r0, r0, #7
 8003cc4:	1ac2      	subs	r2, r0, r3
 8003cc6:	bf1c      	itt	ne
 8003cc8:	1a1b      	subne	r3, r3, r0
 8003cca:	50a3      	strne	r3, [r4, r2]
 8003ccc:	e7af      	b.n	8003c2e <_malloc_r+0x22>
 8003cce:	6862      	ldr	r2, [r4, #4]
 8003cd0:	42a3      	cmp	r3, r4
 8003cd2:	bf0c      	ite	eq
 8003cd4:	f8c8 2000 	streq.w	r2, [r8]
 8003cd8:	605a      	strne	r2, [r3, #4]
 8003cda:	e7eb      	b.n	8003cb4 <_malloc_r+0xa8>
 8003cdc:	4623      	mov	r3, r4
 8003cde:	6864      	ldr	r4, [r4, #4]
 8003ce0:	e7ae      	b.n	8003c40 <_malloc_r+0x34>
 8003ce2:	463c      	mov	r4, r7
 8003ce4:	687f      	ldr	r7, [r7, #4]
 8003ce6:	e7b6      	b.n	8003c56 <_malloc_r+0x4a>
 8003ce8:	461a      	mov	r2, r3
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	42a3      	cmp	r3, r4
 8003cee:	d1fb      	bne.n	8003ce8 <_malloc_r+0xdc>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	6053      	str	r3, [r2, #4]
 8003cf4:	e7de      	b.n	8003cb4 <_malloc_r+0xa8>
 8003cf6:	230c      	movs	r3, #12
 8003cf8:	6033      	str	r3, [r6, #0]
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	f000 f998 	bl	8004030 <__malloc_unlock>
 8003d00:	e794      	b.n	8003c2c <_malloc_r+0x20>
 8003d02:	6005      	str	r5, [r0, #0]
 8003d04:	e7d6      	b.n	8003cb4 <_malloc_r+0xa8>
 8003d06:	bf00      	nop
 8003d08:	20000358 	.word	0x20000358

08003d0c <_printf_common>:
 8003d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d10:	4616      	mov	r6, r2
 8003d12:	4698      	mov	r8, r3
 8003d14:	688a      	ldr	r2, [r1, #8]
 8003d16:	690b      	ldr	r3, [r1, #16]
 8003d18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	bfb8      	it	lt
 8003d20:	4613      	movlt	r3, r2
 8003d22:	6033      	str	r3, [r6, #0]
 8003d24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d28:	4607      	mov	r7, r0
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	b10a      	cbz	r2, 8003d32 <_printf_common+0x26>
 8003d2e:	3301      	adds	r3, #1
 8003d30:	6033      	str	r3, [r6, #0]
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	0699      	lsls	r1, r3, #26
 8003d36:	bf42      	ittt	mi
 8003d38:	6833      	ldrmi	r3, [r6, #0]
 8003d3a:	3302      	addmi	r3, #2
 8003d3c:	6033      	strmi	r3, [r6, #0]
 8003d3e:	6825      	ldr	r5, [r4, #0]
 8003d40:	f015 0506 	ands.w	r5, r5, #6
 8003d44:	d106      	bne.n	8003d54 <_printf_common+0x48>
 8003d46:	f104 0a19 	add.w	sl, r4, #25
 8003d4a:	68e3      	ldr	r3, [r4, #12]
 8003d4c:	6832      	ldr	r2, [r6, #0]
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	42ab      	cmp	r3, r5
 8003d52:	dc26      	bgt.n	8003da2 <_printf_common+0x96>
 8003d54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d58:	6822      	ldr	r2, [r4, #0]
 8003d5a:	3b00      	subs	r3, #0
 8003d5c:	bf18      	it	ne
 8003d5e:	2301      	movne	r3, #1
 8003d60:	0692      	lsls	r2, r2, #26
 8003d62:	d42b      	bmi.n	8003dbc <_printf_common+0xb0>
 8003d64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d68:	4641      	mov	r1, r8
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	47c8      	blx	r9
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d01e      	beq.n	8003db0 <_printf_common+0xa4>
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	6922      	ldr	r2, [r4, #16]
 8003d76:	f003 0306 	and.w	r3, r3, #6
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	bf02      	ittt	eq
 8003d7e:	68e5      	ldreq	r5, [r4, #12]
 8003d80:	6833      	ldreq	r3, [r6, #0]
 8003d82:	1aed      	subeq	r5, r5, r3
 8003d84:	68a3      	ldr	r3, [r4, #8]
 8003d86:	bf0c      	ite	eq
 8003d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d8c:	2500      	movne	r5, #0
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	bfc4      	itt	gt
 8003d92:	1a9b      	subgt	r3, r3, r2
 8003d94:	18ed      	addgt	r5, r5, r3
 8003d96:	2600      	movs	r6, #0
 8003d98:	341a      	adds	r4, #26
 8003d9a:	42b5      	cmp	r5, r6
 8003d9c:	d11a      	bne.n	8003dd4 <_printf_common+0xc8>
 8003d9e:	2000      	movs	r0, #0
 8003da0:	e008      	b.n	8003db4 <_printf_common+0xa8>
 8003da2:	2301      	movs	r3, #1
 8003da4:	4652      	mov	r2, sl
 8003da6:	4641      	mov	r1, r8
 8003da8:	4638      	mov	r0, r7
 8003daa:	47c8      	blx	r9
 8003dac:	3001      	adds	r0, #1
 8003dae:	d103      	bne.n	8003db8 <_printf_common+0xac>
 8003db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db8:	3501      	adds	r5, #1
 8003dba:	e7c6      	b.n	8003d4a <_printf_common+0x3e>
 8003dbc:	18e1      	adds	r1, r4, r3
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	2030      	movs	r0, #48	@ 0x30
 8003dc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dc6:	4422      	add	r2, r4
 8003dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003dcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	e7c7      	b.n	8003d64 <_printf_common+0x58>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	4641      	mov	r1, r8
 8003dda:	4638      	mov	r0, r7
 8003ddc:	47c8      	blx	r9
 8003dde:	3001      	adds	r0, #1
 8003de0:	d0e6      	beq.n	8003db0 <_printf_common+0xa4>
 8003de2:	3601      	adds	r6, #1
 8003de4:	e7d9      	b.n	8003d9a <_printf_common+0x8e>
	...

08003de8 <_printf_i>:
 8003de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dec:	7e0f      	ldrb	r7, [r1, #24]
 8003dee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003df0:	2f78      	cmp	r7, #120	@ 0x78
 8003df2:	4691      	mov	r9, r2
 8003df4:	4680      	mov	r8, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	469a      	mov	sl, r3
 8003dfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003dfe:	d807      	bhi.n	8003e10 <_printf_i+0x28>
 8003e00:	2f62      	cmp	r7, #98	@ 0x62
 8003e02:	d80a      	bhi.n	8003e1a <_printf_i+0x32>
 8003e04:	2f00      	cmp	r7, #0
 8003e06:	f000 80d1 	beq.w	8003fac <_printf_i+0x1c4>
 8003e0a:	2f58      	cmp	r7, #88	@ 0x58
 8003e0c:	f000 80b8 	beq.w	8003f80 <_printf_i+0x198>
 8003e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e18:	e03a      	b.n	8003e90 <_printf_i+0xa8>
 8003e1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e1e:	2b15      	cmp	r3, #21
 8003e20:	d8f6      	bhi.n	8003e10 <_printf_i+0x28>
 8003e22:	a101      	add	r1, pc, #4	@ (adr r1, 8003e28 <_printf_i+0x40>)
 8003e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e28:	08003e81 	.word	0x08003e81
 8003e2c:	08003e95 	.word	0x08003e95
 8003e30:	08003e11 	.word	0x08003e11
 8003e34:	08003e11 	.word	0x08003e11
 8003e38:	08003e11 	.word	0x08003e11
 8003e3c:	08003e11 	.word	0x08003e11
 8003e40:	08003e95 	.word	0x08003e95
 8003e44:	08003e11 	.word	0x08003e11
 8003e48:	08003e11 	.word	0x08003e11
 8003e4c:	08003e11 	.word	0x08003e11
 8003e50:	08003e11 	.word	0x08003e11
 8003e54:	08003f93 	.word	0x08003f93
 8003e58:	08003ebf 	.word	0x08003ebf
 8003e5c:	08003f4d 	.word	0x08003f4d
 8003e60:	08003e11 	.word	0x08003e11
 8003e64:	08003e11 	.word	0x08003e11
 8003e68:	08003fb5 	.word	0x08003fb5
 8003e6c:	08003e11 	.word	0x08003e11
 8003e70:	08003ebf 	.word	0x08003ebf
 8003e74:	08003e11 	.word	0x08003e11
 8003e78:	08003e11 	.word	0x08003e11
 8003e7c:	08003f55 	.word	0x08003f55
 8003e80:	6833      	ldr	r3, [r6, #0]
 8003e82:	1d1a      	adds	r2, r3, #4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6032      	str	r2, [r6, #0]
 8003e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e90:	2301      	movs	r3, #1
 8003e92:	e09c      	b.n	8003fce <_printf_i+0x1e6>
 8003e94:	6833      	ldr	r3, [r6, #0]
 8003e96:	6820      	ldr	r0, [r4, #0]
 8003e98:	1d19      	adds	r1, r3, #4
 8003e9a:	6031      	str	r1, [r6, #0]
 8003e9c:	0606      	lsls	r6, r0, #24
 8003e9e:	d501      	bpl.n	8003ea4 <_printf_i+0xbc>
 8003ea0:	681d      	ldr	r5, [r3, #0]
 8003ea2:	e003      	b.n	8003eac <_printf_i+0xc4>
 8003ea4:	0645      	lsls	r5, r0, #25
 8003ea6:	d5fb      	bpl.n	8003ea0 <_printf_i+0xb8>
 8003ea8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003eac:	2d00      	cmp	r5, #0
 8003eae:	da03      	bge.n	8003eb8 <_printf_i+0xd0>
 8003eb0:	232d      	movs	r3, #45	@ 0x2d
 8003eb2:	426d      	negs	r5, r5
 8003eb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eb8:	4858      	ldr	r0, [pc, #352]	@ (800401c <_printf_i+0x234>)
 8003eba:	230a      	movs	r3, #10
 8003ebc:	e011      	b.n	8003ee2 <_printf_i+0xfa>
 8003ebe:	6821      	ldr	r1, [r4, #0]
 8003ec0:	6833      	ldr	r3, [r6, #0]
 8003ec2:	0608      	lsls	r0, r1, #24
 8003ec4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ec8:	d402      	bmi.n	8003ed0 <_printf_i+0xe8>
 8003eca:	0649      	lsls	r1, r1, #25
 8003ecc:	bf48      	it	mi
 8003ece:	b2ad      	uxthmi	r5, r5
 8003ed0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ed2:	4852      	ldr	r0, [pc, #328]	@ (800401c <_printf_i+0x234>)
 8003ed4:	6033      	str	r3, [r6, #0]
 8003ed6:	bf14      	ite	ne
 8003ed8:	230a      	movne	r3, #10
 8003eda:	2308      	moveq	r3, #8
 8003edc:	2100      	movs	r1, #0
 8003ede:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ee2:	6866      	ldr	r6, [r4, #4]
 8003ee4:	60a6      	str	r6, [r4, #8]
 8003ee6:	2e00      	cmp	r6, #0
 8003ee8:	db05      	blt.n	8003ef6 <_printf_i+0x10e>
 8003eea:	6821      	ldr	r1, [r4, #0]
 8003eec:	432e      	orrs	r6, r5
 8003eee:	f021 0104 	bic.w	r1, r1, #4
 8003ef2:	6021      	str	r1, [r4, #0]
 8003ef4:	d04b      	beq.n	8003f8e <_printf_i+0x1a6>
 8003ef6:	4616      	mov	r6, r2
 8003ef8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003efc:	fb03 5711 	mls	r7, r3, r1, r5
 8003f00:	5dc7      	ldrb	r7, [r0, r7]
 8003f02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f06:	462f      	mov	r7, r5
 8003f08:	42bb      	cmp	r3, r7
 8003f0a:	460d      	mov	r5, r1
 8003f0c:	d9f4      	bls.n	8003ef8 <_printf_i+0x110>
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d10b      	bne.n	8003f2a <_printf_i+0x142>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	07df      	lsls	r7, r3, #31
 8003f16:	d508      	bpl.n	8003f2a <_printf_i+0x142>
 8003f18:	6923      	ldr	r3, [r4, #16]
 8003f1a:	6861      	ldr	r1, [r4, #4]
 8003f1c:	4299      	cmp	r1, r3
 8003f1e:	bfde      	ittt	le
 8003f20:	2330      	movle	r3, #48	@ 0x30
 8003f22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f26:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003f2a:	1b92      	subs	r2, r2, r6
 8003f2c:	6122      	str	r2, [r4, #16]
 8003f2e:	f8cd a000 	str.w	sl, [sp]
 8003f32:	464b      	mov	r3, r9
 8003f34:	aa03      	add	r2, sp, #12
 8003f36:	4621      	mov	r1, r4
 8003f38:	4640      	mov	r0, r8
 8003f3a:	f7ff fee7 	bl	8003d0c <_printf_common>
 8003f3e:	3001      	adds	r0, #1
 8003f40:	d14a      	bne.n	8003fd8 <_printf_i+0x1f0>
 8003f42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f46:	b004      	add	sp, #16
 8003f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	f043 0320 	orr.w	r3, r3, #32
 8003f52:	6023      	str	r3, [r4, #0]
 8003f54:	4832      	ldr	r0, [pc, #200]	@ (8004020 <_printf_i+0x238>)
 8003f56:	2778      	movs	r7, #120	@ 0x78
 8003f58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	6831      	ldr	r1, [r6, #0]
 8003f60:	061f      	lsls	r7, r3, #24
 8003f62:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f66:	d402      	bmi.n	8003f6e <_printf_i+0x186>
 8003f68:	065f      	lsls	r7, r3, #25
 8003f6a:	bf48      	it	mi
 8003f6c:	b2ad      	uxthmi	r5, r5
 8003f6e:	6031      	str	r1, [r6, #0]
 8003f70:	07d9      	lsls	r1, r3, #31
 8003f72:	bf44      	itt	mi
 8003f74:	f043 0320 	orrmi.w	r3, r3, #32
 8003f78:	6023      	strmi	r3, [r4, #0]
 8003f7a:	b11d      	cbz	r5, 8003f84 <_printf_i+0x19c>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	e7ad      	b.n	8003edc <_printf_i+0xf4>
 8003f80:	4826      	ldr	r0, [pc, #152]	@ (800401c <_printf_i+0x234>)
 8003f82:	e7e9      	b.n	8003f58 <_printf_i+0x170>
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	f023 0320 	bic.w	r3, r3, #32
 8003f8a:	6023      	str	r3, [r4, #0]
 8003f8c:	e7f6      	b.n	8003f7c <_printf_i+0x194>
 8003f8e:	4616      	mov	r6, r2
 8003f90:	e7bd      	b.n	8003f0e <_printf_i+0x126>
 8003f92:	6833      	ldr	r3, [r6, #0]
 8003f94:	6825      	ldr	r5, [r4, #0]
 8003f96:	6961      	ldr	r1, [r4, #20]
 8003f98:	1d18      	adds	r0, r3, #4
 8003f9a:	6030      	str	r0, [r6, #0]
 8003f9c:	062e      	lsls	r6, r5, #24
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	d501      	bpl.n	8003fa6 <_printf_i+0x1be>
 8003fa2:	6019      	str	r1, [r3, #0]
 8003fa4:	e002      	b.n	8003fac <_printf_i+0x1c4>
 8003fa6:	0668      	lsls	r0, r5, #25
 8003fa8:	d5fb      	bpl.n	8003fa2 <_printf_i+0x1ba>
 8003faa:	8019      	strh	r1, [r3, #0]
 8003fac:	2300      	movs	r3, #0
 8003fae:	6123      	str	r3, [r4, #16]
 8003fb0:	4616      	mov	r6, r2
 8003fb2:	e7bc      	b.n	8003f2e <_printf_i+0x146>
 8003fb4:	6833      	ldr	r3, [r6, #0]
 8003fb6:	1d1a      	adds	r2, r3, #4
 8003fb8:	6032      	str	r2, [r6, #0]
 8003fba:	681e      	ldr	r6, [r3, #0]
 8003fbc:	6862      	ldr	r2, [r4, #4]
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	f7fc f915 	bl	80001f0 <memchr>
 8003fc6:	b108      	cbz	r0, 8003fcc <_printf_i+0x1e4>
 8003fc8:	1b80      	subs	r0, r0, r6
 8003fca:	6060      	str	r0, [r4, #4]
 8003fcc:	6863      	ldr	r3, [r4, #4]
 8003fce:	6123      	str	r3, [r4, #16]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fd6:	e7aa      	b.n	8003f2e <_printf_i+0x146>
 8003fd8:	6923      	ldr	r3, [r4, #16]
 8003fda:	4632      	mov	r2, r6
 8003fdc:	4649      	mov	r1, r9
 8003fde:	4640      	mov	r0, r8
 8003fe0:	47d0      	blx	sl
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d0ad      	beq.n	8003f42 <_printf_i+0x15a>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	079b      	lsls	r3, r3, #30
 8003fea:	d413      	bmi.n	8004014 <_printf_i+0x22c>
 8003fec:	68e0      	ldr	r0, [r4, #12]
 8003fee:	9b03      	ldr	r3, [sp, #12]
 8003ff0:	4298      	cmp	r0, r3
 8003ff2:	bfb8      	it	lt
 8003ff4:	4618      	movlt	r0, r3
 8003ff6:	e7a6      	b.n	8003f46 <_printf_i+0x15e>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	4632      	mov	r2, r6
 8003ffc:	4649      	mov	r1, r9
 8003ffe:	4640      	mov	r0, r8
 8004000:	47d0      	blx	sl
 8004002:	3001      	adds	r0, #1
 8004004:	d09d      	beq.n	8003f42 <_printf_i+0x15a>
 8004006:	3501      	adds	r5, #1
 8004008:	68e3      	ldr	r3, [r4, #12]
 800400a:	9903      	ldr	r1, [sp, #12]
 800400c:	1a5b      	subs	r3, r3, r1
 800400e:	42ab      	cmp	r3, r5
 8004010:	dcf2      	bgt.n	8003ff8 <_printf_i+0x210>
 8004012:	e7eb      	b.n	8003fec <_printf_i+0x204>
 8004014:	2500      	movs	r5, #0
 8004016:	f104 0619 	add.w	r6, r4, #25
 800401a:	e7f5      	b.n	8004008 <_printf_i+0x220>
 800401c:	08004329 	.word	0x08004329
 8004020:	0800433a 	.word	0x0800433a

08004024 <__malloc_lock>:
 8004024:	4801      	ldr	r0, [pc, #4]	@ (800402c <__malloc_lock+0x8>)
 8004026:	f7ff bc75 	b.w	8003914 <__retarget_lock_acquire_recursive>
 800402a:	bf00      	nop
 800402c:	20000350 	.word	0x20000350

08004030 <__malloc_unlock>:
 8004030:	4801      	ldr	r0, [pc, #4]	@ (8004038 <__malloc_unlock+0x8>)
 8004032:	f7ff bc70 	b.w	8003916 <__retarget_lock_release_recursive>
 8004036:	bf00      	nop
 8004038:	20000350 	.word	0x20000350

0800403c <_realloc_r>:
 800403c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004040:	4607      	mov	r7, r0
 8004042:	4614      	mov	r4, r2
 8004044:	460d      	mov	r5, r1
 8004046:	b921      	cbnz	r1, 8004052 <_realloc_r+0x16>
 8004048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800404c:	4611      	mov	r1, r2
 800404e:	f7ff bddd 	b.w	8003c0c <_malloc_r>
 8004052:	b92a      	cbnz	r2, 8004060 <_realloc_r+0x24>
 8004054:	f000 f858 	bl	8004108 <_free_r>
 8004058:	4625      	mov	r5, r4
 800405a:	4628      	mov	r0, r5
 800405c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004060:	f000 f89c 	bl	800419c <_malloc_usable_size_r>
 8004064:	4284      	cmp	r4, r0
 8004066:	4606      	mov	r6, r0
 8004068:	d802      	bhi.n	8004070 <_realloc_r+0x34>
 800406a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800406e:	d8f4      	bhi.n	800405a <_realloc_r+0x1e>
 8004070:	4621      	mov	r1, r4
 8004072:	4638      	mov	r0, r7
 8004074:	f7ff fdca 	bl	8003c0c <_malloc_r>
 8004078:	4680      	mov	r8, r0
 800407a:	b908      	cbnz	r0, 8004080 <_realloc_r+0x44>
 800407c:	4645      	mov	r5, r8
 800407e:	e7ec      	b.n	800405a <_realloc_r+0x1e>
 8004080:	42b4      	cmp	r4, r6
 8004082:	4622      	mov	r2, r4
 8004084:	4629      	mov	r1, r5
 8004086:	bf28      	it	cs
 8004088:	4632      	movcs	r2, r6
 800408a:	f000 f82f 	bl	80040ec <memcpy>
 800408e:	4629      	mov	r1, r5
 8004090:	4638      	mov	r0, r7
 8004092:	f000 f839 	bl	8004108 <_free_r>
 8004096:	e7f1      	b.n	800407c <_realloc_r+0x40>

08004098 <memmove>:
 8004098:	4288      	cmp	r0, r1
 800409a:	b510      	push	{r4, lr}
 800409c:	eb01 0402 	add.w	r4, r1, r2
 80040a0:	d902      	bls.n	80040a8 <memmove+0x10>
 80040a2:	4284      	cmp	r4, r0
 80040a4:	4623      	mov	r3, r4
 80040a6:	d807      	bhi.n	80040b8 <memmove+0x20>
 80040a8:	1e43      	subs	r3, r0, #1
 80040aa:	42a1      	cmp	r1, r4
 80040ac:	d008      	beq.n	80040c0 <memmove+0x28>
 80040ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040b6:	e7f8      	b.n	80040aa <memmove+0x12>
 80040b8:	4402      	add	r2, r0
 80040ba:	4601      	mov	r1, r0
 80040bc:	428a      	cmp	r2, r1
 80040be:	d100      	bne.n	80040c2 <memmove+0x2a>
 80040c0:	bd10      	pop	{r4, pc}
 80040c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040ca:	e7f7      	b.n	80040bc <memmove+0x24>

080040cc <_sbrk_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	4d06      	ldr	r5, [pc, #24]	@ (80040e8 <_sbrk_r+0x1c>)
 80040d0:	2300      	movs	r3, #0
 80040d2:	4604      	mov	r4, r0
 80040d4:	4608      	mov	r0, r1
 80040d6:	602b      	str	r3, [r5, #0]
 80040d8:	f7fc fc32 	bl	8000940 <_sbrk>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_sbrk_r+0x1a>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_sbrk_r+0x1a>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	2000035c 	.word	0x2000035c

080040ec <memcpy>:
 80040ec:	440a      	add	r2, r1
 80040ee:	4291      	cmp	r1, r2
 80040f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80040f4:	d100      	bne.n	80040f8 <memcpy+0xc>
 80040f6:	4770      	bx	lr
 80040f8:	b510      	push	{r4, lr}
 80040fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004102:	4291      	cmp	r1, r2
 8004104:	d1f9      	bne.n	80040fa <memcpy+0xe>
 8004106:	bd10      	pop	{r4, pc}

08004108 <_free_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	4605      	mov	r5, r0
 800410c:	2900      	cmp	r1, #0
 800410e:	d041      	beq.n	8004194 <_free_r+0x8c>
 8004110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004114:	1f0c      	subs	r4, r1, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	bfb8      	it	lt
 800411a:	18e4      	addlt	r4, r4, r3
 800411c:	f7ff ff82 	bl	8004024 <__malloc_lock>
 8004120:	4a1d      	ldr	r2, [pc, #116]	@ (8004198 <_free_r+0x90>)
 8004122:	6813      	ldr	r3, [r2, #0]
 8004124:	b933      	cbnz	r3, 8004134 <_free_r+0x2c>
 8004126:	6063      	str	r3, [r4, #4]
 8004128:	6014      	str	r4, [r2, #0]
 800412a:	4628      	mov	r0, r5
 800412c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004130:	f7ff bf7e 	b.w	8004030 <__malloc_unlock>
 8004134:	42a3      	cmp	r3, r4
 8004136:	d908      	bls.n	800414a <_free_r+0x42>
 8004138:	6820      	ldr	r0, [r4, #0]
 800413a:	1821      	adds	r1, r4, r0
 800413c:	428b      	cmp	r3, r1
 800413e:	bf01      	itttt	eq
 8004140:	6819      	ldreq	r1, [r3, #0]
 8004142:	685b      	ldreq	r3, [r3, #4]
 8004144:	1809      	addeq	r1, r1, r0
 8004146:	6021      	streq	r1, [r4, #0]
 8004148:	e7ed      	b.n	8004126 <_free_r+0x1e>
 800414a:	461a      	mov	r2, r3
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	b10b      	cbz	r3, 8004154 <_free_r+0x4c>
 8004150:	42a3      	cmp	r3, r4
 8004152:	d9fa      	bls.n	800414a <_free_r+0x42>
 8004154:	6811      	ldr	r1, [r2, #0]
 8004156:	1850      	adds	r0, r2, r1
 8004158:	42a0      	cmp	r0, r4
 800415a:	d10b      	bne.n	8004174 <_free_r+0x6c>
 800415c:	6820      	ldr	r0, [r4, #0]
 800415e:	4401      	add	r1, r0
 8004160:	1850      	adds	r0, r2, r1
 8004162:	4283      	cmp	r3, r0
 8004164:	6011      	str	r1, [r2, #0]
 8004166:	d1e0      	bne.n	800412a <_free_r+0x22>
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	6053      	str	r3, [r2, #4]
 800416e:	4408      	add	r0, r1
 8004170:	6010      	str	r0, [r2, #0]
 8004172:	e7da      	b.n	800412a <_free_r+0x22>
 8004174:	d902      	bls.n	800417c <_free_r+0x74>
 8004176:	230c      	movs	r3, #12
 8004178:	602b      	str	r3, [r5, #0]
 800417a:	e7d6      	b.n	800412a <_free_r+0x22>
 800417c:	6820      	ldr	r0, [r4, #0]
 800417e:	1821      	adds	r1, r4, r0
 8004180:	428b      	cmp	r3, r1
 8004182:	bf04      	itt	eq
 8004184:	6819      	ldreq	r1, [r3, #0]
 8004186:	685b      	ldreq	r3, [r3, #4]
 8004188:	6063      	str	r3, [r4, #4]
 800418a:	bf04      	itt	eq
 800418c:	1809      	addeq	r1, r1, r0
 800418e:	6021      	streq	r1, [r4, #0]
 8004190:	6054      	str	r4, [r2, #4]
 8004192:	e7ca      	b.n	800412a <_free_r+0x22>
 8004194:	bd38      	pop	{r3, r4, r5, pc}
 8004196:	bf00      	nop
 8004198:	20000358 	.word	0x20000358

0800419c <_malloc_usable_size_r>:
 800419c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a0:	1f18      	subs	r0, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bfbc      	itt	lt
 80041a6:	580b      	ldrlt	r3, [r1, r0]
 80041a8:	18c0      	addlt	r0, r0, r3
 80041aa:	4770      	bx	lr

080041ac <_init>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	bf00      	nop
 80041b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b2:	bc08      	pop	{r3}
 80041b4:	469e      	mov	lr, r3
 80041b6:	4770      	bx	lr

080041b8 <_fini>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	bf00      	nop
 80041bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041be:	bc08      	pop	{r3}
 80041c0:	469e      	mov	lr, r3
 80041c2:	4770      	bx	lr
