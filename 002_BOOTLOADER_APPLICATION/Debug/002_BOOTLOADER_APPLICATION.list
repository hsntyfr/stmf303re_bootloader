
002_BOOTLOADER_APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004204  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080043a4  080043a4  000053a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c0  080045c0  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080045c0  080045c0  000055c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045c8  080045c8  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c8  080045c8  000055c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045cc  080045cc  000055cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080045d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006060  2**0
                  CONTENTS
 10 .bss          00000304  20000060  20000060  00006060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000364  20000364  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a74c  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c59  00000000  00000000  000107dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  00012438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002056e  00000000  00000000  00012bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bacd  00000000  00000000  0003315e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1267  00000000  00000000  0003ec2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffe92  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000005c7  00000000  00000000  000ffed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000222c  00000000  00000000  0010049c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  001026c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800438c 	.word	0x0800438c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	0800438c 	.word	0x0800438c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <bootloader_get_version_cmd>:

extern uint8_t supported_commands[];



void bootloader_get_version_cmd(uint8_t* bl_rx_data){
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

	uint8_t bl_version = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	74fb      	strb	r3, [r7, #19]
	print_message("BL_DEBUG_MSG: Running bootloader_get_version_cmd\n");
 800029c:	481e      	ldr	r0, [pc, #120]	@ (8000318 <bootloader_get_version_cmd+0x88>)
 800029e:	f000 f927 	bl	80004f0 <print_message>

	uint32_t command_packet_length = bl_rx_data[0] + 1;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc = *((uint32_t*) (bl_rx_data + command_packet_length - 4));
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	3b04      	subs	r3, #4
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	4413      	add	r3, r2
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	60bb      	str	r3, [r7, #8]

	for (uint32_t i = 0; i < command_packet_length; i++) {
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]
 80002ba:	e002      	b.n	80002c2 <bootloader_get_version_cmd+0x32>
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	3301      	adds	r3, #1
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	697a      	ldr	r2, [r7, #20]
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d3f8      	bcc.n	80002bc <bootloader_get_version_cmd+0x2c>
	}

	//HAL_UART_Transmit(&huart3, &host_crc, 4, HAL_MAX_DELAY);

	//crc kontrolu yapilacak
	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_length - 4, host_crc)){ //-4 eklenmeden önce de çalışıyordu
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	3b04      	subs	r3, #4
 80002ce:	68ba      	ldr	r2, [r7, #8]
 80002d0:	4619      	mov	r1, r3
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f000 f86e 	bl	80003b4 <bootloader_verify_crc>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d112      	bne.n	8000304 <bootloader_get_version_cmd+0x74>
		print_message("BL_DEBUG_MSG: Checksum success\n");
 80002de:	480f      	ldr	r0, [pc, #60]	@ (800031c <bootloader_get_version_cmd+0x8c>)
 80002e0:	f000 f906 	bl	80004f0 <print_message>
		bootloader_send_ack(bl_rx_data[0], 1);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2101      	movs	r1, #1
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f8b8 	bl	8000460 <bootloader_send_ack>
		bl_version = bootloader_get_version();
 80002f0:	f000 f8f6 	bl	80004e0 <bootloader_get_version>
 80002f4:	4603      	mov	r3, r0
 80002f6:	74fb      	strb	r3, [r7, #19]
		print_message("BL_DEBUG_MSG: BL_VER: %d\n", bl_version);
 80002f8:	7cfb      	ldrb	r3, [r7, #19]
 80002fa:	4619      	mov	r1, r3
 80002fc:	4808      	ldr	r0, [pc, #32]	@ (8000320 <bootloader_get_version_cmd+0x90>)
 80002fe:	f000 f8f7 	bl	80004f0 <print_message>
	else{
		print_message("BL_DEBUG_MSG: Checksum fail\n");
		bootloader_send_nack();
	}

}
 8000302:	e004      	b.n	800030e <bootloader_get_version_cmd+0x7e>
		print_message("BL_DEBUG_MSG: Checksum fail\n");
 8000304:	4807      	ldr	r0, [pc, #28]	@ (8000324 <bootloader_get_version_cmd+0x94>)
 8000306:	f000 f8f3 	bl	80004f0 <print_message>
		bootloader_send_nack();
 800030a:	f000 f8c3 	bl	8000494 <bootloader_send_nack>
}
 800030e:	bf00      	nop
 8000310:	3718      	adds	r7, #24
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	080043a4 	.word	0x080043a4
 800031c:	080043d8 	.word	0x080043d8
 8000320:	080043f8 	.word	0x080043f8
 8000324:	08004414 	.word	0x08004414

08000328 <bootloader_get_help_cmd>:

void bootloader_get_help_cmd(uint8_t* bl_rx_data){
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	print_message("BL_DEBUG_MSG: Running bootloader_get_help_cmd\n");
 8000330:	481c      	ldr	r0, [pc, #112]	@ (80003a4 <bootloader_get_help_cmd+0x7c>)
 8000332:	f000 f8dd 	bl	80004f0 <print_message>
	uint32_t command_packet_len = bl_rx_data[0] + 1;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	3301      	adds	r3, #1
 800033c:	60fb      	str	r3, [r7, #12]
	uint32_t host_crc = *((uint32_t*) bl_rx_data + command_packet_len - 4);
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000344:	3b04      	subs	r3, #4
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	4413      	add	r3, r2
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	60bb      	str	r3, [r7, #8]
	if(!bootloader_verify_crc(&bl_rx_data[0], command_packet_len - 4, host_crc)){
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	3b04      	subs	r3, #4
 8000354:	68ba      	ldr	r2, [r7, #8]
 8000356:	4619      	mov	r1, r3
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f000 f82b 	bl	80003b4 <bootloader_verify_crc>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d116      	bne.n	8000392 <bootloader_get_help_cmd+0x6a>
		print_message("BL_DEBUG_MSG: Checksum success\n");
 8000364:	4810      	ldr	r0, [pc, #64]	@ (80003a8 <bootloader_get_help_cmd+0x80>)
 8000366:	f000 f8c3 	bl	80004f0 <print_message>
		bootloader_send_ack(bl_rx_data[0], strlen(supported_commands));
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	781c      	ldrb	r4, [r3, #0]
 800036e:	480f      	ldr	r0, [pc, #60]	@ (80003ac <bootloader_get_help_cmd+0x84>)
 8000370:	f7ff ff36 	bl	80001e0 <strlen>
 8000374:	4603      	mov	r3, r0
 8000376:	b2db      	uxtb	r3, r3
 8000378:	4619      	mov	r1, r3
 800037a:	4620      	mov	r0, r4
 800037c:	f000 f870 	bl	8000460 <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands, strlen(supported_commands));
 8000380:	480a      	ldr	r0, [pc, #40]	@ (80003ac <bootloader_get_help_cmd+0x84>)
 8000382:	f7ff ff2d 	bl	80001e0 <strlen>
 8000386:	4603      	mov	r3, r0
 8000388:	4619      	mov	r1, r3
 800038a:	4808      	ldr	r0, [pc, #32]	@ (80003ac <bootloader_get_help_cmd+0x84>)
 800038c:	f000 f894 	bl	80004b8 <bootloader_uart_write_data>


	}


}
 8000390:	e004      	b.n	800039c <bootloader_get_help_cmd+0x74>
		print_message("BL_DEBUG_MSG: Checksum fail\n");
 8000392:	4807      	ldr	r0, [pc, #28]	@ (80003b0 <bootloader_get_help_cmd+0x88>)
 8000394:	f000 f8ac 	bl	80004f0 <print_message>
		bootloader_send_nack();
 8000398:	f000 f87c 	bl	8000494 <bootloader_send_nack>
}
 800039c:	bf00      	nop
 800039e:	3714      	adds	r7, #20
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd90      	pop	{r4, r7, pc}
 80003a4:	08004434 	.word	0x08004434
 80003a8:	080043d8 	.word	0x080043d8
 80003ac:	20000000 	.word	0x20000000
 80003b0:	08004414 	.word	0x08004414

080003b4 <bootloader_verify_crc>:


uint8_t bootloader_verify_crc(uint8_t *Buffer, uint32_t len, uint32_t crcHost)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08a      	sub	sp, #40	@ 0x28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
    uint32_t crcValue = 0xFF;
 80003c0:	23ff      	movs	r3, #255	@ 0xff
 80003c2:	623b      	str	r3, [r7, #32]
    uint32_t data = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61fb      	str	r3, [r7, #28]

    __HAL_CRC_DR_RESET(&hcrc);  // Reset başa alındı, daha doğru
 80003c8:	4b22      	ldr	r3, [pc, #136]	@ (8000454 <bootloader_verify_crc+0xa0>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	689a      	ldr	r2, [r3, #8]
 80003ce:	4b21      	ldr	r3, [pc, #132]	@ (8000454 <bootloader_verify_crc+0xa0>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f042 0201 	orr.w	r2, r2, #1
 80003d6:	609a      	str	r2, [r3, #8]

    for(uint32_t i = 0; i < len; i++)
 80003d8:	2300      	movs	r3, #0
 80003da:	627b      	str	r3, [r7, #36]	@ 0x24
 80003dc:	e010      	b.n	8000400 <bootloader_verify_crc+0x4c>
    {
        data = Buffer[i];
 80003de:	68fa      	ldr	r2, [r7, #12]
 80003e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003e2:	4413      	add	r3, r2
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	61fb      	str	r3, [r7, #28]
        //HAL_UART_Transmit(&huart3, &Buffer[i], 1, HAL_MAX_DELAY);
        crcValue = HAL_CRC_Accumulate(&hcrc, &data, 1);
 80003e8:	f107 031c 	add.w	r3, r7, #28
 80003ec:	2201      	movs	r2, #1
 80003ee:	4619      	mov	r1, r3
 80003f0:	4818      	ldr	r0, [pc, #96]	@ (8000454 <bootloader_verify_crc+0xa0>)
 80003f2:	f000 fddb 	bl	8000fac <HAL_CRC_Accumulate>
 80003f6:	4603      	mov	r3, r0
 80003f8:	623b      	str	r3, [r7, #32]
    for(uint32_t i = 0; i < len; i++)
 80003fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003fc:	3301      	adds	r3, #1
 80003fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	429a      	cmp	r2, r3
 8000406:	d3ea      	bcc.n	80003de <bootloader_verify_crc+0x2a>
    }



    // Hesaplanan CRC'yi UART üzerinden gönder (4 byte olarak)
    HAL_UART_Transmit(&huart3, (uint8_t*)&crcValue, 4, HAL_MAX_DELAY);
 8000408:	f107 0120 	add.w	r1, r7, #32
 800040c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000410:	2204      	movs	r2, #4
 8000412:	4811      	ldr	r0, [pc, #68]	@ (8000458 <bootloader_verify_crc+0xa4>)
 8000414:	f002 fdda 	bl	8002fcc <HAL_UART_Transmit>

    // EOL karakteri istersen okunabilirlik için ekle
    uint8_t newline[] = "\r\n";
 8000418:	4a10      	ldr	r2, [pc, #64]	@ (800045c <bootloader_verify_crc+0xa8>)
 800041a:	f107 0318 	add.w	r3, r7, #24
 800041e:	6812      	ldr	r2, [r2, #0]
 8000420:	4611      	mov	r1, r2
 8000422:	8019      	strh	r1, [r3, #0]
 8000424:	3302      	adds	r3, #2
 8000426:	0c12      	lsrs	r2, r2, #16
 8000428:	701a      	strb	r2, [r3, #0]
    //HAL_UART_Transmit(&huart3, newline, 2, HAL_MAX_DELAY);

    // Son olarak CRC karşılaştırması
    if(crcValue == crcHost)
 800042a:	6a3b      	ldr	r3, [r7, #32]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	429a      	cmp	r2, r3
 8000430:	d10b      	bne.n	800044a <bootloader_verify_crc+0x96>
    {
        uint8_t de = 'a';
 8000432:	2361      	movs	r3, #97	@ 0x61
 8000434:	75fb      	strb	r3, [r7, #23]
        HAL_UART_Transmit(&huart3, &de, 1, HAL_MAX_DELAY);
 8000436:	f107 0117 	add.w	r1, r7, #23
 800043a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800043e:	2201      	movs	r2, #1
 8000440:	4805      	ldr	r0, [pc, #20]	@ (8000458 <bootloader_verify_crc+0xa4>)
 8000442:	f002 fdc3 	bl	8002fcc <HAL_UART_Transmit>
        return CRC_SUCCESS;
 8000446:	2300      	movs	r3, #0
 8000448:	e000      	b.n	800044c <bootloader_verify_crc+0x98>
    }

    return CRC_FAIL;
 800044a:	2301      	movs	r3, #1
}
 800044c:	4618      	mov	r0, r3
 800044e:	3728      	adds	r7, #40	@ 0x28
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	2000007c 	.word	0x2000007c
 8000458:	20000128 	.word	0x20000128
 800045c:	08004464 	.word	0x08004464

08000460 <bootloader_send_ack>:



void bootloader_send_ack(uint8_t command_code, uint8_t follow_length){
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	4603      	mov	r3, r0
 8000468:	460a      	mov	r2, r1
 800046a:	71fb      	strb	r3, [r7, #7]
 800046c:	4613      	mov	r3, r2
 800046e:	71bb      	strb	r3, [r7, #6]
	uint8_t ack_buffer[2];
	ack_buffer[0] = BL_ACK_VALUE;
 8000470:	23a5      	movs	r3, #165	@ 0xa5
 8000472:	733b      	strb	r3, [r7, #12]
	ack_buffer[1] = follow_length;
 8000474:	79bb      	ldrb	r3, [r7, #6]
 8000476:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart3, ack_buffer, 2, HAL_MAX_DELAY);
 8000478:	f107 010c 	add.w	r1, r7, #12
 800047c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000480:	2202      	movs	r2, #2
 8000482:	4803      	ldr	r0, [pc, #12]	@ (8000490 <bootloader_send_ack+0x30>)
 8000484:	f002 fda2 	bl	8002fcc <HAL_UART_Transmit>
}
 8000488:	bf00      	nop
 800048a:	3710      	adds	r7, #16
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000128 	.word	0x20000128

08000494 <bootloader_send_nack>:


void bootloader_send_nack(){
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
	uint8_t nack_value = BL_NACK_VALUE;
 800049a:	237f      	movs	r3, #127	@ 0x7f
 800049c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &nack_value, 1, HAL_MAX_DELAY);
 800049e:	1df9      	adds	r1, r7, #7
 80004a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004a4:	2201      	movs	r2, #1
 80004a6:	4803      	ldr	r0, [pc, #12]	@ (80004b4 <bootloader_send_nack+0x20>)
 80004a8:	f002 fd90 	bl	8002fcc <HAL_UART_Transmit>

}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000128 	.word	0x20000128

080004b8 <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *buffer, uint32_t len){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart3, buffer, len, HAL_MAX_DELAY);
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	b29a      	uxth	r2, r3
 80004c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004ca:	6879      	ldr	r1, [r7, #4]
 80004cc:	4803      	ldr	r0, [pc, #12]	@ (80004dc <bootloader_uart_write_data+0x24>)
 80004ce:	f002 fd7d 	bl	8002fcc <HAL_UART_Transmit>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000128 	.word	0x20000128

080004e0 <bootloader_get_version>:

uint8_t bootloader_get_version(void){
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
	return BL_VER;
 80004e4:	2310      	movs	r3, #16
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <print_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_message(char* format, ...){
 80004f0:	b40f      	push	{r0, r1, r2, r3}
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b09a      	sub	sp, #104	@ 0x68
 80004f6:	af00      	add	r7, sp, #0

	char coming_message[100];

	va_list va_list;
	va_start(va_list, format);
 80004f8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80004fc:	603b      	str	r3, [r7, #0]
	vsprintf(coming_message, format, va_list);
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000504:	4618      	mov	r0, r3
 8000506:	f003 fab9 	bl	8003a7c <vsiprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)coming_message, strlen(coming_message), HAL_MAX_DELAY);
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff fe67 	bl	80001e0 <strlen>
 8000512:	4603      	mov	r3, r0
 8000514:	b29a      	uxth	r2, r3
 8000516:	1d39      	adds	r1, r7, #4
 8000518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800051c:	4804      	ldr	r0, [pc, #16]	@ (8000530 <print_message+0x40>)
 800051e:	f002 fd55 	bl	8002fcc <HAL_UART_Transmit>
	va_end(va_list);
}
 8000522:	bf00      	nop
 8000524:	3768      	adds	r7, #104	@ 0x68
 8000526:	46bd      	mov	sp, r7
 8000528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800052c:	b004      	add	sp, #16
 800052e:	4770      	bx	lr
 8000530:	200000a0 	.word	0x200000a0

08000534 <bootloader_uart_read_data>:

void bootloader_uart_read_data(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
    // Fonksiyona girildiğinde mesaj gönder
    char* giris_mesaji = "BLi\r\n";
 800053a:	4b27      	ldr	r3, [pc, #156]	@ (80005d8 <bootloader_uart_read_data+0xa4>)
 800053c:	60bb      	str	r3, [r7, #8]
    HAL_UART_Transmit(&huart3, (uint8_t*)giris_mesaji, strlen(giris_mesaji), HAL_MAX_DELAY);
 800053e:	68b8      	ldr	r0, [r7, #8]
 8000540:	f7ff fe4e 	bl	80001e0 <strlen>
 8000544:	4603      	mov	r3, r0
 8000546:	b29a      	uxth	r2, r3
 8000548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800054c:	68b9      	ldr	r1, [r7, #8]
 800054e:	4823      	ldr	r0, [pc, #140]	@ (80005dc <bootloader_uart_read_data+0xa8>)
 8000550:	f002 fd3c 	bl	8002fcc <HAL_UART_Transmit>

    uint8_t bl_rx_length = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	71fb      	strb	r3, [r7, #7]

    while (1)
    {
        // 1. RX buffer'ı temizle
        memset(bootloader_rx_data, 0, BL_RX_DATA_LENGTH);
 8000558:	2264      	movs	r2, #100	@ 0x64
 800055a:	2100      	movs	r1, #0
 800055c:	4820      	ldr	r0, [pc, #128]	@ (80005e0 <bootloader_uart_read_data+0xac>)
 800055e:	f003 fa97 	bl	8003a90 <memset>

        // 2. İlk byte'ı al (veri uzunluğu)
        HAL_UART_Receive(&huart3, bootloader_rx_data, 1, HAL_MAX_DELAY);
 8000562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000566:	2201      	movs	r2, #1
 8000568:	491d      	ldr	r1, [pc, #116]	@ (80005e0 <bootloader_uart_read_data+0xac>)
 800056a:	481c      	ldr	r0, [pc, #112]	@ (80005dc <bootloader_uart_read_data+0xa8>)
 800056c:	f002 fdb7 	bl	80030de <HAL_UART_Receive>

        // 3. Alınan ilk byte'ı geri gönder (echo)
        //HAL_UART_Transmit(&huart3, bootloader_rx_data, 1, HAL_MAX_DELAY);

        // 4. İlk byte'ı uzunluk olarak kullan
        bl_rx_length = bootloader_rx_data[0];
 8000570:	4b1b      	ldr	r3, [pc, #108]	@ (80005e0 <bootloader_uart_read_data+0xac>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	71fb      	strb	r3, [r7, #7]

        // 5. bl_rx_length kadar veri al
        HAL_UART_Receive(&huart3, &bootloader_rx_data[1], bl_rx_length, HAL_MAX_DELAY);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	b29a      	uxth	r2, r3
 800057a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800057e:	4919      	ldr	r1, [pc, #100]	@ (80005e4 <bootloader_uart_read_data+0xb0>)
 8000580:	4816      	ldr	r0, [pc, #88]	@ (80005dc <bootloader_uart_read_data+0xa8>)
 8000582:	f002 fdac 	bl	80030de <HAL_UART_Receive>

        switch (bootloader_rx_data[1])
 8000586:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <bootloader_uart_read_data+0xac>)
 8000588:	785b      	ldrb	r3, [r3, #1]
 800058a:	2b51      	cmp	r3, #81	@ 0x51
 800058c:	d002      	beq.n	8000594 <bootloader_uart_read_data+0x60>
 800058e:	2b52      	cmp	r3, #82	@ 0x52
 8000590:	d00e      	beq.n	80005b0 <bootloader_uart_read_data+0x7c>
 8000592:	e011      	b.n	80005b8 <bootloader_uart_read_data+0x84>
        {
            case BL_GET_VER:
                for (int i = 0; i < bl_rx_length + 1; i++) {
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	e002      	b.n	80005a0 <bootloader_uart_read_data+0x6c>
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3301      	adds	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	ddf8      	ble.n	800059a <bootloader_uart_read_data+0x66>
                    //HAL_UART_Transmit(&huart3, &bootloader_rx_data[i], 1, HAL_MAX_DELAY);
                }

                bootloader_get_version_cmd(bootloader_rx_data);
 80005a8:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <bootloader_uart_read_data+0xac>)
 80005aa:	f7ff fe71 	bl	8000290 <bootloader_get_version_cmd>
                break;
 80005ae:	e011      	b.n	80005d4 <bootloader_uart_read_data+0xa0>

            case BL_GET_HELP:
                bootloader_get_help_cmd(bootloader_rx_data);
 80005b0:	480b      	ldr	r0, [pc, #44]	@ (80005e0 <bootloader_uart_read_data+0xac>)
 80005b2:	f7ff feb9 	bl	8000328 <bootloader_get_help_cmd>
                break;
 80005b6:	e00d      	b.n	80005d4 <bootloader_uart_read_data+0xa0>

            default:
            {
                char* unknown_cmd = "Bilinmeyen komut!\r\n";
 80005b8:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <bootloader_uart_read_data+0xb4>)
 80005ba:	603b      	str	r3, [r7, #0]
                HAL_UART_Transmit(&huart3, (uint8_t*)unknown_cmd, strlen(unknown_cmd), HAL_MAX_DELAY);
 80005bc:	6838      	ldr	r0, [r7, #0]
 80005be:	f7ff fe0f 	bl	80001e0 <strlen>
 80005c2:	4603      	mov	r3, r0
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ca:	6839      	ldr	r1, [r7, #0]
 80005cc:	4803      	ldr	r0, [pc, #12]	@ (80005dc <bootloader_uart_read_data+0xa8>)
 80005ce:	f002 fcfd 	bl	8002fcc <HAL_UART_Transmit>
                break;
 80005d2:	bf00      	nop
        memset(bootloader_rx_data, 0, BL_RX_DATA_LENGTH);
 80005d4:	e7c0      	b.n	8000558 <bootloader_uart_read_data+0x24>
 80005d6:	bf00      	nop
 80005d8:	08004468 	.word	0x08004468
 80005dc:	20000128 	.word	0x20000128
 80005e0:	200001b0 	.word	0x200001b0
 80005e4:	200001b1 	.word	0x200001b1
 80005e8:	08004470 	.word	0x08004470

080005ec <bootloader_jump_to_user_application>:
}




void bootloader_jump_to_user_application() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0


	//1- reset handlerin adresini tutan bir metot işaretçisi
	void (*bootloader_application_reset_handler) (void);
	//2- kullanıcı uygulamasına atlandığını ilet
	print_message("BL DEBUG MSG: bootloader_jump_to_user_application called\n");
 80005f2:	480d      	ldr	r0, [pc, #52]	@ (8000628 <bootloader_jump_to_user_application+0x3c>)
 80005f4:	f7ff ff7c 	bl	80004f0 <print_message>
	//3- MSP'nin değerini tut
	uint32_t MSP_value = *(volatile uint32_t*) FLASH_SECTOR_2_BASE_ADDRESS;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <bootloader_jump_to_user_application+0x40>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]
	uint32_t reset_value = *(volatile uint32_t*) (FLASH_SECTOR_2_BASE_ADDRESS + 4);
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <bootloader_jump_to_user_application+0x44>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	60bb      	str	r3, [r7, #8]
	bootloader_application_reset_handler = (void *) reset_value;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	607b      	str	r3, [r7, #4]
	print_message("BL DEBUG MODE: MSP value: %#x\n", MSP_value);
 8000608:	68f9      	ldr	r1, [r7, #12]
 800060a:	480a      	ldr	r0, [pc, #40]	@ (8000634 <bootloader_jump_to_user_application+0x48>)
 800060c:	f7ff ff70 	bl	80004f0 <print_message>
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	f383 8808 	msr	MSP, r3
}
 800061a:	bf00      	nop
	//setmsp den sonra bir metot vb olursa işlevini yerine getiremeyebilir
	__set_MSP(MSP_value);
	bootloader_application_reset_handler();
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4798      	blx	r3
	bootloader_application_reset_handler = (void *) reset_value;
	print_message("BL DEBUG MODE: reset value: %#x\n", reset_value);
	bootloader_application_reset_handler();*/


}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	08004484 	.word	0x08004484
 800062c:	08008000 	.word	0x08008000
 8000630:	08008004 	.word	0x08008004
 8000634:	080044c0 	.word	0x080044c0

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 fae2 	bl	8000c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f832 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 f906 	bl	8000854 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000648:	f000 f8a4 	bl	8000794 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800064c:	f000 f880 	bl	8000750 <MX_CRC_Init>
  MX_USART3_UART_Init();
 8000650:	f000 f8d0 	bl	80007f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_SET){
 8000654:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000658:	4810      	ldr	r0, [pc, #64]	@ (800069c <main+0x64>)
 800065a:	f000 ffcd 	bl	80015f8 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d00b      	beq.n	800067c <main+0x44>

	  print_message("BL DEBUG MODE: Button is pressed go to BL mode\n");
 8000664:	480e      	ldr	r0, [pc, #56]	@ (80006a0 <main+0x68>)
 8000666:	f7ff ff43 	bl	80004f0 <print_message>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2120      	movs	r1, #32
 800066e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000672:	f000 ffd9 	bl	8001628 <HAL_GPIO_WritePin>
	  bootloader_uart_read_data();
 8000676:	f7ff ff5d 	bl	8000534 <bootloader_uart_read_data>
 800067a:	e004      	b.n	8000686 <main+0x4e>

  }
  else {

	  print_message("BL DEBUG MODE: Button is not pressed executing user application\n");
 800067c:	4809      	ldr	r0, [pc, #36]	@ (80006a4 <main+0x6c>)
 800067e:	f7ff ff37 	bl	80004f0 <print_message>

	  bootloader_jump_to_user_application();
 8000682:	f7ff ffb3 	bl	80005ec <bootloader_jump_to_user_application>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000686:	2120      	movs	r1, #32
 8000688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068c:	f000 ffe4 	bl	8001658 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000690:	2064      	movs	r0, #100	@ 0x64
 8000692:	f000 fb1d 	bl	8000cd0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000696:	bf00      	nop
 8000698:	e7f5      	b.n	8000686 <main+0x4e>
 800069a:	bf00      	nop
 800069c:	48000800 	.word	0x48000800
 80006a0:	080044e0 	.word	0x080044e0
 80006a4:	08004510 	.word	0x08004510

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b0a6      	sub	sp, #152	@ 0x98
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006b2:	2228      	movs	r2, #40	@ 0x28
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f9ea 	bl	8003a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2258      	movs	r2, #88	@ 0x58
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f9dc 	bl	8003a90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 ffcb 	bl	800168c <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006fc:	f000 f904 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000714:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f001 ffda 	bl	80026d4 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000726:	f000 f8ef 	bl	8000908 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800072a:	2306      	movs	r3, #6
 800072c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f002 f9dd 	bl	8002af8 <HAL_RCCEx_PeriphCLKConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000744:	f000 f8e0 	bl	8000908 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3798      	adds	r7, #152	@ 0x98
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000754:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <MX_CRC_Init+0x3c>)
 8000756:	4a0e      	ldr	r2, [pc, #56]	@ (8000790 <MX_CRC_Init+0x40>)
 8000758:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_CRC_Init+0x3c>)
 800075c:	2200      	movs	r2, #0
 800075e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <MX_CRC_Init+0x3c>)
 8000762:	2200      	movs	r2, #0
 8000764:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_CRC_Init+0x3c>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <MX_CRC_Init+0x3c>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_CRC_Init+0x3c>)
 8000774:	2201      	movs	r2, #1
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_CRC_Init+0x3c>)
 800077a:	f000 fbb3 	bl	8000ee4 <HAL_CRC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000784:	f000 f8c0 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000007c 	.word	0x2000007c
 8000790:	40023000 	.word	0x40023000

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 800079a:	4a15      	ldr	r2, [pc, #84]	@ (80007f0 <MX_USART2_UART_Init+0x5c>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007a0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_USART2_UART_Init+0x58>)
 80007d8:	f002 fbaa 	bl	8002f30 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007e2:	f000 f891 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000a0 	.word	0x200000a0
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_USART3_UART_Init+0x58>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	@ (8000850 <MX_USART3_UART_Init+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80007fe:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000800:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000804:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_USART3_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_USART3_UART_Init+0x58>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_USART3_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_USART3_UART_Init+0x58>)
 8000838:	f002 fb7a 	bl	8002f30 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 f861 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000128 	.word	0x20000128
 8000850:	40004800 	.word	0x40004800

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b25      	ldr	r3, [pc, #148]	@ (8000900 <MX_GPIO_Init+0xac>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a24      	ldr	r2, [pc, #144]	@ (8000900 <MX_GPIO_Init+0xac>)
 8000870:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <MX_GPIO_Init+0xac>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <MX_GPIO_Init+0xac>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a1e      	ldr	r2, [pc, #120]	@ (8000900 <MX_GPIO_Init+0xac>)
 8000888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b1c      	ldr	r3, [pc, #112]	@ (8000900 <MX_GPIO_Init+0xac>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <MX_GPIO_Init+0xac>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a18      	ldr	r2, [pc, #96]	@ (8000900 <MX_GPIO_Init+0xac>)
 80008a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008a4:	6153      	str	r3, [r2, #20]
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_GPIO_Init+0xac>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ba:	f000 feb5 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4619      	mov	r1, r3
 80008d2:	480c      	ldr	r0, [pc, #48]	@ (8000904 <MX_GPIO_Init+0xb0>)
 80008d4:	f000 fd06 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008d8:	2320      	movs	r3, #32
 80008da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f2:	f000 fcf7 	bl	80012e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3720      	adds	r7, #32
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021000 	.word	0x40021000
 8000904:	48000800 	.word	0x48000800

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <Error_Handler+0x8>

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <HAL_MspInit+0x44>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <HAL_MspInit+0x44>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <HAL_MspInit+0x44>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <HAL_MspInit+0x44>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_MspInit+0x44>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <HAL_CRC_MspInit+0x38>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d10b      	bne.n	8000986 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <HAL_CRC_MspInit+0x3c>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	4a09      	ldr	r2, [pc, #36]	@ (8000998 <HAL_CRC_MspInit+0x3c>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000978:	6153      	str	r3, [r2, #20]
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <HAL_CRC_MspInit+0x3c>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023000 	.word	0x40023000
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	@ 0x30
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a3d      	ldr	r2, [pc, #244]	@ (8000ab0 <HAL_UART_MspInit+0x114>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d145      	bne.n	8000a4a <HAL_UART_MspInit+0xae>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009be:	4b3d      	ldr	r3, [pc, #244]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b3a      	ldr	r3, [pc, #232]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d2:	61bb      	str	r3, [r7, #24]
 80009d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b37      	ldr	r3, [pc, #220]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	4a36      	ldr	r2, [pc, #216]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e0:	6153      	str	r3, [r2, #20]
 80009e2:	4b34      	ldr	r3, [pc, #208]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b31      	ldr	r3, [pc, #196]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a30      	ldr	r2, [pc, #192]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 80009f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a06:	2308      	movs	r3, #8
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a16:	2307      	movs	r3, #7
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a24:	f000 fc5e 	bl	80012e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	481d      	ldr	r0, [pc, #116]	@ (8000ab8 <HAL_UART_MspInit+0x11c>)
 8000a44:	f000 fc4e 	bl	80012e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a48:	e02d      	b.n	8000aa6 <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART3)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8000abc <HAL_UART_MspInit+0x120>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d128      	bne.n	8000aa6 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a54:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	4a16      	ldr	r2, [pc, #88]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 8000a5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a5e:	61d3      	str	r3, [r2, #28]
 8000a60:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 8000a6e:	695b      	ldr	r3, [r3, #20]
 8000a70:	4a10      	ldr	r2, [pc, #64]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 8000a72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a76:	6153      	str	r3, [r2, #20]
 8000a78:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_UART_MspInit+0x118>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8;
 8000a84:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a96:	2307      	movs	r3, #7
 8000a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <HAL_UART_MspInit+0x11c>)
 8000aa2:	f000 fc1f 	bl	80012e4 <HAL_GPIO_Init>
}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	@ 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48000400 	.word	0x48000400
 8000abc:	40004800 	.word	0x40004800

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b16:	f000 f8bb 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b28:	4a14      	ldr	r2, [pc, #80]	@ (8000b7c <_sbrk+0x5c>)
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <_sbrk+0x60>)
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b34:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d102      	bne.n	8000b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <_sbrk+0x64>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	@ (8000b88 <_sbrk+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <_sbrk+0x64>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d207      	bcs.n	8000b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b50:	f002 ffa6 	bl	8003aa0 <__errno>
 8000b54:	4603      	mov	r3, r0
 8000b56:	220c      	movs	r2, #12
 8000b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b5e:	e009      	b.n	8000b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b60:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b66:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	4a05      	ldr	r2, [pc, #20]	@ (8000b84 <_sbrk+0x64>)
 8000b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20010000 	.word	0x20010000
 8000b80:	00000400 	.word	0x00000400
 8000b84:	20000214 	.word	0x20000214
 8000b88:	20000368 	.word	0x20000368

08000b8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <SystemInit+0x20>)
 8000b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b96:	4a05      	ldr	r2, [pc, #20]	@ (8000bac <SystemInit+0x20>)
 8000b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb4:	f7ff ffea 	bl	8000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	@ (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f002 ff65 	bl	8003aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff fd29 	bl	8000638 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bf4:	080045d0 	.word	0x080045d0
  ldr r2, =_sbss
 8000bf8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000bfc:	20000364 	.word	0x20000364

08000c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_2_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <HAL_Init+0x28>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	@ (8000c2c <HAL_Init+0x28>)
 8000c0e:	f043 0310 	orr.w	r3, r3, #16
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f931 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fe78 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40022000 	.word	0x40022000

08000c30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f93b 	bl	8000eca <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c6c:	f000 f911 	bl	8000e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	@ (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000004 	.word	0x20000004
 8000c88:	2000000c 	.word	0x2000000c
 8000c8c:	20000008 	.word	0x20000008

08000c90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	2000000c 	.word	0x2000000c
 8000cb4:	20000218 	.word	0x20000218

08000cb8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000218 	.word	0x20000218

08000cd0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000000c 	.word	0x2000000c

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	@ (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	@ 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff47 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5c 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e054      	b.n	8000fa0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7f5b      	ldrb	r3, [r3, #29]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d105      	bne.n	8000f0c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff fd28 	bl	800095c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2202      	movs	r2, #2
 8000f10:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	791b      	ldrb	r3, [r3, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10c      	bne.n	8000f34 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a22      	ldr	r2, [pc, #136]	@ (8000fa8 <HAL_CRC_Init+0xc4>)
 8000f20:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0218 	bic.w	r2, r2, #24
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	e00c      	b.n	8000f4e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6899      	ldr	r1, [r3, #8]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f942 	bl	80011c8 <HAL_CRCEx_Polynomial_Set>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e028      	b.n	8000fa0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	795b      	ldrb	r3, [r3, #5]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d105      	bne.n	8000f62 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	e004      	b.n	8000f6c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6912      	ldr	r2, [r2, #16]
 8000f6a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	695a      	ldr	r2, [r3, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	04c11db7 	.word	0x04c11db7

08000fac <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d006      	beq.n	8000fd8 <HAL_CRC_Accumulate+0x2c>
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d829      	bhi.n	8001022 <HAL_CRC_Accumulate+0x76>
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d019      	beq.n	8001006 <HAL_CRC_Accumulate+0x5a>
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d01e      	beq.n	8001014 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8000fd6:	e024      	b.n	8001022 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	e00a      	b.n	8000ff4 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	441a      	add	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3f0      	bcc.n	8000fde <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	613b      	str	r3, [r7, #16]
      break;
 8001004:	e00e      	b.n	8001024 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 f812 	bl	8001034 <CRC_Handle_8>
 8001010:	6138      	str	r0, [r7, #16]
      break;
 8001012:	e007      	b.n	8001024 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f000 f89b 	bl	8001154 <CRC_Handle_16>
 800101e:	6138      	str	r0, [r7, #16]
      break;
 8001020:	e000      	b.n	8001024 <HAL_CRC_Accumulate+0x78>
      break;
 8001022:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2201      	movs	r2, #1
 8001028:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800102a:	693b      	ldr	r3, [r7, #16]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	@ 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	e023      	b.n	800108e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	4413      	add	r3, r2
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	3301      	adds	r3, #1
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	440b      	add	r3, r1
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001060:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	440b      	add	r3, r1
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001070:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	3303      	adds	r3, #3
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	440b      	add	r3, r1
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001084:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001086:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	3301      	adds	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	429a      	cmp	r2, r3
 8001096:	d3d6      	bcc.n	8001046 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d04f      	beq.n	8001142 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d107      	bne.n	80010bc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	4413      	add	r3, r2
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	6812      	ldr	r2, [r2, #0]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d117      	bne.n	80010f6 <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	3301      	adds	r3, #1
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	440b      	add	r3, r1
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	8b7a      	ldrh	r2, [r7, #26]
 80010f4:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d120      	bne.n	8001142 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b21b      	sxth	r3, r3
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	3301      	adds	r3, #1
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	440b      	add	r3, r1
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b21b      	sxth	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b21b      	sxth	r3, r3
 8001122:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	8b7a      	ldrh	r2, [r7, #26]
 800112e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	4413      	add	r3, r2
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3724      	adds	r7, #36	@ 0x24
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e013      	b.n	800118e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	041a      	lsls	r2, r3, #16
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	440b      	add	r3, r1
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	085b      	lsrs	r3, r3, #1
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3e6      	bcc.n	8001166 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d009      	beq.n	80011b6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	4413      	add	r3, r2
 80011b0:	881a      	ldrh	r2, [r3, #0]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80011d8:	231f      	movs	r3, #31
 80011da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	75fb      	strb	r3, [r7, #23]
 80011ea:	e063      	b.n	80012b4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80011ec:	bf00      	nop
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1e5a      	subs	r2, r3, #1
 80011f2:	613a      	str	r2, [r7, #16]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d009      	beq.n	800120c <HAL_CRCEx_Polynomial_Set+0x44>
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	f003 031f 	and.w	r3, r3, #31
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b18      	cmp	r3, #24
 8001210:	d846      	bhi.n	80012a0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001212:	a201      	add	r2, pc, #4	@ (adr r2, 8001218 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	080012a7 	.word	0x080012a7
 800121c:	080012a1 	.word	0x080012a1
 8001220:	080012a1 	.word	0x080012a1
 8001224:	080012a1 	.word	0x080012a1
 8001228:	080012a1 	.word	0x080012a1
 800122c:	080012a1 	.word	0x080012a1
 8001230:	080012a1 	.word	0x080012a1
 8001234:	080012a1 	.word	0x080012a1
 8001238:	08001295 	.word	0x08001295
 800123c:	080012a1 	.word	0x080012a1
 8001240:	080012a1 	.word	0x080012a1
 8001244:	080012a1 	.word	0x080012a1
 8001248:	080012a1 	.word	0x080012a1
 800124c:	080012a1 	.word	0x080012a1
 8001250:	080012a1 	.word	0x080012a1
 8001254:	080012a1 	.word	0x080012a1
 8001258:	08001289 	.word	0x08001289
 800125c:	080012a1 	.word	0x080012a1
 8001260:	080012a1 	.word	0x080012a1
 8001264:	080012a1 	.word	0x080012a1
 8001268:	080012a1 	.word	0x080012a1
 800126c:	080012a1 	.word	0x080012a1
 8001270:	080012a1 	.word	0x080012a1
 8001274:	080012a1 	.word	0x080012a1
 8001278:	0800127d 	.word	0x0800127d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	2b06      	cmp	r3, #6
 8001280:	d913      	bls.n	80012aa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001286:	e010      	b.n	80012aa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	2b07      	cmp	r3, #7
 800128c:	d90f      	bls.n	80012ae <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001292:	e00c      	b.n	80012ae <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	d90b      	bls.n	80012b2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800129e:	e008      	b.n	80012b2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
        break;
 80012a4:	e006      	b.n	80012b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012a6:	bf00      	nop
 80012a8:	e004      	b.n	80012b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012aa:	bf00      	nop
 80012ac:	e002      	b.n	80012b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012ae:	bf00      	nop
 80012b0:	e000      	b.n	80012b4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80012b2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10d      	bne.n	80012d6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f023 0118 	bic.w	r1, r3, #24
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f2:	e160      	b.n	80015b6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2101      	movs	r1, #1
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8152 	beq.w	80015b0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d005      	beq.n	8001324 <HAL_GPIO_Init+0x40>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d130      	bne.n	8001386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135a:	2201      	movs	r2, #1
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 0201 	and.w	r2, r3, #1
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b03      	cmp	r3, #3
 8001390:	d017      	beq.n	80013c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d123      	bne.n	8001416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	220f      	movs	r2, #15
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	6939      	ldr	r1, [r7, #16]
 8001412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0203 	and.w	r2, r3, #3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 80ac 	beq.w	80015b0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001458:	4b5e      	ldr	r3, [pc, #376]	@ (80015d4 <HAL_GPIO_Init+0x2f0>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a5d      	ldr	r2, [pc, #372]	@ (80015d4 <HAL_GPIO_Init+0x2f0>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b5b      	ldr	r3, [pc, #364]	@ (80015d4 <HAL_GPIO_Init+0x2f0>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001470:	4a59      	ldr	r2, [pc, #356]	@ (80015d8 <HAL_GPIO_Init+0x2f4>)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800149a:	d025      	beq.n	80014e8 <HAL_GPIO_Init+0x204>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a4f      	ldr	r2, [pc, #316]	@ (80015dc <HAL_GPIO_Init+0x2f8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d01f      	beq.n	80014e4 <HAL_GPIO_Init+0x200>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a4e      	ldr	r2, [pc, #312]	@ (80015e0 <HAL_GPIO_Init+0x2fc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d019      	beq.n	80014e0 <HAL_GPIO_Init+0x1fc>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a4d      	ldr	r2, [pc, #308]	@ (80015e4 <HAL_GPIO_Init+0x300>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d013      	beq.n	80014dc <HAL_GPIO_Init+0x1f8>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a4c      	ldr	r2, [pc, #304]	@ (80015e8 <HAL_GPIO_Init+0x304>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d00d      	beq.n	80014d8 <HAL_GPIO_Init+0x1f4>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a4b      	ldr	r2, [pc, #300]	@ (80015ec <HAL_GPIO_Init+0x308>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d007      	beq.n	80014d4 <HAL_GPIO_Init+0x1f0>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a4a      	ldr	r2, [pc, #296]	@ (80015f0 <HAL_GPIO_Init+0x30c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d101      	bne.n	80014d0 <HAL_GPIO_Init+0x1ec>
 80014cc:	2306      	movs	r3, #6
 80014ce:	e00c      	b.n	80014ea <HAL_GPIO_Init+0x206>
 80014d0:	2307      	movs	r3, #7
 80014d2:	e00a      	b.n	80014ea <HAL_GPIO_Init+0x206>
 80014d4:	2305      	movs	r3, #5
 80014d6:	e008      	b.n	80014ea <HAL_GPIO_Init+0x206>
 80014d8:	2304      	movs	r3, #4
 80014da:	e006      	b.n	80014ea <HAL_GPIO_Init+0x206>
 80014dc:	2303      	movs	r3, #3
 80014de:	e004      	b.n	80014ea <HAL_GPIO_Init+0x206>
 80014e0:	2302      	movs	r3, #2
 80014e2:	e002      	b.n	80014ea <HAL_GPIO_Init+0x206>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_GPIO_Init+0x206>
 80014e8:	2300      	movs	r3, #0
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	f002 0203 	and.w	r2, r2, #3
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	4093      	lsls	r3, r2
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014fa:	4937      	ldr	r1, [pc, #220]	@ (80015d8 <HAL_GPIO_Init+0x2f4>)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	089b      	lsrs	r3, r3, #2
 8001500:	3302      	adds	r3, #2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001508:	4b3a      	ldr	r3, [pc, #232]	@ (80015f4 <HAL_GPIO_Init+0x310>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800152c:	4a31      	ldr	r2, [pc, #196]	@ (80015f4 <HAL_GPIO_Init+0x310>)
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001532:	4b30      	ldr	r3, [pc, #192]	@ (80015f4 <HAL_GPIO_Init+0x310>)
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001556:	4a27      	ldr	r2, [pc, #156]	@ (80015f4 <HAL_GPIO_Init+0x310>)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800155c:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <HAL_GPIO_Init+0x310>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001580:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <HAL_GPIO_Init+0x310>)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_GPIO_Init+0x310>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015aa:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <HAL_GPIO_Init+0x310>)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3301      	adds	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f ae97 	bne.w	80012f4 <HAL_GPIO_Init+0x10>
  }
}
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000
 80015dc:	48000400 	.word	0x48000400
 80015e0:	48000800 	.word	0x48000800
 80015e4:	48000c00 	.word	0x48000c00
 80015e8:	48001000 	.word	0x48001000
 80015ec:	48001400 	.word	0x48001400
 80015f0:	48001800 	.word	0x48001800
 80015f4:	40010400 	.word	0x40010400

080015f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e001      	b.n	800161a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001644:	e002      	b.n	800164c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	041a      	lsls	r2, r3, #16
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43d9      	mvns	r1, r3
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	400b      	ands	r3, r1
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001692:	af00      	add	r7, sp, #0
 8001694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001698:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800169c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800169e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	f001 b80a 	b.w	80026c6 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8161 	beq.w	800198a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016c8:	4bae      	ldr	r3, [pc, #696]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d00c      	beq.n	80016ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016d4:	4bab      	ldr	r3, [pc, #684]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d157      	bne.n	8001790 <HAL_RCC_OscConfig+0x104>
 80016e0:	4ba8      	ldr	r3, [pc, #672]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ec:	d150      	bne.n	8001790 <HAL_RCC_OscConfig+0x104>
 80016ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016f2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80016fa:	fa93 f3a3 	rbit	r3, r3
 80016fe:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001702:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001706:	fab3 f383 	clz	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b3f      	cmp	r3, #63	@ 0x3f
 800170e:	d802      	bhi.n	8001716 <HAL_RCC_OscConfig+0x8a>
 8001710:	4b9c      	ldr	r3, [pc, #624]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0xb6>
 8001716:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800171a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800172a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800172e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001732:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800173e:	4b91      	ldr	r3, [pc, #580]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001746:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800174a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800174e:	fa92 f2a2 	rbit	r2, r2
 8001752:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001756:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800175a:	fab2 f282 	clz	r2, r2
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	f042 0220 	orr.w	r2, r2, #32
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	f002 021f 	and.w	r2, r2, #31
 800176a:	2101      	movs	r1, #1
 800176c:	fa01 f202 	lsl.w	r2, r1, r2
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8108 	beq.w	8001988 <HAL_RCC_OscConfig+0x2fc>
 8001778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	f040 80ff 	bne.w	8001988 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	f000 bf9b 	b.w	80026c6 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001794:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a0:	d106      	bne.n	80017b0 <HAL_RCC_OscConfig+0x124>
 80017a2:	4b78      	ldr	r3, [pc, #480]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a77      	ldr	r2, [pc, #476]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e036      	b.n	800181e <HAL_RCC_OscConfig+0x192>
 80017b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10c      	bne.n	80017da <HAL_RCC_OscConfig+0x14e>
 80017c0:	4b70      	ldr	r3, [pc, #448]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a6f      	ldr	r2, [pc, #444]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b6d      	ldr	r3, [pc, #436]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a6c      	ldr	r2, [pc, #432]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e021      	b.n	800181e <HAL_RCC_OscConfig+0x192>
 80017da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0x17a>
 80017ec:	4b65      	ldr	r3, [pc, #404]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a64      	ldr	r2, [pc, #400]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80017f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b62      	ldr	r3, [pc, #392]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a61      	ldr	r2, [pc, #388]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e00b      	b.n	800181e <HAL_RCC_OscConfig+0x192>
 8001806:	4b5f      	ldr	r3, [pc, #380]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a5e      	ldr	r2, [pc, #376]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b5c      	ldr	r3, [pc, #368]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a5b      	ldr	r2, [pc, #364]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800181c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800181e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001822:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d054      	beq.n	80018d8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fa43 	bl	8000cb8 <HAL_GetTick>
 8001832:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	e00a      	b.n	800184e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff fa3e 	bl	8000cb8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b64      	cmp	r3, #100	@ 0x64
 8001846:	d902      	bls.n	800184e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	f000 bf3c 	b.w	80026c6 <HAL_RCC_OscConfig+0x103a>
 800184e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001852:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001862:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b3f      	cmp	r3, #63	@ 0x3f
 800186e:	d802      	bhi.n	8001876 <HAL_RCC_OscConfig+0x1ea>
 8001870:	4b44      	ldr	r3, [pc, #272]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	e015      	b.n	80018a2 <HAL_RCC_OscConfig+0x216>
 8001876:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800187a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800188a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800188e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001892:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001896:	fa93 f3a3 	rbit	r3, r3
 800189a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800189e:	4b39      	ldr	r3, [pc, #228]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 80018a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018a6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80018aa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80018ae:	fa92 f2a2 	rbit	r2, r2
 80018b2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80018b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80018ba:	fab2 f282 	clz	r2, r2
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	f042 0220 	orr.w	r2, r2, #32
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	f002 021f 	and.w	r2, r2, #31
 80018ca:	2101      	movs	r1, #1
 80018cc:	fa01 f202 	lsl.w	r2, r1, r2
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0b0      	beq.n	8001838 <HAL_RCC_OscConfig+0x1ac>
 80018d6:	e058      	b.n	800198a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff f9ee 	bl	8000cb8 <HAL_GetTick>
 80018dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e0:	e00a      	b.n	80018f8 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e2:	f7ff f9e9 	bl	8000cb8 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	@ 0x64
 80018f0:	d902      	bls.n	80018f8 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	f000 bee7 	b.w	80026c6 <HAL_RCC_OscConfig+0x103a>
 80018f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018fc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800190c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b3f      	cmp	r3, #63	@ 0x3f
 8001918:	d802      	bhi.n	8001920 <HAL_RCC_OscConfig+0x294>
 800191a:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	e015      	b.n	800194c <HAL_RCC_OscConfig+0x2c0>
 8001920:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001924:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001934:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001938:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800193c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001948:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_RCC_OscConfig+0x2f8>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001950:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001954:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001958:	fa92 f2a2 	rbit	r2, r2
 800195c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001960:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001964:	fab2 f282 	clz	r2, r2
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	f042 0220 	orr.w	r2, r2, #32
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	f002 021f 	and.w	r2, r2, #31
 8001974:	2101      	movs	r1, #1
 8001976:	fa01 f202 	lsl.w	r2, r1, r2
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1b0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x256>
 8001980:	e003      	b.n	800198a <HAL_RCC_OscConfig+0x2fe>
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 816d 	beq.w	8001c7a <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80019a0:	4bcd      	ldr	r3, [pc, #820]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019ac:	4bca      	ldr	r3, [pc, #808]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d16e      	bne.n	8001a96 <HAL_RCC_OscConfig+0x40a>
 80019b8:	4bc7      	ldr	r3, [pc, #796]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80019c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019c4:	d167      	bne.n	8001a96 <HAL_RCC_OscConfig+0x40a>
 80019c6:	2302      	movs	r3, #2
 80019c8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80019d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80019e4:	d802      	bhi.n	80019ec <HAL_RCC_OscConfig+0x360>
 80019e6:	4bbc      	ldr	r3, [pc, #752]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	e013      	b.n	8001a14 <HAL_RCC_OscConfig+0x388>
 80019ec:	2302      	movs	r3, #2
 80019ee:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80019fe:	2302      	movs	r3, #2
 8001a00:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001a04:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001a10:	4bb1      	ldr	r3, [pc, #708]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	2202      	movs	r2, #2
 8001a16:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001a1a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001a1e:	fa92 f2a2 	rbit	r2, r2
 8001a22:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001a26:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001a2a:	fab2 f282 	clz	r2, r2
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f042 0220 	orr.w	r2, r2, #32
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f002 021f 	and.w	r2, r2, #31
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d00a      	beq.n	8001a5c <HAL_RCC_OscConfig+0x3d0>
 8001a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d002      	beq.n	8001a5c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f000 be35 	b.w	80026c6 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b9e      	ldr	r3, [pc, #632]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	21f8      	movs	r1, #248	@ 0xf8
 8001a72:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001a7a:	fa91 f1a1 	rbit	r1, r1
 8001a7e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001a82:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001a86:	fab1 f181 	clz	r1, r1
 8001a8a:	b2c9      	uxtb	r1, r1
 8001a8c:	408b      	lsls	r3, r1
 8001a8e:	4992      	ldr	r1, [pc, #584]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a94:	e0f1      	b.n	8001c7a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8083 	beq.w	8001bae <HAL_RCC_OscConfig+0x522>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001aba:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ac8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f8f0 	bl	8000cb8 <HAL_GetTick>
 8001ad8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ade:	f7ff f8eb 	bl	8000cb8 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d902      	bls.n	8001af4 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	f000 bde9 	b.w	80026c6 <HAL_RCC_OscConfig+0x103a>
 8001af4:	2302      	movs	r3, #2
 8001af6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001b06:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b12:	d802      	bhi.n	8001b1a <HAL_RCC_OscConfig+0x48e>
 8001b14:	4b70      	ldr	r3, [pc, #448]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	e013      	b.n	8001b42 <HAL_RCC_OscConfig+0x4b6>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b32:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b3e:	4b66      	ldr	r3, [pc, #408]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	2202      	movs	r2, #2
 8001b44:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001b48:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001b4c:	fa92 f2a2 	rbit	r2, r2
 8001b50:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001b54:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001b58:	fab2 f282 	clz	r2, r2
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f042 0220 	orr.w	r2, r2, #32
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f002 021f 	and.w	r2, r2, #31
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0b4      	beq.n	8001ade <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b74:	4b58      	ldr	r3, [pc, #352]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	21f8      	movs	r1, #248	@ 0xf8
 8001b8a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001b92:	fa91 f1a1 	rbit	r1, r1
 8001b96:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001b9a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001b9e:	fab1 f181 	clz	r1, r1
 8001ba2:	b2c9      	uxtb	r1, r1
 8001ba4:	408b      	lsls	r3, r1
 8001ba6:	494c      	ldr	r1, [pc, #304]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e065      	b.n	8001c7a <HAL_RCC_OscConfig+0x5ee>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001bc0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7ff f86d 	bl	8000cb8 <HAL_GetTick>
 8001bde:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be4:	f7ff f868 	bl	8000cb8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d902      	bls.n	8001bfa <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	f000 bd66 	b.w	80026c6 <HAL_RCC_OscConfig+0x103a>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001c04:	fa93 f3a3 	rbit	r3, r3
 8001c08:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001c0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c18:	d802      	bhi.n	8001c20 <HAL_RCC_OscConfig+0x594>
 8001c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	e013      	b.n	8001c48 <HAL_RCC_OscConfig+0x5bc>
 8001c20:	2302      	movs	r3, #2
 8001c22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001c32:	2302      	movs	r3, #2
 8001c34:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001c38:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001c44:	4b24      	ldr	r3, [pc, #144]	@ (8001cd8 <HAL_RCC_OscConfig+0x64c>)
 8001c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001c4e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001c52:	fa92 f2a2 	rbit	r2, r2
 8001c56:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001c5a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001c5e:	fab2 f282 	clz	r2, r2
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	f042 0220 	orr.w	r2, r2, #32
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	f002 021f 	and.w	r2, r2, #31
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f202 	lsl.w	r2, r1, r2
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1b4      	bne.n	8001be4 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8119 	beq.w	8001ec2 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c94:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8082 	beq.w	8001da6 <HAL_RCC_OscConfig+0x71a>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001cb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <HAL_RCC_OscConfig+0x650>)
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2301      	movs	r3, #1
 8001cca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ccc:	f7fe fff4 	bl	8000cb8 <HAL_GetTick>
 8001cd0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd4:	e00f      	b.n	8001cf6 <HAL_RCC_OscConfig+0x66a>
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7fe ffea 	bl	8000cb8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d902      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	f000 bce8 	b.w	80026c6 <HAL_RCC_OscConfig+0x103a>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001d00:	fa93 f2a3 	rbit	r2, r3
 8001d04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d08:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d16:	2202      	movs	r2, #2
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	fa93 f2a3 	rbit	r2, r3
 8001d28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	fa93 f2a3 	rbit	r2, r3
 8001d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001d54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	4bb0      	ldr	r3, [pc, #704]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001d58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d62:	2102      	movs	r1, #2
 8001d64:	6019      	str	r1, [r3, #0]
 8001d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f1a3 	rbit	r1, r3
 8001d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d7c:	6019      	str	r1, [r3, #0]
  return result;
 8001d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d82:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d09d      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x654>
 8001da4:	e08d      	b.n	8001ec2 <HAL_RCC_OscConfig+0x836>
 8001da6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001daa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	fa93 f2a3 	rbit	r2, r3
 8001dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001dc8:	601a      	str	r2, [r3, #0]
  return result;
 8001dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001dd2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b8f      	ldr	r3, [pc, #572]	@ (800201c <HAL_RCC_OscConfig+0x990>)
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	461a      	mov	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7fe ff66 	bl	8000cb8 <HAL_GetTick>
 8001dec:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df2:	f7fe ff61 	bl	8000cb8 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d902      	bls.n	8001e08 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	f000 bc5f 	b.w	80026c6 <HAL_RCC_OscConfig+0x103a>
 8001e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e10:	2202      	movs	r2, #2
 8001e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e34:	2202      	movs	r2, #2
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e4a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e54:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e58:	2202      	movs	r2, #2
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	fa93 f2a3 	rbit	r2, r3
 8001e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001e72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	4b68      	ldr	r3, [pc, #416]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001e76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e80:	2102      	movs	r1, #2
 8001e82:	6019      	str	r1, [r3, #0]
 8001e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f1a3 	rbit	r1, r3
 8001e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e96:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e9a:	6019      	str	r1, [r3, #0]
  return result;
 8001e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d197      	bne.n	8001df2 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 819c 	beq.w	8002210 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ede:	4b4e      	ldr	r3, [pc, #312]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b4b      	ldr	r3, [pc, #300]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a4a      	ldr	r2, [pc, #296]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b48      	ldr	r3, [pc, #288]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001efe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f10:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	4b41      	ldr	r3, [pc, #260]	@ (8002020 <HAL_RCC_OscConfig+0x994>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d11a      	bne.n	8001f5a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f24:	4b3e      	ldr	r3, [pc, #248]	@ (8002020 <HAL_RCC_OscConfig+0x994>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a3d      	ldr	r2, [pc, #244]	@ (8002020 <HAL_RCC_OscConfig+0x994>)
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f30:	f7fe fec2 	bl	8000cb8 <HAL_GetTick>
 8001f34:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	e009      	b.n	8001f4e <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3a:	f7fe febd 	bl	8000cb8 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	@ 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e3bb      	b.n	80026c6 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4e:	4b34      	ldr	r3, [pc, #208]	@ (8002020 <HAL_RCC_OscConfig+0x994>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0ef      	beq.n	8001f3a <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d106      	bne.n	8001f78 <HAL_RCC_OscConfig+0x8ec>
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6213      	str	r3, [r2, #32]
 8001f76:	e035      	b.n	8001fe4 <HAL_RCC_OscConfig+0x958>
 8001f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10c      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x916>
 8001f88:	4b23      	ldr	r3, [pc, #140]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a22      	ldr	r2, [pc, #136]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	4b20      	ldr	r3, [pc, #128]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a1f      	ldr	r2, [pc, #124]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001f9a:	f023 0304 	bic.w	r3, r3, #4
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	e020      	b.n	8001fe4 <HAL_RCC_OscConfig+0x958>
 8001fa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x940>
 8001fb2:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a18      	ldr	r2, [pc, #96]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a15      	ldr	r2, [pc, #84]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x958>
 8001fcc:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a11      	ldr	r2, [pc, #68]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001fd2:	f023 0301 	bic.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a0e      	ldr	r2, [pc, #56]	@ (8002018 <HAL_RCC_OscConfig+0x98c>)
 8001fde:	f023 0304 	bic.w	r3, r3, #4
 8001fe2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8085 	beq.w	8002100 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fe5f 	bl	8000cb8 <HAL_GetTick>
 8001ffa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffe:	e011      	b.n	8002024 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7fe fe5a 	bl	8000cb8 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d907      	bls.n	8002024 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e356      	b.n	80026c6 <HAL_RCC_OscConfig+0x103a>
 8002018:	40021000 	.word	0x40021000
 800201c:	10908120 	.word	0x10908120
 8002020:	40007000 	.word	0x40007000
 8002024:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002028:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800202c:	2202      	movs	r2, #2
 800202e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002034:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	fa93 f2a3 	rbit	r2, r3
 800203e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002042:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002050:	2202      	movs	r2, #2
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002058:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	fa93 f2a3 	rbit	r2, r3
 8002062:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002066:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800206a:	601a      	str	r2, [r3, #0]
  return result;
 800206c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002070:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002074:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <HAL_RCC_OscConfig+0xa00>
 8002086:	4b98      	ldr	r3, [pc, #608]	@ (80022e8 <HAL_RCC_OscConfig+0xc5c>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	e013      	b.n	80020b4 <HAL_RCC_OscConfig+0xa28>
 800208c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002090:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002094:	2202      	movs	r2, #2
 8002096:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800209c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	fa93 f2a3 	rbit	r2, r3
 80020a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020aa:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	4b8d      	ldr	r3, [pc, #564]	@ (80022e8 <HAL_RCC_OscConfig+0xc5c>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020b8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020bc:	2102      	movs	r1, #2
 80020be:	6011      	str	r1, [r2, #0]
 80020c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020c4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	fa92 f1a2 	rbit	r1, r2
 80020ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020d2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80020d6:	6011      	str	r1, [r2, #0]
  return result;
 80020d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020dc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	fab2 f282 	clz	r2, r2
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d080      	beq.n	8002000 <HAL_RCC_OscConfig+0x974>
 80020fe:	e07d      	b.n	80021fc <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7fe fdda 	bl	8000cb8 <HAL_GetTick>
 8002104:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002108:	e00b      	b.n	8002122 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7fe fdd5 	bl	8000cb8 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e2d1      	b.n	80026c6 <HAL_RCC_OscConfig+0x103a>
 8002122:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002126:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800212a:	2202      	movs	r2, #2
 800212c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002132:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	fa93 f2a3 	rbit	r2, r3
 800213c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002140:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800214a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800214e:	2202      	movs	r2, #2
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002156:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	fa93 f2a3 	rbit	r2, r3
 8002160:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002164:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002168:	601a      	str	r2, [r3, #0]
  return result;
 800216a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002172:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <HAL_RCC_OscConfig+0xafe>
 8002184:	4b58      	ldr	r3, [pc, #352]	@ (80022e8 <HAL_RCC_OscConfig+0xc5c>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	e013      	b.n	80021b2 <HAL_RCC_OscConfig+0xb26>
 800218a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800218e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002192:	2202      	movs	r2, #2
 8002194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	fa93 f2a3 	rbit	r2, r3
 80021a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	4b4e      	ldr	r3, [pc, #312]	@ (80022e8 <HAL_RCC_OscConfig+0xc5c>)
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021b6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021ba:	2102      	movs	r1, #2
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021c2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	fa92 f1a2 	rbit	r1, r2
 80021cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021d0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80021d4:	6011      	str	r1, [r2, #0]
  return result;
 80021d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021da:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	fab2 f282 	clz	r2, r2
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	f002 021f 	and.w	r2, r2, #31
 80021f0:	2101      	movs	r1, #1
 80021f2:	fa01 f202 	lsl.w	r2, r1, r2
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d186      	bne.n	800210a <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021fc:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002204:	4b38      	ldr	r3, [pc, #224]	@ (80022e8 <HAL_RCC_OscConfig+0xc5c>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	4a37      	ldr	r2, [pc, #220]	@ (80022e8 <HAL_RCC_OscConfig+0xc5c>)
 800220a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800220e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002210:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002214:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8251 	beq.w	80026c4 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002222:	4b31      	ldr	r3, [pc, #196]	@ (80022e8 <HAL_RCC_OscConfig+0xc5c>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b08      	cmp	r3, #8
 800222c:	f000 820f 	beq.w	800264e <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002234:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b02      	cmp	r3, #2
 800223e:	f040 8165 	bne.w	800250c <HAL_RCC_OscConfig+0xe80>
 8002242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002246:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800224a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800224e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002254:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	fa93 f2a3 	rbit	r2, r3
 800225e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002262:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002266:	601a      	str	r2, [r3, #0]
  return result;
 8002268:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800226c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002270:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800227c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	461a      	mov	r2, r3
 8002284:	2300      	movs	r3, #0
 8002286:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe fd16 	bl	8000cb8 <HAL_GetTick>
 800228c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002290:	e009      	b.n	80022a6 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002292:	f7fe fd11 	bl	8000cb8 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e20f      	b.n	80026c6 <HAL_RCC_OscConfig+0x103a>
 80022a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022aa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	fa93 f2a3 	rbit	r2, r3
 80022c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022ca:	601a      	str	r2, [r3, #0]
  return result;
 80022cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80022d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80022de:	d805      	bhi.n	80022ec <HAL_RCC_OscConfig+0xc60>
 80022e0:	4b01      	ldr	r3, [pc, #4]	@ (80022e8 <HAL_RCC_OscConfig+0xc5c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	e02a      	b.n	800233c <HAL_RCC_OscConfig+0xcb0>
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022f0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80022f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022fe:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fa93 f2a3 	rbit	r2, r3
 8002308:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002316:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800231a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002324:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	fa93 f2a3 	rbit	r2, r3
 800232e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002332:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	4bca      	ldr	r3, [pc, #808]	@ (8002664 <HAL_RCC_OscConfig+0xfd8>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002340:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002344:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002348:	6011      	str	r1, [r2, #0]
 800234a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800234e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	fa92 f1a2 	rbit	r1, r2
 8002358:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800235c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002360:	6011      	str	r1, [r2, #0]
  return result;
 8002362:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002366:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	fab2 f282 	clz	r2, r2
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f042 0220 	orr.w	r2, r2, #32
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	f002 021f 	and.w	r2, r2, #31
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f202 	lsl.w	r2, r1, r2
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d184      	bne.n	8002292 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002388:	4bb6      	ldr	r3, [pc, #728]	@ (8002664 <HAL_RCC_OscConfig+0xfd8>)
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	f023 020f 	bic.w	r2, r3, #15
 8002390:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002394:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	49b1      	ldr	r1, [pc, #708]	@ (8002664 <HAL_RCC_OscConfig+0xfd8>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80023a2:	4bb0      	ldr	r3, [pc, #704]	@ (8002664 <HAL_RCC_OscConfig+0xfd8>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80023aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6a19      	ldr	r1, [r3, #32]
 80023b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	430b      	orrs	r3, r1
 80023c4:	49a7      	ldr	r1, [pc, #668]	@ (8002664 <HAL_RCC_OscConfig+0xfd8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
 80023ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ce:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80023d2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023dc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	fa93 f2a3 	rbit	r2, r3
 80023e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ea:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023ee:	601a      	str	r2, [r3, #0]
  return result;
 80023f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80023f8:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002404:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	461a      	mov	r2, r3
 800240c:	2301      	movs	r3, #1
 800240e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fc52 	bl	8000cb8 <HAL_GetTick>
 8002414:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002418:	e009      	b.n	800242e <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fc4d 	bl	8000cb8 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e14b      	b.n	80026c6 <HAL_RCC_OscConfig+0x103a>
 800242e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002432:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002436:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800243a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002440:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	fa93 f2a3 	rbit	r2, r3
 800244a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800244e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002452:	601a      	str	r2, [r3, #0]
  return result;
 8002454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002458:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800245c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800245e:	fab3 f383 	clz	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b3f      	cmp	r3, #63	@ 0x3f
 8002466:	d802      	bhi.n	800246e <HAL_RCC_OscConfig+0xde2>
 8002468:	4b7e      	ldr	r3, [pc, #504]	@ (8002664 <HAL_RCC_OscConfig+0xfd8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	e027      	b.n	80024be <HAL_RCC_OscConfig+0xe32>
 800246e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002472:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002476:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800247a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002480:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002498:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800249c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fa93 f2a3 	rbit	r2, r3
 80024b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b4:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002664 <HAL_RCC_OscConfig+0xfd8>)
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024c2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80024c6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024ca:	6011      	str	r1, [r2, #0]
 80024cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024d0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	fa92 f1a2 	rbit	r1, r2
 80024da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024de:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80024e2:	6011      	str	r1, [r2, #0]
  return result;
 80024e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80024e8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	fab2 f282 	clz	r2, r2
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	f042 0220 	orr.w	r2, r2, #32
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	f002 021f 	and.w	r2, r2, #31
 80024fe:	2101      	movs	r1, #1
 8002500:	fa01 f202 	lsl.w	r2, r1, r2
 8002504:	4013      	ands	r3, r2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d087      	beq.n	800241a <HAL_RCC_OscConfig+0xd8e>
 800250a:	e0db      	b.n	80026c4 <HAL_RCC_OscConfig+0x1038>
 800250c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002510:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002514:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800251e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002530:	601a      	str	r2, [r3, #0]
  return result;
 8002532:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002536:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800253a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002546:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	461a      	mov	r2, r3
 800254e:	2300      	movs	r3, #0
 8002550:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe fbb1 	bl	8000cb8 <HAL_GetTick>
 8002556:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255a:	e009      	b.n	8002570 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255c:	f7fe fbac 	bl	8000cb8 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0aa      	b.n	80026c6 <HAL_RCC_OscConfig+0x103a>
 8002570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002574:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002578:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800257c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002582:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	fa93 f2a3 	rbit	r2, r3
 800258c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002590:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002594:	601a      	str	r2, [r3, #0]
  return result;
 8002596:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800259a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800259e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80025a8:	d802      	bhi.n	80025b0 <HAL_RCC_OscConfig+0xf24>
 80025aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002664 <HAL_RCC_OscConfig+0xfd8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	e027      	b.n	8002600 <HAL_RCC_OscConfig+0xf74>
 80025b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80025b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025da:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80025de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	fa93 f2a3 	rbit	r2, r3
 80025f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f6:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_RCC_OscConfig+0xfd8>)
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002604:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002608:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800260c:	6011      	str	r1, [r2, #0]
 800260e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002612:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	fa92 f1a2 	rbit	r1, r2
 800261c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002620:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002624:	6011      	str	r1, [r2, #0]
  return result;
 8002626:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800262a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	fab2 f282 	clz	r2, r2
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f042 0220 	orr.w	r2, r2, #32
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f002 021f 	and.w	r2, r2, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f202 	lsl.w	r2, r1, r2
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d187      	bne.n	800255c <HAL_RCC_OscConfig+0xed0>
 800264c:	e03a      	b.n	80026c4 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002652:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d104      	bne.n	8002668 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e031      	b.n	80026c6 <HAL_RCC_OscConfig+0x103a>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002668:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <HAL_RCC_OscConfig+0x1044>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002670:	4b17      	ldr	r3, [pc, #92]	@ (80026d0 <HAL_RCC_OscConfig+0x1044>)
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002674:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002678:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800267c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002684:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	429a      	cmp	r2, r3
 800268e:	d117      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002690:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002694:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002698:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800269c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d10b      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80026a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026ac:	f003 020f 	and.w	r2, r3, #15
 80026b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000

080026d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b09e      	sub	sp, #120	@ 0x78
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e154      	b.n	8002996 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b89      	ldr	r3, [pc, #548]	@ (8002914 <HAL_RCC_ClockConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d910      	bls.n	800271c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b86      	ldr	r3, [pc, #536]	@ (8002914 <HAL_RCC_ClockConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	4984      	ldr	r1, [pc, #528]	@ (8002914 <HAL_RCC_ClockConfig+0x240>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b82      	ldr	r3, [pc, #520]	@ (8002914 <HAL_RCC_ClockConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e13c      	b.n	8002996 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b7b      	ldr	r3, [pc, #492]	@ (8002918 <HAL_RCC_ClockConfig+0x244>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4978      	ldr	r1, [pc, #480]	@ (8002918 <HAL_RCC_ClockConfig+0x244>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80cd 	beq.w	80028e2 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d137      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xec>
 8002750:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002754:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800275e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b3f      	cmp	r3, #63	@ 0x3f
 8002768:	d802      	bhi.n	8002770 <HAL_RCC_ClockConfig+0x9c>
 800276a:	4b6b      	ldr	r3, [pc, #428]	@ (8002918 <HAL_RCC_ClockConfig+0x244>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	e00f      	b.n	8002790 <HAL_RCC_ClockConfig+0xbc>
 8002770:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002774:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	667b      	str	r3, [r7, #100]	@ 0x64
 800277e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002782:	663b      	str	r3, [r7, #96]	@ 0x60
 8002784:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800278c:	4b62      	ldr	r3, [pc, #392]	@ (8002918 <HAL_RCC_ClockConfig+0x244>)
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002794:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002796:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002798:	fa92 f2a2 	rbit	r2, r2
 800279c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800279e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027a0:	fab2 f282 	clz	r2, r2
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	f042 0220 	orr.w	r2, r2, #32
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	f002 021f 	and.w	r2, r2, #31
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f202 	lsl.w	r2, r1, r2
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d171      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0ea      	b.n	8002996 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d137      	bne.n	8002838 <HAL_RCC_ClockConfig+0x164>
 80027c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027cc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80027d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b3f      	cmp	r3, #63	@ 0x3f
 80027e0:	d802      	bhi.n	80027e8 <HAL_RCC_ClockConfig+0x114>
 80027e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002918 <HAL_RCC_ClockConfig+0x244>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	e00f      	b.n	8002808 <HAL_RCC_ClockConfig+0x134>
 80027e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80027f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80027fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002804:	4b44      	ldr	r3, [pc, #272]	@ (8002918 <HAL_RCC_ClockConfig+0x244>)
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800280c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800280e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002810:	fa92 f2a2 	rbit	r2, r2
 8002814:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002816:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f042 0220 	orr.w	r2, r2, #32
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	f002 021f 	and.w	r2, r2, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d135      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0ae      	b.n	8002996 <HAL_RCC_ClockConfig+0x2c2>
 8002838:	2302      	movs	r3, #2
 800283a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b3f      	cmp	r3, #63	@ 0x3f
 800284e:	d802      	bhi.n	8002856 <HAL_RCC_ClockConfig+0x182>
 8002850:	4b31      	ldr	r3, [pc, #196]	@ (8002918 <HAL_RCC_ClockConfig+0x244>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	e00d      	b.n	8002872 <HAL_RCC_ClockConfig+0x19e>
 8002856:	2302      	movs	r3, #2
 8002858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24
 8002862:	2302      	movs	r3, #2
 8002864:	623b      	str	r3, [r7, #32]
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	4b2a      	ldr	r3, [pc, #168]	@ (8002918 <HAL_RCC_ClockConfig+0x244>)
 8002870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002872:	2202      	movs	r2, #2
 8002874:	61ba      	str	r2, [r7, #24]
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	fa92 f2a2 	rbit	r2, r2
 800287c:	617a      	str	r2, [r7, #20]
  return result;
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	fab2 f282 	clz	r2, r2
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f042 0220 	orr.w	r2, r2, #32
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f002 021f 	and.w	r2, r2, #31
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f202 	lsl.w	r2, r1, r2
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e07a      	b.n	8002996 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <HAL_RCC_ClockConfig+0x244>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 0203 	bic.w	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	491a      	ldr	r1, [pc, #104]	@ (8002918 <HAL_RCC_ClockConfig+0x244>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b2:	f7fe fa01 	bl	8000cb8 <HAL_GetTick>
 80028b6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b8:	e00a      	b.n	80028d0 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ba:	f7fe f9fd 	bl	8000cb8 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e062      	b.n	8002996 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d0:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <HAL_RCC_ClockConfig+0x244>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 020c 	and.w	r2, r3, #12
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	429a      	cmp	r2, r3
 80028e0:	d1eb      	bne.n	80028ba <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <HAL_RCC_ClockConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d215      	bcs.n	800291c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f0:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <HAL_RCC_ClockConfig+0x240>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 0207 	bic.w	r2, r3, #7
 80028f8:	4906      	ldr	r1, [pc, #24]	@ (8002914 <HAL_RCC_ClockConfig+0x240>)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002900:	4b04      	ldr	r3, [pc, #16]	@ (8002914 <HAL_RCC_ClockConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d006      	beq.n	800291c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e041      	b.n	8002996 <HAL_RCC_ClockConfig+0x2c2>
 8002912:	bf00      	nop
 8002914:	40022000 	.word	0x40022000
 8002918:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002928:	4b1d      	ldr	r3, [pc, #116]	@ (80029a0 <HAL_RCC_ClockConfig+0x2cc>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	491a      	ldr	r1, [pc, #104]	@ (80029a0 <HAL_RCC_ClockConfig+0x2cc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002946:	4b16      	ldr	r3, [pc, #88]	@ (80029a0 <HAL_RCC_ClockConfig+0x2cc>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4912      	ldr	r1, [pc, #72]	@ (80029a0 <HAL_RCC_ClockConfig+0x2cc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800295a:	f000 f829 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 800295e:	4601      	mov	r1, r0
 8002960:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <HAL_RCC_ClockConfig+0x2cc>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002968:	22f0      	movs	r2, #240	@ 0xf0
 800296a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	fa92 f2a2 	rbit	r2, r2
 8002972:	60fa      	str	r2, [r7, #12]
  return result;
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	fab2 f282 	clz	r2, r2
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	40d3      	lsrs	r3, r2
 800297e:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <HAL_RCC_ClockConfig+0x2d0>)
 8002980:	5cd3      	ldrb	r3, [r2, r3]
 8002982:	fa21 f303 	lsr.w	r3, r1, r3
 8002986:	4a08      	ldr	r2, [pc, #32]	@ (80029a8 <HAL_RCC_ClockConfig+0x2d4>)
 8002988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800298a:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <HAL_RCC_ClockConfig+0x2d8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe f94e 	bl	8000c30 <HAL_InitTick>
  
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3778      	adds	r7, #120	@ 0x78
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000
 80029a4:	08004554 	.word	0x08004554
 80029a8:	20000004 	.word	0x20000004
 80029ac:	20000008 	.word	0x20000008

080029b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	2300      	movs	r3, #0
 80029c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80029ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x98>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d002      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x30>
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d003      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0x36>
 80029de:	e029      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029e0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x9c>)
 80029e2:	613b      	str	r3, [r7, #16]
      break;
 80029e4:	e029      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	0c9b      	lsrs	r3, r3, #18
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	4a18      	ldr	r2, [pc, #96]	@ (8002a50 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80029f4:	4b14      	ldr	r3, [pc, #80]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x98>)
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	4a15      	ldr	r2, [pc, #84]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e007      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	fb02 f303 	mul.w	r3, r2, r3
 8002a2c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	613b      	str	r3, [r7, #16]
      break;
 8002a32:	e002      	b.n	8002a3a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a34:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a36:	613b      	str	r3, [r7, #16]
      break;
 8002a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a3a:	693b      	ldr	r3, [r7, #16]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	007a1200 	.word	0x007a1200
 8002a50:	0800456c 	.word	0x0800456c
 8002a54:	0800457c 	.word	0x0800457c

08002a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	@ (8002a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000004 	.word	0x20000004

08002a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a76:	f7ff ffef 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a84:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002a88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	fa92 f2a2 	rbit	r2, r2
 8002a90:	603a      	str	r2, [r7, #0]
  return result;
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	fab2 f282 	clz	r2, r2
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	40d3      	lsrs	r3, r2
 8002a9c:	4a04      	ldr	r2, [pc, #16]	@ (8002ab0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08004564 	.word	0x08004564

08002ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002aba:	f7ff ffcd 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002abe:	4601      	mov	r1, r0
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002ac8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002acc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	fa92 f2a2 	rbit	r2, r2
 8002ad4:	603a      	str	r2, [r7, #0]
  return result;
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	fab2 f282 	clz	r2, r2
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	40d3      	lsrs	r3, r2
 8002ae0:	4a04      	ldr	r2, [pc, #16]	@ (8002af4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ae2:	5cd3      	ldrb	r3, [r2, r3]
 8002ae4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	08004564 	.word	0x08004564

08002af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b092      	sub	sp, #72	@ 0x48
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80d2 	beq.w	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10e      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b28:	4b4a      	ldr	r3, [pc, #296]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	4a49      	ldr	r2, [pc, #292]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b32:	61d3      	str	r3, [r2, #28]
 8002b34:	4b47      	ldr	r3, [pc, #284]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b46:	4b44      	ldr	r3, [pc, #272]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d118      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b52:	4b41      	ldr	r3, [pc, #260]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a40      	ldr	r2, [pc, #256]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe f8ab 	bl	8000cb8 <HAL_GetTick>
 8002b62:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b64:	e008      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b66:	f7fe f8a7 	bl	8000cb8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b64      	cmp	r3, #100	@ 0x64
 8002b72:	d901      	bls.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e1d4      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b78:	4b37      	ldr	r3, [pc, #220]	@ (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b84:	4b33      	ldr	r3, [pc, #204]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8082 	beq.w	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d07a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bb2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b25      	ldr	r3, [pc, #148]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2301      	movs	r3, #1
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b1c      	ldr	r3, [pc, #112]	@ (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bf6:	4a17      	ldr	r2, [pc, #92]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d049      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fe f857 	bl	8000cb8 <HAL_GetTick>
 8002c0a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe f853 	bl	8000cb8 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e17e      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002c24:	2302      	movs	r3, #2
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c30:	2302      	movs	r3, #2
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	61fb      	str	r3, [r7, #28]
  return result;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d108      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002c4e:	4b01      	ldr	r3, [pc, #4]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	e00d      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	10908100 	.word	0x10908100
 8002c60:	2302      	movs	r3, #2
 8002c62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	4b9a      	ldr	r3, [pc, #616]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	2202      	movs	r2, #2
 8002c72:	613a      	str	r2, [r7, #16]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	fa92 f2a2 	rbit	r2, r2
 8002c7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	fab2 f282 	clz	r2, r2
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	f002 021f 	and.w	r2, r2, #31
 8002c8e:	2101      	movs	r1, #1
 8002c90:	fa01 f202 	lsl.w	r2, r1, r2
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0b9      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002c9a:	4b8f      	ldr	r3, [pc, #572]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	498c      	ldr	r1, [pc, #560]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb4:	4b88      	ldr	r3, [pc, #544]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	4a87      	ldr	r2, [pc, #540]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ccc:	4b82      	ldr	r3, [pc, #520]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd0:	f023 0203 	bic.w	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	497f      	ldr	r1, [pc, #508]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cea:	4b7b      	ldr	r3, [pc, #492]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	4978      	ldr	r1, [pc, #480]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d08:	4b73      	ldr	r3, [pc, #460]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	4970      	ldr	r1, [pc, #448]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d26:	4b6c      	ldr	r3, [pc, #432]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	f023 0210 	bic.w	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4969      	ldr	r1, [pc, #420]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002d44:	4b64      	ldr	r3, [pc, #400]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d50:	4961      	ldr	r1, [pc, #388]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d62:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	f023 0220 	bic.w	r2, r3, #32
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	495a      	ldr	r1, [pc, #360]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d80:	4b55      	ldr	r3, [pc, #340]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d84:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	4952      	ldr	r1, [pc, #328]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	494b      	ldr	r1, [pc, #300]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dbc:	4b46      	ldr	r3, [pc, #280]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	4943      	ldr	r1, [pc, #268]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dda:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	493c      	ldr	r1, [pc, #240]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002df8:	4b37      	ldr	r3, [pc, #220]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e04:	4934      	ldr	r1, [pc, #208]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002e16:	4b30      	ldr	r3, [pc, #192]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e22:	492d      	ldr	r1, [pc, #180]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e34:	4b28      	ldr	r3, [pc, #160]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e40:	4925      	ldr	r1, [pc, #148]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002e52:	4b21      	ldr	r3, [pc, #132]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	491e      	ldr	r1, [pc, #120]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002e70:	4b19      	ldr	r3, [pc, #100]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e74:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	4916      	ldr	r1, [pc, #88]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002e8e:	4b12      	ldr	r3, [pc, #72]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	490f      	ldr	r1, [pc, #60]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002eac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb8:	4907      	ldr	r1, [pc, #28]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002eca:	4b03      	ldr	r3, [pc, #12]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	e002      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ede:	4913      	ldr	r1, [pc, #76]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efc:	490b      	ldr	r1, [pc, #44]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002f0e:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1a:	4904      	ldr	r1, [pc, #16]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3748      	adds	r7, #72	@ 0x48
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40021000 	.word	0x40021000

08002f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e040      	b.n	8002fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fd fd22 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	@ 0x24
 8002f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fb4e 	bl	8003618 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f977 	bl	8003270 <UART_SetConfig>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e01b      	b.n	8002fc4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fbcd 	bl	800375c <UART_CheckIdleState>
 8002fc2:	4603      	mov	r3, r0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	@ 0x28
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d177      	bne.n	80030d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_UART_Transmit+0x24>
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e070      	b.n	80030d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2221      	movs	r2, #33	@ 0x21
 8003000:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003002:	f7fd fe59 	bl	8000cb8 <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003020:	d108      	bne.n	8003034 <HAL_UART_Transmit+0x68>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e003      	b.n	800303c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800303c:	e02f      	b.n	800309e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2200      	movs	r2, #0
 8003046:	2180      	movs	r1, #128	@ 0x80
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fc2f 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e03b      	b.n	80030d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	881a      	ldrh	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003070:	b292      	uxth	r2, r2
 8003072:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	3302      	adds	r3, #2
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	e007      	b.n	800308c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3301      	adds	r3, #1
 800308a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1c9      	bne.n	800303e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2140      	movs	r1, #64	@ 0x40
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fbf9 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e005      	b.n	80030d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b08a      	sub	sp, #40	@ 0x28
 80030e2:	af02      	add	r7, sp, #8
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	f040 80b6 	bne.w	8003266 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_UART_Receive+0x28>
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0ae      	b.n	8003268 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2222      	movs	r2, #34	@ 0x22
 8003116:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003120:	f7fd fdca 	bl	8000cb8 <HAL_GetTick>
 8003124:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	88fa      	ldrh	r2, [r7, #6]
 800312a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313e:	d10e      	bne.n	800315e <HAL_UART_Receive+0x80>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_UART_Receive+0x76>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800314e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003152:	e02d      	b.n	80031b0 <HAL_UART_Receive+0xd2>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	22ff      	movs	r2, #255	@ 0xff
 8003158:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800315c:	e028      	b.n	80031b0 <HAL_UART_Receive+0xd2>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <HAL_UART_Receive+0xa4>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d104      	bne.n	8003178 <HAL_UART_Receive+0x9a>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	22ff      	movs	r2, #255	@ 0xff
 8003172:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003176:	e01b      	b.n	80031b0 <HAL_UART_Receive+0xd2>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	227f      	movs	r2, #127	@ 0x7f
 800317c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003180:	e016      	b.n	80031b0 <HAL_UART_Receive+0xd2>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800318a:	d10d      	bne.n	80031a8 <HAL_UART_Receive+0xca>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <HAL_UART_Receive+0xc0>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	227f      	movs	r2, #127	@ 0x7f
 8003198:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800319c:	e008      	b.n	80031b0 <HAL_UART_Receive+0xd2>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	223f      	movs	r2, #63	@ 0x3f
 80031a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80031a6:	e003      	b.n	80031b0 <HAL_UART_Receive+0xd2>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80031b6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031c0:	d108      	bne.n	80031d4 <HAL_UART_Receive+0xf6>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d104      	bne.n	80031d4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	e003      	b.n	80031dc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80031dc:	e037      	b.n	800324e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2200      	movs	r2, #0
 80031e6:	2120      	movs	r1, #32
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 fb5f 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e033      	b.n	8003268 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800320c:	b29a      	uxth	r2, r3
 800320e:	8a7b      	ldrh	r3, [r7, #18]
 8003210:	4013      	ands	r3, r2
 8003212:	b29a      	uxth	r2, r3
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	3302      	adds	r3, #2
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	e00d      	b.n	800323c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003226:	b29b      	uxth	r3, r3
 8003228:	b2da      	uxtb	r2, r3
 800322a:	8a7b      	ldrh	r3, [r7, #18]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	4013      	ands	r3, r2
 8003230:	b2da      	uxtb	r2, r3
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3301      	adds	r3, #1
 800323a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003242:	b29b      	uxth	r3, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1c1      	bne.n	80031de <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4b92      	ldr	r3, [pc, #584]	@ (80034e4 <UART_SetConfig+0x274>)
 800329c:	4013      	ands	r3, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	6979      	ldr	r1, [r7, #20]
 80032a4:	430b      	orrs	r3, r1
 80032a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	430a      	orrs	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a80      	ldr	r2, [pc, #512]	@ (80034e8 <UART_SetConfig+0x278>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d120      	bne.n	800332e <UART_SetConfig+0xbe>
 80032ec:	4b7f      	ldr	r3, [pc, #508]	@ (80034ec <UART_SetConfig+0x27c>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d817      	bhi.n	8003328 <UART_SetConfig+0xb8>
 80032f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003300 <UART_SetConfig+0x90>)
 80032fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fe:	bf00      	nop
 8003300:	08003311 	.word	0x08003311
 8003304:	0800331d 	.word	0x0800331d
 8003308:	08003323 	.word	0x08003323
 800330c:	08003317 	.word	0x08003317
 8003310:	2301      	movs	r3, #1
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e0b5      	b.n	8003482 <UART_SetConfig+0x212>
 8003316:	2302      	movs	r3, #2
 8003318:	77fb      	strb	r3, [r7, #31]
 800331a:	e0b2      	b.n	8003482 <UART_SetConfig+0x212>
 800331c:	2304      	movs	r3, #4
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e0af      	b.n	8003482 <UART_SetConfig+0x212>
 8003322:	2308      	movs	r3, #8
 8003324:	77fb      	strb	r3, [r7, #31]
 8003326:	e0ac      	b.n	8003482 <UART_SetConfig+0x212>
 8003328:	2310      	movs	r3, #16
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e0a9      	b.n	8003482 <UART_SetConfig+0x212>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6f      	ldr	r2, [pc, #444]	@ (80034f0 <UART_SetConfig+0x280>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d124      	bne.n	8003382 <UART_SetConfig+0x112>
 8003338:	4b6c      	ldr	r3, [pc, #432]	@ (80034ec <UART_SetConfig+0x27c>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003340:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003344:	d011      	beq.n	800336a <UART_SetConfig+0xfa>
 8003346:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800334a:	d817      	bhi.n	800337c <UART_SetConfig+0x10c>
 800334c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003350:	d011      	beq.n	8003376 <UART_SetConfig+0x106>
 8003352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003356:	d811      	bhi.n	800337c <UART_SetConfig+0x10c>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <UART_SetConfig+0xf4>
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003360:	d006      	beq.n	8003370 <UART_SetConfig+0x100>
 8003362:	e00b      	b.n	800337c <UART_SetConfig+0x10c>
 8003364:	2300      	movs	r3, #0
 8003366:	77fb      	strb	r3, [r7, #31]
 8003368:	e08b      	b.n	8003482 <UART_SetConfig+0x212>
 800336a:	2302      	movs	r3, #2
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e088      	b.n	8003482 <UART_SetConfig+0x212>
 8003370:	2304      	movs	r3, #4
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e085      	b.n	8003482 <UART_SetConfig+0x212>
 8003376:	2308      	movs	r3, #8
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e082      	b.n	8003482 <UART_SetConfig+0x212>
 800337c:	2310      	movs	r3, #16
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e07f      	b.n	8003482 <UART_SetConfig+0x212>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a5b      	ldr	r2, [pc, #364]	@ (80034f4 <UART_SetConfig+0x284>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d124      	bne.n	80033d6 <UART_SetConfig+0x166>
 800338c:	4b57      	ldr	r3, [pc, #348]	@ (80034ec <UART_SetConfig+0x27c>)
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003394:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003398:	d011      	beq.n	80033be <UART_SetConfig+0x14e>
 800339a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800339e:	d817      	bhi.n	80033d0 <UART_SetConfig+0x160>
 80033a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80033a4:	d011      	beq.n	80033ca <UART_SetConfig+0x15a>
 80033a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80033aa:	d811      	bhi.n	80033d0 <UART_SetConfig+0x160>
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <UART_SetConfig+0x148>
 80033b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033b4:	d006      	beq.n	80033c4 <UART_SetConfig+0x154>
 80033b6:	e00b      	b.n	80033d0 <UART_SetConfig+0x160>
 80033b8:	2300      	movs	r3, #0
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e061      	b.n	8003482 <UART_SetConfig+0x212>
 80033be:	2302      	movs	r3, #2
 80033c0:	77fb      	strb	r3, [r7, #31]
 80033c2:	e05e      	b.n	8003482 <UART_SetConfig+0x212>
 80033c4:	2304      	movs	r3, #4
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e05b      	b.n	8003482 <UART_SetConfig+0x212>
 80033ca:	2308      	movs	r3, #8
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e058      	b.n	8003482 <UART_SetConfig+0x212>
 80033d0:	2310      	movs	r3, #16
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e055      	b.n	8003482 <UART_SetConfig+0x212>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a47      	ldr	r2, [pc, #284]	@ (80034f8 <UART_SetConfig+0x288>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d124      	bne.n	800342a <UART_SetConfig+0x1ba>
 80033e0:	4b42      	ldr	r3, [pc, #264]	@ (80034ec <UART_SetConfig+0x27c>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80033e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033ec:	d011      	beq.n	8003412 <UART_SetConfig+0x1a2>
 80033ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033f2:	d817      	bhi.n	8003424 <UART_SetConfig+0x1b4>
 80033f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033f8:	d011      	beq.n	800341e <UART_SetConfig+0x1ae>
 80033fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033fe:	d811      	bhi.n	8003424 <UART_SetConfig+0x1b4>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <UART_SetConfig+0x19c>
 8003404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003408:	d006      	beq.n	8003418 <UART_SetConfig+0x1a8>
 800340a:	e00b      	b.n	8003424 <UART_SetConfig+0x1b4>
 800340c:	2300      	movs	r3, #0
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e037      	b.n	8003482 <UART_SetConfig+0x212>
 8003412:	2302      	movs	r3, #2
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e034      	b.n	8003482 <UART_SetConfig+0x212>
 8003418:	2304      	movs	r3, #4
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e031      	b.n	8003482 <UART_SetConfig+0x212>
 800341e:	2308      	movs	r3, #8
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e02e      	b.n	8003482 <UART_SetConfig+0x212>
 8003424:	2310      	movs	r3, #16
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e02b      	b.n	8003482 <UART_SetConfig+0x212>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a33      	ldr	r2, [pc, #204]	@ (80034fc <UART_SetConfig+0x28c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d124      	bne.n	800347e <UART_SetConfig+0x20e>
 8003434:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <UART_SetConfig+0x27c>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800343c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003440:	d011      	beq.n	8003466 <UART_SetConfig+0x1f6>
 8003442:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003446:	d817      	bhi.n	8003478 <UART_SetConfig+0x208>
 8003448:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800344c:	d011      	beq.n	8003472 <UART_SetConfig+0x202>
 800344e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003452:	d811      	bhi.n	8003478 <UART_SetConfig+0x208>
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <UART_SetConfig+0x1f0>
 8003458:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800345c:	d006      	beq.n	800346c <UART_SetConfig+0x1fc>
 800345e:	e00b      	b.n	8003478 <UART_SetConfig+0x208>
 8003460:	2300      	movs	r3, #0
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e00d      	b.n	8003482 <UART_SetConfig+0x212>
 8003466:	2302      	movs	r3, #2
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e00a      	b.n	8003482 <UART_SetConfig+0x212>
 800346c:	2304      	movs	r3, #4
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e007      	b.n	8003482 <UART_SetConfig+0x212>
 8003472:	2308      	movs	r3, #8
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e004      	b.n	8003482 <UART_SetConfig+0x212>
 8003478:	2310      	movs	r3, #16
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e001      	b.n	8003482 <UART_SetConfig+0x212>
 800347e:	2310      	movs	r3, #16
 8003480:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800348a:	d16b      	bne.n	8003564 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800348c:	7ffb      	ldrb	r3, [r7, #31]
 800348e:	2b08      	cmp	r3, #8
 8003490:	d838      	bhi.n	8003504 <UART_SetConfig+0x294>
 8003492:	a201      	add	r2, pc, #4	@ (adr r2, 8003498 <UART_SetConfig+0x228>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	080034bd 	.word	0x080034bd
 800349c:	080034c5 	.word	0x080034c5
 80034a0:	080034cd 	.word	0x080034cd
 80034a4:	08003505 	.word	0x08003505
 80034a8:	080034d3 	.word	0x080034d3
 80034ac:	08003505 	.word	0x08003505
 80034b0:	08003505 	.word	0x08003505
 80034b4:	08003505 	.word	0x08003505
 80034b8:	080034db 	.word	0x080034db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034bc:	f7ff fad8 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 80034c0:	61b8      	str	r0, [r7, #24]
        break;
 80034c2:	e024      	b.n	800350e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034c4:	f7ff faf6 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 80034c8:	61b8      	str	r0, [r7, #24]
        break;
 80034ca:	e020      	b.n	800350e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <UART_SetConfig+0x290>)
 80034ce:	61bb      	str	r3, [r7, #24]
        break;
 80034d0:	e01d      	b.n	800350e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034d2:	f7ff fa6d 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 80034d6:	61b8      	str	r0, [r7, #24]
        break;
 80034d8:	e019      	b.n	800350e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034de:	61bb      	str	r3, [r7, #24]
        break;
 80034e0:	e015      	b.n	800350e <UART_SetConfig+0x29e>
 80034e2:	bf00      	nop
 80034e4:	efff69f3 	.word	0xefff69f3
 80034e8:	40013800 	.word	0x40013800
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40004400 	.word	0x40004400
 80034f4:	40004800 	.word	0x40004800
 80034f8:	40004c00 	.word	0x40004c00
 80034fc:	40005000 	.word	0x40005000
 8003500:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	77bb      	strb	r3, [r7, #30]
        break;
 800350c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d073      	beq.n	80035fc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	005a      	lsls	r2, r3, #1
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	441a      	add	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b0f      	cmp	r3, #15
 800352e:	d916      	bls.n	800355e <UART_SetConfig+0x2ee>
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003536:	d212      	bcs.n	800355e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	b29b      	uxth	r3, r3
 800353c:	f023 030f 	bic.w	r3, r3, #15
 8003540:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	b29b      	uxth	r3, r3
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	b29a      	uxth	r2, r3
 800354e:	89fb      	ldrh	r3, [r7, #14]
 8003550:	4313      	orrs	r3, r2
 8003552:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	89fa      	ldrh	r2, [r7, #14]
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	e04e      	b.n	80035fc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	77bb      	strb	r3, [r7, #30]
 8003562:	e04b      	b.n	80035fc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003564:	7ffb      	ldrb	r3, [r7, #31]
 8003566:	2b08      	cmp	r3, #8
 8003568:	d827      	bhi.n	80035ba <UART_SetConfig+0x34a>
 800356a:	a201      	add	r2, pc, #4	@ (adr r2, 8003570 <UART_SetConfig+0x300>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	08003595 	.word	0x08003595
 8003574:	0800359d 	.word	0x0800359d
 8003578:	080035a5 	.word	0x080035a5
 800357c:	080035bb 	.word	0x080035bb
 8003580:	080035ab 	.word	0x080035ab
 8003584:	080035bb 	.word	0x080035bb
 8003588:	080035bb 	.word	0x080035bb
 800358c:	080035bb 	.word	0x080035bb
 8003590:	080035b3 	.word	0x080035b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003594:	f7ff fa6c 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 8003598:	61b8      	str	r0, [r7, #24]
        break;
 800359a:	e013      	b.n	80035c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800359c:	f7ff fa8a 	bl	8002ab4 <HAL_RCC_GetPCLK2Freq>
 80035a0:	61b8      	str	r0, [r7, #24]
        break;
 80035a2:	e00f      	b.n	80035c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003614 <UART_SetConfig+0x3a4>)
 80035a6:	61bb      	str	r3, [r7, #24]
        break;
 80035a8:	e00c      	b.n	80035c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035aa:	f7ff fa01 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 80035ae:	61b8      	str	r0, [r7, #24]
        break;
 80035b0:	e008      	b.n	80035c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035b6:	61bb      	str	r3, [r7, #24]
        break;
 80035b8:	e004      	b.n	80035c4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	77bb      	strb	r3, [r7, #30]
        break;
 80035c2:	bf00      	nop
    }

    if (pclk != 0U)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d018      	beq.n	80035fc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	085a      	lsrs	r2, r3, #1
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	441a      	add	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b0f      	cmp	r3, #15
 80035e2:	d909      	bls.n	80035f8 <UART_SetConfig+0x388>
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ea:	d205      	bcs.n	80035f8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60da      	str	r2, [r3, #12]
 80035f6:	e001      	b.n	80035fc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003608:	7fbb      	ldrb	r3, [r7, #30]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	007a1200 	.word	0x007a1200

08003618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01a      	beq.n	800372e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003716:	d10a      	bne.n	800372e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  }
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b098      	sub	sp, #96	@ 0x60
 8003760:	af02      	add	r7, sp, #8
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800376c:	f7fd faa4 	bl	8000cb8 <HAL_GetTick>
 8003770:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d12e      	bne.n	80037de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003780:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003788:	2200      	movs	r2, #0
 800378a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f88c 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d021      	beq.n	80037de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e6      	bne.n	800379a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e062      	b.n	80038a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d149      	bne.n	8003880 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f4:	2200      	movs	r2, #0
 80037f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f856 	bl	80038ac <UART_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d03c      	beq.n	8003880 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	623b      	str	r3, [r7, #32]
   return(result);
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800381a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003824:	633b      	str	r3, [r7, #48]	@ 0x30
 8003826:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003828:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800382a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800382c:	e841 2300 	strex	r3, r2, [r1]
 8003830:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e6      	bne.n	8003806 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3308      	adds	r3, #8
 800383e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	e853 3f00 	ldrex	r3, [r3]
 8003846:	60fb      	str	r3, [r7, #12]
   return(result);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3308      	adds	r3, #8
 8003856:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003858:	61fa      	str	r2, [r7, #28]
 800385a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	69b9      	ldr	r1, [r7, #24]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	e841 2300 	strex	r3, r2, [r1]
 8003864:	617b      	str	r3, [r7, #20]
   return(result);
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e5      	bne.n	8003838 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e011      	b.n	80038a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2220      	movs	r2, #32
 800388a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3758      	adds	r7, #88	@ 0x58
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	4613      	mov	r3, r2
 80038ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038bc:	e04f      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038c4:	d04b      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7fd f9f7 	bl	8000cb8 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d302      	bcc.n	80038dc <UART_WaitOnFlagUntilTimeout+0x30>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e04e      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d037      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xb2>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b80      	cmp	r3, #128	@ 0x80
 80038f2:	d034      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xb2>
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2b40      	cmp	r3, #64	@ 0x40
 80038f8:	d031      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b08      	cmp	r3, #8
 8003906:	d110      	bne.n	800392a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2208      	movs	r2, #8
 800390e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f838 	bl	8003986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2208      	movs	r2, #8
 800391a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e029      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003938:	d111      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f81e 	bl	8003986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e00f      	b.n	800397e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	429a      	cmp	r2, r3
 800397a:	d0a0      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003986:	b480      	push	{r7}
 8003988:	b095      	sub	sp, #84	@ 0x54
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e6      	bne.n	800398e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3308      	adds	r3, #8
 80039c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3308      	adds	r3, #8
 80039de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039e8:	e841 2300 	strex	r3, r2, [r1]
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e5      	bne.n	80039c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d118      	bne.n	8003a2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f023 0310 	bic.w	r3, r3, #16
 8003a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6979      	ldr	r1, [r7, #20]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	613b      	str	r3, [r7, #16]
   return(result);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e6      	bne.n	80039fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a42:	bf00      	nop
 8003a44:	3754      	adds	r7, #84	@ 0x54
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <_vsiprintf_r>:
 8003a50:	b510      	push	{r4, lr}
 8003a52:	b09a      	sub	sp, #104	@ 0x68
 8003a54:	2400      	movs	r4, #0
 8003a56:	9100      	str	r1, [sp, #0]
 8003a58:	9104      	str	r1, [sp, #16]
 8003a5a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a5e:	9105      	str	r1, [sp, #20]
 8003a60:	9102      	str	r1, [sp, #8]
 8003a62:	4905      	ldr	r1, [pc, #20]	@ (8003a78 <_vsiprintf_r+0x28>)
 8003a64:	9103      	str	r1, [sp, #12]
 8003a66:	4669      	mov	r1, sp
 8003a68:	9419      	str	r4, [sp, #100]	@ 0x64
 8003a6a:	f000 f8a1 	bl	8003bb0 <_svfiprintf_r>
 8003a6e:	9b00      	ldr	r3, [sp, #0]
 8003a70:	701c      	strb	r4, [r3, #0]
 8003a72:	b01a      	add	sp, #104	@ 0x68
 8003a74:	bd10      	pop	{r4, pc}
 8003a76:	bf00      	nop
 8003a78:	ffff0208 	.word	0xffff0208

08003a7c <vsiprintf>:
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	460a      	mov	r2, r1
 8003a80:	4601      	mov	r1, r0
 8003a82:	4802      	ldr	r0, [pc, #8]	@ (8003a8c <vsiprintf+0x10>)
 8003a84:	6800      	ldr	r0, [r0, #0]
 8003a86:	f7ff bfe3 	b.w	8003a50 <_vsiprintf_r>
 8003a8a:	bf00      	nop
 8003a8c:	20000010 	.word	0x20000010

08003a90 <memset>:
 8003a90:	4402      	add	r2, r0
 8003a92:	4603      	mov	r3, r0
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d100      	bne.n	8003a9a <memset+0xa>
 8003a98:	4770      	bx	lr
 8003a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9e:	e7f9      	b.n	8003a94 <memset+0x4>

08003aa0 <__errno>:
 8003aa0:	4b01      	ldr	r3, [pc, #4]	@ (8003aa8 <__errno+0x8>)
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000010 	.word	0x20000010

08003aac <__libc_init_array>:
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	4d0d      	ldr	r5, [pc, #52]	@ (8003ae4 <__libc_init_array+0x38>)
 8003ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ae8 <__libc_init_array+0x3c>)
 8003ab2:	1b64      	subs	r4, r4, r5
 8003ab4:	10a4      	asrs	r4, r4, #2
 8003ab6:	2600      	movs	r6, #0
 8003ab8:	42a6      	cmp	r6, r4
 8003aba:	d109      	bne.n	8003ad0 <__libc_init_array+0x24>
 8003abc:	4d0b      	ldr	r5, [pc, #44]	@ (8003aec <__libc_init_array+0x40>)
 8003abe:	4c0c      	ldr	r4, [pc, #48]	@ (8003af0 <__libc_init_array+0x44>)
 8003ac0:	f000 fc64 	bl	800438c <_init>
 8003ac4:	1b64      	subs	r4, r4, r5
 8003ac6:	10a4      	asrs	r4, r4, #2
 8003ac8:	2600      	movs	r6, #0
 8003aca:	42a6      	cmp	r6, r4
 8003acc:	d105      	bne.n	8003ada <__libc_init_array+0x2e>
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad4:	4798      	blx	r3
 8003ad6:	3601      	adds	r6, #1
 8003ad8:	e7ee      	b.n	8003ab8 <__libc_init_array+0xc>
 8003ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ade:	4798      	blx	r3
 8003ae0:	3601      	adds	r6, #1
 8003ae2:	e7f2      	b.n	8003aca <__libc_init_array+0x1e>
 8003ae4:	080045c8 	.word	0x080045c8
 8003ae8:	080045c8 	.word	0x080045c8
 8003aec:	080045c8 	.word	0x080045c8
 8003af0:	080045cc 	.word	0x080045cc

08003af4 <__retarget_lock_acquire_recursive>:
 8003af4:	4770      	bx	lr

08003af6 <__retarget_lock_release_recursive>:
 8003af6:	4770      	bx	lr

08003af8 <__ssputs_r>:
 8003af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	688e      	ldr	r6, [r1, #8]
 8003afe:	461f      	mov	r7, r3
 8003b00:	42be      	cmp	r6, r7
 8003b02:	680b      	ldr	r3, [r1, #0]
 8003b04:	4682      	mov	sl, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	4690      	mov	r8, r2
 8003b0a:	d82d      	bhi.n	8003b68 <__ssputs_r+0x70>
 8003b0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b14:	d026      	beq.n	8003b64 <__ssputs_r+0x6c>
 8003b16:	6965      	ldr	r5, [r4, #20]
 8003b18:	6909      	ldr	r1, [r1, #16]
 8003b1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b1e:	eba3 0901 	sub.w	r9, r3, r1
 8003b22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b26:	1c7b      	adds	r3, r7, #1
 8003b28:	444b      	add	r3, r9
 8003b2a:	106d      	asrs	r5, r5, #1
 8003b2c:	429d      	cmp	r5, r3
 8003b2e:	bf38      	it	cc
 8003b30:	461d      	movcc	r5, r3
 8003b32:	0553      	lsls	r3, r2, #21
 8003b34:	d527      	bpl.n	8003b86 <__ssputs_r+0x8e>
 8003b36:	4629      	mov	r1, r5
 8003b38:	f000 f958 	bl	8003dec <_malloc_r>
 8003b3c:	4606      	mov	r6, r0
 8003b3e:	b360      	cbz	r0, 8003b9a <__ssputs_r+0xa2>
 8003b40:	6921      	ldr	r1, [r4, #16]
 8003b42:	464a      	mov	r2, r9
 8003b44:	f000 fbc2 	bl	80042cc <memcpy>
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b52:	81a3      	strh	r3, [r4, #12]
 8003b54:	6126      	str	r6, [r4, #16]
 8003b56:	6165      	str	r5, [r4, #20]
 8003b58:	444e      	add	r6, r9
 8003b5a:	eba5 0509 	sub.w	r5, r5, r9
 8003b5e:	6026      	str	r6, [r4, #0]
 8003b60:	60a5      	str	r5, [r4, #8]
 8003b62:	463e      	mov	r6, r7
 8003b64:	42be      	cmp	r6, r7
 8003b66:	d900      	bls.n	8003b6a <__ssputs_r+0x72>
 8003b68:	463e      	mov	r6, r7
 8003b6a:	6820      	ldr	r0, [r4, #0]
 8003b6c:	4632      	mov	r2, r6
 8003b6e:	4641      	mov	r1, r8
 8003b70:	f000 fb82 	bl	8004278 <memmove>
 8003b74:	68a3      	ldr	r3, [r4, #8]
 8003b76:	1b9b      	subs	r3, r3, r6
 8003b78:	60a3      	str	r3, [r4, #8]
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	4433      	add	r3, r6
 8003b7e:	6023      	str	r3, [r4, #0]
 8003b80:	2000      	movs	r0, #0
 8003b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b86:	462a      	mov	r2, r5
 8003b88:	f000 fb48 	bl	800421c <_realloc_r>
 8003b8c:	4606      	mov	r6, r0
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d1e0      	bne.n	8003b54 <__ssputs_r+0x5c>
 8003b92:	6921      	ldr	r1, [r4, #16]
 8003b94:	4650      	mov	r0, sl
 8003b96:	f000 fba7 	bl	80042e8 <_free_r>
 8003b9a:	230c      	movs	r3, #12
 8003b9c:	f8ca 3000 	str.w	r3, [sl]
 8003ba0:	89a3      	ldrh	r3, [r4, #12]
 8003ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ba6:	81a3      	strh	r3, [r4, #12]
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bac:	e7e9      	b.n	8003b82 <__ssputs_r+0x8a>
	...

08003bb0 <_svfiprintf_r>:
 8003bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb4:	4698      	mov	r8, r3
 8003bb6:	898b      	ldrh	r3, [r1, #12]
 8003bb8:	061b      	lsls	r3, r3, #24
 8003bba:	b09d      	sub	sp, #116	@ 0x74
 8003bbc:	4607      	mov	r7, r0
 8003bbe:	460d      	mov	r5, r1
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	d510      	bpl.n	8003be6 <_svfiprintf_r+0x36>
 8003bc4:	690b      	ldr	r3, [r1, #16]
 8003bc6:	b973      	cbnz	r3, 8003be6 <_svfiprintf_r+0x36>
 8003bc8:	2140      	movs	r1, #64	@ 0x40
 8003bca:	f000 f90f 	bl	8003dec <_malloc_r>
 8003bce:	6028      	str	r0, [r5, #0]
 8003bd0:	6128      	str	r0, [r5, #16]
 8003bd2:	b930      	cbnz	r0, 8003be2 <_svfiprintf_r+0x32>
 8003bd4:	230c      	movs	r3, #12
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003bdc:	b01d      	add	sp, #116	@ 0x74
 8003bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be2:	2340      	movs	r3, #64	@ 0x40
 8003be4:	616b      	str	r3, [r5, #20]
 8003be6:	2300      	movs	r3, #0
 8003be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bea:	2320      	movs	r3, #32
 8003bec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bf4:	2330      	movs	r3, #48	@ 0x30
 8003bf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003d94 <_svfiprintf_r+0x1e4>
 8003bfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003bfe:	f04f 0901 	mov.w	r9, #1
 8003c02:	4623      	mov	r3, r4
 8003c04:	469a      	mov	sl, r3
 8003c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c0a:	b10a      	cbz	r2, 8003c10 <_svfiprintf_r+0x60>
 8003c0c:	2a25      	cmp	r2, #37	@ 0x25
 8003c0e:	d1f9      	bne.n	8003c04 <_svfiprintf_r+0x54>
 8003c10:	ebba 0b04 	subs.w	fp, sl, r4
 8003c14:	d00b      	beq.n	8003c2e <_svfiprintf_r+0x7e>
 8003c16:	465b      	mov	r3, fp
 8003c18:	4622      	mov	r2, r4
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	4638      	mov	r0, r7
 8003c1e:	f7ff ff6b 	bl	8003af8 <__ssputs_r>
 8003c22:	3001      	adds	r0, #1
 8003c24:	f000 80a7 	beq.w	8003d76 <_svfiprintf_r+0x1c6>
 8003c28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c2a:	445a      	add	r2, fp
 8003c2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 809f 	beq.w	8003d76 <_svfiprintf_r+0x1c6>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c42:	f10a 0a01 	add.w	sl, sl, #1
 8003c46:	9304      	str	r3, [sp, #16]
 8003c48:	9307      	str	r3, [sp, #28]
 8003c4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c50:	4654      	mov	r4, sl
 8003c52:	2205      	movs	r2, #5
 8003c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c58:	484e      	ldr	r0, [pc, #312]	@ (8003d94 <_svfiprintf_r+0x1e4>)
 8003c5a:	f7fc fac9 	bl	80001f0 <memchr>
 8003c5e:	9a04      	ldr	r2, [sp, #16]
 8003c60:	b9d8      	cbnz	r0, 8003c9a <_svfiprintf_r+0xea>
 8003c62:	06d0      	lsls	r0, r2, #27
 8003c64:	bf44      	itt	mi
 8003c66:	2320      	movmi	r3, #32
 8003c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c6c:	0711      	lsls	r1, r2, #28
 8003c6e:	bf44      	itt	mi
 8003c70:	232b      	movmi	r3, #43	@ 0x2b
 8003c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c76:	f89a 3000 	ldrb.w	r3, [sl]
 8003c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c7c:	d015      	beq.n	8003caa <_svfiprintf_r+0xfa>
 8003c7e:	9a07      	ldr	r2, [sp, #28]
 8003c80:	4654      	mov	r4, sl
 8003c82:	2000      	movs	r0, #0
 8003c84:	f04f 0c0a 	mov.w	ip, #10
 8003c88:	4621      	mov	r1, r4
 8003c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c8e:	3b30      	subs	r3, #48	@ 0x30
 8003c90:	2b09      	cmp	r3, #9
 8003c92:	d94b      	bls.n	8003d2c <_svfiprintf_r+0x17c>
 8003c94:	b1b0      	cbz	r0, 8003cc4 <_svfiprintf_r+0x114>
 8003c96:	9207      	str	r2, [sp, #28]
 8003c98:	e014      	b.n	8003cc4 <_svfiprintf_r+0x114>
 8003c9a:	eba0 0308 	sub.w	r3, r0, r8
 8003c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	9304      	str	r3, [sp, #16]
 8003ca6:	46a2      	mov	sl, r4
 8003ca8:	e7d2      	b.n	8003c50 <_svfiprintf_r+0xa0>
 8003caa:	9b03      	ldr	r3, [sp, #12]
 8003cac:	1d19      	adds	r1, r3, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	9103      	str	r1, [sp, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bfbb      	ittet	lt
 8003cb6:	425b      	neglt	r3, r3
 8003cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8003cbc:	9307      	strge	r3, [sp, #28]
 8003cbe:	9307      	strlt	r3, [sp, #28]
 8003cc0:	bfb8      	it	lt
 8003cc2:	9204      	strlt	r2, [sp, #16]
 8003cc4:	7823      	ldrb	r3, [r4, #0]
 8003cc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cc8:	d10a      	bne.n	8003ce0 <_svfiprintf_r+0x130>
 8003cca:	7863      	ldrb	r3, [r4, #1]
 8003ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cce:	d132      	bne.n	8003d36 <_svfiprintf_r+0x186>
 8003cd0:	9b03      	ldr	r3, [sp, #12]
 8003cd2:	1d1a      	adds	r2, r3, #4
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	9203      	str	r2, [sp, #12]
 8003cd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cdc:	3402      	adds	r4, #2
 8003cde:	9305      	str	r3, [sp, #20]
 8003ce0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003da4 <_svfiprintf_r+0x1f4>
 8003ce4:	7821      	ldrb	r1, [r4, #0]
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	4650      	mov	r0, sl
 8003cea:	f7fc fa81 	bl	80001f0 <memchr>
 8003cee:	b138      	cbz	r0, 8003d00 <_svfiprintf_r+0x150>
 8003cf0:	9b04      	ldr	r3, [sp, #16]
 8003cf2:	eba0 000a 	sub.w	r0, r0, sl
 8003cf6:	2240      	movs	r2, #64	@ 0x40
 8003cf8:	4082      	lsls	r2, r0
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	3401      	adds	r4, #1
 8003cfe:	9304      	str	r3, [sp, #16]
 8003d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d04:	4824      	ldr	r0, [pc, #144]	@ (8003d98 <_svfiprintf_r+0x1e8>)
 8003d06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d0a:	2206      	movs	r2, #6
 8003d0c:	f7fc fa70 	bl	80001f0 <memchr>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d036      	beq.n	8003d82 <_svfiprintf_r+0x1d2>
 8003d14:	4b21      	ldr	r3, [pc, #132]	@ (8003d9c <_svfiprintf_r+0x1ec>)
 8003d16:	bb1b      	cbnz	r3, 8003d60 <_svfiprintf_r+0x1b0>
 8003d18:	9b03      	ldr	r3, [sp, #12]
 8003d1a:	3307      	adds	r3, #7
 8003d1c:	f023 0307 	bic.w	r3, r3, #7
 8003d20:	3308      	adds	r3, #8
 8003d22:	9303      	str	r3, [sp, #12]
 8003d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d26:	4433      	add	r3, r6
 8003d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d2a:	e76a      	b.n	8003c02 <_svfiprintf_r+0x52>
 8003d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d30:	460c      	mov	r4, r1
 8003d32:	2001      	movs	r0, #1
 8003d34:	e7a8      	b.n	8003c88 <_svfiprintf_r+0xd8>
 8003d36:	2300      	movs	r3, #0
 8003d38:	3401      	adds	r4, #1
 8003d3a:	9305      	str	r3, [sp, #20]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	f04f 0c0a 	mov.w	ip, #10
 8003d42:	4620      	mov	r0, r4
 8003d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d48:	3a30      	subs	r2, #48	@ 0x30
 8003d4a:	2a09      	cmp	r2, #9
 8003d4c:	d903      	bls.n	8003d56 <_svfiprintf_r+0x1a6>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0c6      	beq.n	8003ce0 <_svfiprintf_r+0x130>
 8003d52:	9105      	str	r1, [sp, #20]
 8003d54:	e7c4      	b.n	8003ce0 <_svfiprintf_r+0x130>
 8003d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e7f0      	b.n	8003d42 <_svfiprintf_r+0x192>
 8003d60:	ab03      	add	r3, sp, #12
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	462a      	mov	r2, r5
 8003d66:	4b0e      	ldr	r3, [pc, #56]	@ (8003da0 <_svfiprintf_r+0x1f0>)
 8003d68:	a904      	add	r1, sp, #16
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	f3af 8000 	nop.w
 8003d70:	1c42      	adds	r2, r0, #1
 8003d72:	4606      	mov	r6, r0
 8003d74:	d1d6      	bne.n	8003d24 <_svfiprintf_r+0x174>
 8003d76:	89ab      	ldrh	r3, [r5, #12]
 8003d78:	065b      	lsls	r3, r3, #25
 8003d7a:	f53f af2d 	bmi.w	8003bd8 <_svfiprintf_r+0x28>
 8003d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d80:	e72c      	b.n	8003bdc <_svfiprintf_r+0x2c>
 8003d82:	ab03      	add	r3, sp, #12
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	462a      	mov	r2, r5
 8003d88:	4b05      	ldr	r3, [pc, #20]	@ (8003da0 <_svfiprintf_r+0x1f0>)
 8003d8a:	a904      	add	r1, sp, #16
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	f000 f91b 	bl	8003fc8 <_printf_i>
 8003d92:	e7ed      	b.n	8003d70 <_svfiprintf_r+0x1c0>
 8003d94:	0800458c 	.word	0x0800458c
 8003d98:	08004596 	.word	0x08004596
 8003d9c:	00000000 	.word	0x00000000
 8003da0:	08003af9 	.word	0x08003af9
 8003da4:	08004592 	.word	0x08004592

08003da8 <sbrk_aligned>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	4e0f      	ldr	r6, [pc, #60]	@ (8003de8 <sbrk_aligned+0x40>)
 8003dac:	460c      	mov	r4, r1
 8003dae:	6831      	ldr	r1, [r6, #0]
 8003db0:	4605      	mov	r5, r0
 8003db2:	b911      	cbnz	r1, 8003dba <sbrk_aligned+0x12>
 8003db4:	f000 fa7a 	bl	80042ac <_sbrk_r>
 8003db8:	6030      	str	r0, [r6, #0]
 8003dba:	4621      	mov	r1, r4
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 fa75 	bl	80042ac <_sbrk_r>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d103      	bne.n	8003dce <sbrk_aligned+0x26>
 8003dc6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003dca:	4620      	mov	r0, r4
 8003dcc:	bd70      	pop	{r4, r5, r6, pc}
 8003dce:	1cc4      	adds	r4, r0, #3
 8003dd0:	f024 0403 	bic.w	r4, r4, #3
 8003dd4:	42a0      	cmp	r0, r4
 8003dd6:	d0f8      	beq.n	8003dca <sbrk_aligned+0x22>
 8003dd8:	1a21      	subs	r1, r4, r0
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f000 fa66 	bl	80042ac <_sbrk_r>
 8003de0:	3001      	adds	r0, #1
 8003de2:	d1f2      	bne.n	8003dca <sbrk_aligned+0x22>
 8003de4:	e7ef      	b.n	8003dc6 <sbrk_aligned+0x1e>
 8003de6:	bf00      	nop
 8003de8:	20000358 	.word	0x20000358

08003dec <_malloc_r>:
 8003dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003df0:	1ccd      	adds	r5, r1, #3
 8003df2:	f025 0503 	bic.w	r5, r5, #3
 8003df6:	3508      	adds	r5, #8
 8003df8:	2d0c      	cmp	r5, #12
 8003dfa:	bf38      	it	cc
 8003dfc:	250c      	movcc	r5, #12
 8003dfe:	2d00      	cmp	r5, #0
 8003e00:	4606      	mov	r6, r0
 8003e02:	db01      	blt.n	8003e08 <_malloc_r+0x1c>
 8003e04:	42a9      	cmp	r1, r5
 8003e06:	d904      	bls.n	8003e12 <_malloc_r+0x26>
 8003e08:	230c      	movs	r3, #12
 8003e0a:	6033      	str	r3, [r6, #0]
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ee8 <_malloc_r+0xfc>
 8003e16:	f000 f9f5 	bl	8004204 <__malloc_lock>
 8003e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e1e:	461c      	mov	r4, r3
 8003e20:	bb44      	cbnz	r4, 8003e74 <_malloc_r+0x88>
 8003e22:	4629      	mov	r1, r5
 8003e24:	4630      	mov	r0, r6
 8003e26:	f7ff ffbf 	bl	8003da8 <sbrk_aligned>
 8003e2a:	1c43      	adds	r3, r0, #1
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	d158      	bne.n	8003ee2 <_malloc_r+0xf6>
 8003e30:	f8d8 4000 	ldr.w	r4, [r8]
 8003e34:	4627      	mov	r7, r4
 8003e36:	2f00      	cmp	r7, #0
 8003e38:	d143      	bne.n	8003ec2 <_malloc_r+0xd6>
 8003e3a:	2c00      	cmp	r4, #0
 8003e3c:	d04b      	beq.n	8003ed6 <_malloc_r+0xea>
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	4639      	mov	r1, r7
 8003e42:	4630      	mov	r0, r6
 8003e44:	eb04 0903 	add.w	r9, r4, r3
 8003e48:	f000 fa30 	bl	80042ac <_sbrk_r>
 8003e4c:	4581      	cmp	r9, r0
 8003e4e:	d142      	bne.n	8003ed6 <_malloc_r+0xea>
 8003e50:	6821      	ldr	r1, [r4, #0]
 8003e52:	1a6d      	subs	r5, r5, r1
 8003e54:	4629      	mov	r1, r5
 8003e56:	4630      	mov	r0, r6
 8003e58:	f7ff ffa6 	bl	8003da8 <sbrk_aligned>
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d03a      	beq.n	8003ed6 <_malloc_r+0xea>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	442b      	add	r3, r5
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	f8d8 3000 	ldr.w	r3, [r8]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	bb62      	cbnz	r2, 8003ec8 <_malloc_r+0xdc>
 8003e6e:	f8c8 7000 	str.w	r7, [r8]
 8003e72:	e00f      	b.n	8003e94 <_malloc_r+0xa8>
 8003e74:	6822      	ldr	r2, [r4, #0]
 8003e76:	1b52      	subs	r2, r2, r5
 8003e78:	d420      	bmi.n	8003ebc <_malloc_r+0xd0>
 8003e7a:	2a0b      	cmp	r2, #11
 8003e7c:	d917      	bls.n	8003eae <_malloc_r+0xc2>
 8003e7e:	1961      	adds	r1, r4, r5
 8003e80:	42a3      	cmp	r3, r4
 8003e82:	6025      	str	r5, [r4, #0]
 8003e84:	bf18      	it	ne
 8003e86:	6059      	strne	r1, [r3, #4]
 8003e88:	6863      	ldr	r3, [r4, #4]
 8003e8a:	bf08      	it	eq
 8003e8c:	f8c8 1000 	streq.w	r1, [r8]
 8003e90:	5162      	str	r2, [r4, r5]
 8003e92:	604b      	str	r3, [r1, #4]
 8003e94:	4630      	mov	r0, r6
 8003e96:	f000 f9bb 	bl	8004210 <__malloc_unlock>
 8003e9a:	f104 000b 	add.w	r0, r4, #11
 8003e9e:	1d23      	adds	r3, r4, #4
 8003ea0:	f020 0007 	bic.w	r0, r0, #7
 8003ea4:	1ac2      	subs	r2, r0, r3
 8003ea6:	bf1c      	itt	ne
 8003ea8:	1a1b      	subne	r3, r3, r0
 8003eaa:	50a3      	strne	r3, [r4, r2]
 8003eac:	e7af      	b.n	8003e0e <_malloc_r+0x22>
 8003eae:	6862      	ldr	r2, [r4, #4]
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	bf0c      	ite	eq
 8003eb4:	f8c8 2000 	streq.w	r2, [r8]
 8003eb8:	605a      	strne	r2, [r3, #4]
 8003eba:	e7eb      	b.n	8003e94 <_malloc_r+0xa8>
 8003ebc:	4623      	mov	r3, r4
 8003ebe:	6864      	ldr	r4, [r4, #4]
 8003ec0:	e7ae      	b.n	8003e20 <_malloc_r+0x34>
 8003ec2:	463c      	mov	r4, r7
 8003ec4:	687f      	ldr	r7, [r7, #4]
 8003ec6:	e7b6      	b.n	8003e36 <_malloc_r+0x4a>
 8003ec8:	461a      	mov	r2, r3
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	42a3      	cmp	r3, r4
 8003ece:	d1fb      	bne.n	8003ec8 <_malloc_r+0xdc>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6053      	str	r3, [r2, #4]
 8003ed4:	e7de      	b.n	8003e94 <_malloc_r+0xa8>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	6033      	str	r3, [r6, #0]
 8003eda:	4630      	mov	r0, r6
 8003edc:	f000 f998 	bl	8004210 <__malloc_unlock>
 8003ee0:	e794      	b.n	8003e0c <_malloc_r+0x20>
 8003ee2:	6005      	str	r5, [r0, #0]
 8003ee4:	e7d6      	b.n	8003e94 <_malloc_r+0xa8>
 8003ee6:	bf00      	nop
 8003ee8:	2000035c 	.word	0x2000035c

08003eec <_printf_common>:
 8003eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef0:	4616      	mov	r6, r2
 8003ef2:	4698      	mov	r8, r3
 8003ef4:	688a      	ldr	r2, [r1, #8]
 8003ef6:	690b      	ldr	r3, [r1, #16]
 8003ef8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003efc:	4293      	cmp	r3, r2
 8003efe:	bfb8      	it	lt
 8003f00:	4613      	movlt	r3, r2
 8003f02:	6033      	str	r3, [r6, #0]
 8003f04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f08:	4607      	mov	r7, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	b10a      	cbz	r2, 8003f12 <_printf_common+0x26>
 8003f0e:	3301      	adds	r3, #1
 8003f10:	6033      	str	r3, [r6, #0]
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	0699      	lsls	r1, r3, #26
 8003f16:	bf42      	ittt	mi
 8003f18:	6833      	ldrmi	r3, [r6, #0]
 8003f1a:	3302      	addmi	r3, #2
 8003f1c:	6033      	strmi	r3, [r6, #0]
 8003f1e:	6825      	ldr	r5, [r4, #0]
 8003f20:	f015 0506 	ands.w	r5, r5, #6
 8003f24:	d106      	bne.n	8003f34 <_printf_common+0x48>
 8003f26:	f104 0a19 	add.w	sl, r4, #25
 8003f2a:	68e3      	ldr	r3, [r4, #12]
 8003f2c:	6832      	ldr	r2, [r6, #0]
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	42ab      	cmp	r3, r5
 8003f32:	dc26      	bgt.n	8003f82 <_printf_common+0x96>
 8003f34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f38:	6822      	ldr	r2, [r4, #0]
 8003f3a:	3b00      	subs	r3, #0
 8003f3c:	bf18      	it	ne
 8003f3e:	2301      	movne	r3, #1
 8003f40:	0692      	lsls	r2, r2, #26
 8003f42:	d42b      	bmi.n	8003f9c <_printf_common+0xb0>
 8003f44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f48:	4641      	mov	r1, r8
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	47c8      	blx	r9
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d01e      	beq.n	8003f90 <_printf_common+0xa4>
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	6922      	ldr	r2, [r4, #16]
 8003f56:	f003 0306 	and.w	r3, r3, #6
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	bf02      	ittt	eq
 8003f5e:	68e5      	ldreq	r5, [r4, #12]
 8003f60:	6833      	ldreq	r3, [r6, #0]
 8003f62:	1aed      	subeq	r5, r5, r3
 8003f64:	68a3      	ldr	r3, [r4, #8]
 8003f66:	bf0c      	ite	eq
 8003f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f6c:	2500      	movne	r5, #0
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	bfc4      	itt	gt
 8003f72:	1a9b      	subgt	r3, r3, r2
 8003f74:	18ed      	addgt	r5, r5, r3
 8003f76:	2600      	movs	r6, #0
 8003f78:	341a      	adds	r4, #26
 8003f7a:	42b5      	cmp	r5, r6
 8003f7c:	d11a      	bne.n	8003fb4 <_printf_common+0xc8>
 8003f7e:	2000      	movs	r0, #0
 8003f80:	e008      	b.n	8003f94 <_printf_common+0xa8>
 8003f82:	2301      	movs	r3, #1
 8003f84:	4652      	mov	r2, sl
 8003f86:	4641      	mov	r1, r8
 8003f88:	4638      	mov	r0, r7
 8003f8a:	47c8      	blx	r9
 8003f8c:	3001      	adds	r0, #1
 8003f8e:	d103      	bne.n	8003f98 <_printf_common+0xac>
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f98:	3501      	adds	r5, #1
 8003f9a:	e7c6      	b.n	8003f2a <_printf_common+0x3e>
 8003f9c:	18e1      	adds	r1, r4, r3
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	2030      	movs	r0, #48	@ 0x30
 8003fa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fa6:	4422      	add	r2, r4
 8003fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	e7c7      	b.n	8003f44 <_printf_common+0x58>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	4641      	mov	r1, r8
 8003fba:	4638      	mov	r0, r7
 8003fbc:	47c8      	blx	r9
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	d0e6      	beq.n	8003f90 <_printf_common+0xa4>
 8003fc2:	3601      	adds	r6, #1
 8003fc4:	e7d9      	b.n	8003f7a <_printf_common+0x8e>
	...

08003fc8 <_printf_i>:
 8003fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fcc:	7e0f      	ldrb	r7, [r1, #24]
 8003fce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fd0:	2f78      	cmp	r7, #120	@ 0x78
 8003fd2:	4691      	mov	r9, r2
 8003fd4:	4680      	mov	r8, r0
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	469a      	mov	sl, r3
 8003fda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fde:	d807      	bhi.n	8003ff0 <_printf_i+0x28>
 8003fe0:	2f62      	cmp	r7, #98	@ 0x62
 8003fe2:	d80a      	bhi.n	8003ffa <_printf_i+0x32>
 8003fe4:	2f00      	cmp	r7, #0
 8003fe6:	f000 80d1 	beq.w	800418c <_printf_i+0x1c4>
 8003fea:	2f58      	cmp	r7, #88	@ 0x58
 8003fec:	f000 80b8 	beq.w	8004160 <_printf_i+0x198>
 8003ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ff8:	e03a      	b.n	8004070 <_printf_i+0xa8>
 8003ffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ffe:	2b15      	cmp	r3, #21
 8004000:	d8f6      	bhi.n	8003ff0 <_printf_i+0x28>
 8004002:	a101      	add	r1, pc, #4	@ (adr r1, 8004008 <_printf_i+0x40>)
 8004004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004008:	08004061 	.word	0x08004061
 800400c:	08004075 	.word	0x08004075
 8004010:	08003ff1 	.word	0x08003ff1
 8004014:	08003ff1 	.word	0x08003ff1
 8004018:	08003ff1 	.word	0x08003ff1
 800401c:	08003ff1 	.word	0x08003ff1
 8004020:	08004075 	.word	0x08004075
 8004024:	08003ff1 	.word	0x08003ff1
 8004028:	08003ff1 	.word	0x08003ff1
 800402c:	08003ff1 	.word	0x08003ff1
 8004030:	08003ff1 	.word	0x08003ff1
 8004034:	08004173 	.word	0x08004173
 8004038:	0800409f 	.word	0x0800409f
 800403c:	0800412d 	.word	0x0800412d
 8004040:	08003ff1 	.word	0x08003ff1
 8004044:	08003ff1 	.word	0x08003ff1
 8004048:	08004195 	.word	0x08004195
 800404c:	08003ff1 	.word	0x08003ff1
 8004050:	0800409f 	.word	0x0800409f
 8004054:	08003ff1 	.word	0x08003ff1
 8004058:	08003ff1 	.word	0x08003ff1
 800405c:	08004135 	.word	0x08004135
 8004060:	6833      	ldr	r3, [r6, #0]
 8004062:	1d1a      	adds	r2, r3, #4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6032      	str	r2, [r6, #0]
 8004068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800406c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004070:	2301      	movs	r3, #1
 8004072:	e09c      	b.n	80041ae <_printf_i+0x1e6>
 8004074:	6833      	ldr	r3, [r6, #0]
 8004076:	6820      	ldr	r0, [r4, #0]
 8004078:	1d19      	adds	r1, r3, #4
 800407a:	6031      	str	r1, [r6, #0]
 800407c:	0606      	lsls	r6, r0, #24
 800407e:	d501      	bpl.n	8004084 <_printf_i+0xbc>
 8004080:	681d      	ldr	r5, [r3, #0]
 8004082:	e003      	b.n	800408c <_printf_i+0xc4>
 8004084:	0645      	lsls	r5, r0, #25
 8004086:	d5fb      	bpl.n	8004080 <_printf_i+0xb8>
 8004088:	f9b3 5000 	ldrsh.w	r5, [r3]
 800408c:	2d00      	cmp	r5, #0
 800408e:	da03      	bge.n	8004098 <_printf_i+0xd0>
 8004090:	232d      	movs	r3, #45	@ 0x2d
 8004092:	426d      	negs	r5, r5
 8004094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004098:	4858      	ldr	r0, [pc, #352]	@ (80041fc <_printf_i+0x234>)
 800409a:	230a      	movs	r3, #10
 800409c:	e011      	b.n	80040c2 <_printf_i+0xfa>
 800409e:	6821      	ldr	r1, [r4, #0]
 80040a0:	6833      	ldr	r3, [r6, #0]
 80040a2:	0608      	lsls	r0, r1, #24
 80040a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80040a8:	d402      	bmi.n	80040b0 <_printf_i+0xe8>
 80040aa:	0649      	lsls	r1, r1, #25
 80040ac:	bf48      	it	mi
 80040ae:	b2ad      	uxthmi	r5, r5
 80040b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80040b2:	4852      	ldr	r0, [pc, #328]	@ (80041fc <_printf_i+0x234>)
 80040b4:	6033      	str	r3, [r6, #0]
 80040b6:	bf14      	ite	ne
 80040b8:	230a      	movne	r3, #10
 80040ba:	2308      	moveq	r3, #8
 80040bc:	2100      	movs	r1, #0
 80040be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040c2:	6866      	ldr	r6, [r4, #4]
 80040c4:	60a6      	str	r6, [r4, #8]
 80040c6:	2e00      	cmp	r6, #0
 80040c8:	db05      	blt.n	80040d6 <_printf_i+0x10e>
 80040ca:	6821      	ldr	r1, [r4, #0]
 80040cc:	432e      	orrs	r6, r5
 80040ce:	f021 0104 	bic.w	r1, r1, #4
 80040d2:	6021      	str	r1, [r4, #0]
 80040d4:	d04b      	beq.n	800416e <_printf_i+0x1a6>
 80040d6:	4616      	mov	r6, r2
 80040d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80040dc:	fb03 5711 	mls	r7, r3, r1, r5
 80040e0:	5dc7      	ldrb	r7, [r0, r7]
 80040e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040e6:	462f      	mov	r7, r5
 80040e8:	42bb      	cmp	r3, r7
 80040ea:	460d      	mov	r5, r1
 80040ec:	d9f4      	bls.n	80040d8 <_printf_i+0x110>
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d10b      	bne.n	800410a <_printf_i+0x142>
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	07df      	lsls	r7, r3, #31
 80040f6:	d508      	bpl.n	800410a <_printf_i+0x142>
 80040f8:	6923      	ldr	r3, [r4, #16]
 80040fa:	6861      	ldr	r1, [r4, #4]
 80040fc:	4299      	cmp	r1, r3
 80040fe:	bfde      	ittt	le
 8004100:	2330      	movle	r3, #48	@ 0x30
 8004102:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004106:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800410a:	1b92      	subs	r2, r2, r6
 800410c:	6122      	str	r2, [r4, #16]
 800410e:	f8cd a000 	str.w	sl, [sp]
 8004112:	464b      	mov	r3, r9
 8004114:	aa03      	add	r2, sp, #12
 8004116:	4621      	mov	r1, r4
 8004118:	4640      	mov	r0, r8
 800411a:	f7ff fee7 	bl	8003eec <_printf_common>
 800411e:	3001      	adds	r0, #1
 8004120:	d14a      	bne.n	80041b8 <_printf_i+0x1f0>
 8004122:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004126:	b004      	add	sp, #16
 8004128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	f043 0320 	orr.w	r3, r3, #32
 8004132:	6023      	str	r3, [r4, #0]
 8004134:	4832      	ldr	r0, [pc, #200]	@ (8004200 <_printf_i+0x238>)
 8004136:	2778      	movs	r7, #120	@ 0x78
 8004138:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	6831      	ldr	r1, [r6, #0]
 8004140:	061f      	lsls	r7, r3, #24
 8004142:	f851 5b04 	ldr.w	r5, [r1], #4
 8004146:	d402      	bmi.n	800414e <_printf_i+0x186>
 8004148:	065f      	lsls	r7, r3, #25
 800414a:	bf48      	it	mi
 800414c:	b2ad      	uxthmi	r5, r5
 800414e:	6031      	str	r1, [r6, #0]
 8004150:	07d9      	lsls	r1, r3, #31
 8004152:	bf44      	itt	mi
 8004154:	f043 0320 	orrmi.w	r3, r3, #32
 8004158:	6023      	strmi	r3, [r4, #0]
 800415a:	b11d      	cbz	r5, 8004164 <_printf_i+0x19c>
 800415c:	2310      	movs	r3, #16
 800415e:	e7ad      	b.n	80040bc <_printf_i+0xf4>
 8004160:	4826      	ldr	r0, [pc, #152]	@ (80041fc <_printf_i+0x234>)
 8004162:	e7e9      	b.n	8004138 <_printf_i+0x170>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	f023 0320 	bic.w	r3, r3, #32
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	e7f6      	b.n	800415c <_printf_i+0x194>
 800416e:	4616      	mov	r6, r2
 8004170:	e7bd      	b.n	80040ee <_printf_i+0x126>
 8004172:	6833      	ldr	r3, [r6, #0]
 8004174:	6825      	ldr	r5, [r4, #0]
 8004176:	6961      	ldr	r1, [r4, #20]
 8004178:	1d18      	adds	r0, r3, #4
 800417a:	6030      	str	r0, [r6, #0]
 800417c:	062e      	lsls	r6, r5, #24
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	d501      	bpl.n	8004186 <_printf_i+0x1be>
 8004182:	6019      	str	r1, [r3, #0]
 8004184:	e002      	b.n	800418c <_printf_i+0x1c4>
 8004186:	0668      	lsls	r0, r5, #25
 8004188:	d5fb      	bpl.n	8004182 <_printf_i+0x1ba>
 800418a:	8019      	strh	r1, [r3, #0]
 800418c:	2300      	movs	r3, #0
 800418e:	6123      	str	r3, [r4, #16]
 8004190:	4616      	mov	r6, r2
 8004192:	e7bc      	b.n	800410e <_printf_i+0x146>
 8004194:	6833      	ldr	r3, [r6, #0]
 8004196:	1d1a      	adds	r2, r3, #4
 8004198:	6032      	str	r2, [r6, #0]
 800419a:	681e      	ldr	r6, [r3, #0]
 800419c:	6862      	ldr	r2, [r4, #4]
 800419e:	2100      	movs	r1, #0
 80041a0:	4630      	mov	r0, r6
 80041a2:	f7fc f825 	bl	80001f0 <memchr>
 80041a6:	b108      	cbz	r0, 80041ac <_printf_i+0x1e4>
 80041a8:	1b80      	subs	r0, r0, r6
 80041aa:	6060      	str	r0, [r4, #4]
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	6123      	str	r3, [r4, #16]
 80041b0:	2300      	movs	r3, #0
 80041b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041b6:	e7aa      	b.n	800410e <_printf_i+0x146>
 80041b8:	6923      	ldr	r3, [r4, #16]
 80041ba:	4632      	mov	r2, r6
 80041bc:	4649      	mov	r1, r9
 80041be:	4640      	mov	r0, r8
 80041c0:	47d0      	blx	sl
 80041c2:	3001      	adds	r0, #1
 80041c4:	d0ad      	beq.n	8004122 <_printf_i+0x15a>
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	079b      	lsls	r3, r3, #30
 80041ca:	d413      	bmi.n	80041f4 <_printf_i+0x22c>
 80041cc:	68e0      	ldr	r0, [r4, #12]
 80041ce:	9b03      	ldr	r3, [sp, #12]
 80041d0:	4298      	cmp	r0, r3
 80041d2:	bfb8      	it	lt
 80041d4:	4618      	movlt	r0, r3
 80041d6:	e7a6      	b.n	8004126 <_printf_i+0x15e>
 80041d8:	2301      	movs	r3, #1
 80041da:	4632      	mov	r2, r6
 80041dc:	4649      	mov	r1, r9
 80041de:	4640      	mov	r0, r8
 80041e0:	47d0      	blx	sl
 80041e2:	3001      	adds	r0, #1
 80041e4:	d09d      	beq.n	8004122 <_printf_i+0x15a>
 80041e6:	3501      	adds	r5, #1
 80041e8:	68e3      	ldr	r3, [r4, #12]
 80041ea:	9903      	ldr	r1, [sp, #12]
 80041ec:	1a5b      	subs	r3, r3, r1
 80041ee:	42ab      	cmp	r3, r5
 80041f0:	dcf2      	bgt.n	80041d8 <_printf_i+0x210>
 80041f2:	e7eb      	b.n	80041cc <_printf_i+0x204>
 80041f4:	2500      	movs	r5, #0
 80041f6:	f104 0619 	add.w	r6, r4, #25
 80041fa:	e7f5      	b.n	80041e8 <_printf_i+0x220>
 80041fc:	0800459d 	.word	0x0800459d
 8004200:	080045ae 	.word	0x080045ae

08004204 <__malloc_lock>:
 8004204:	4801      	ldr	r0, [pc, #4]	@ (800420c <__malloc_lock+0x8>)
 8004206:	f7ff bc75 	b.w	8003af4 <__retarget_lock_acquire_recursive>
 800420a:	bf00      	nop
 800420c:	20000354 	.word	0x20000354

08004210 <__malloc_unlock>:
 8004210:	4801      	ldr	r0, [pc, #4]	@ (8004218 <__malloc_unlock+0x8>)
 8004212:	f7ff bc70 	b.w	8003af6 <__retarget_lock_release_recursive>
 8004216:	bf00      	nop
 8004218:	20000354 	.word	0x20000354

0800421c <_realloc_r>:
 800421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004220:	4607      	mov	r7, r0
 8004222:	4614      	mov	r4, r2
 8004224:	460d      	mov	r5, r1
 8004226:	b921      	cbnz	r1, 8004232 <_realloc_r+0x16>
 8004228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800422c:	4611      	mov	r1, r2
 800422e:	f7ff bddd 	b.w	8003dec <_malloc_r>
 8004232:	b92a      	cbnz	r2, 8004240 <_realloc_r+0x24>
 8004234:	f000 f858 	bl	80042e8 <_free_r>
 8004238:	4625      	mov	r5, r4
 800423a:	4628      	mov	r0, r5
 800423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004240:	f000 f89c 	bl	800437c <_malloc_usable_size_r>
 8004244:	4284      	cmp	r4, r0
 8004246:	4606      	mov	r6, r0
 8004248:	d802      	bhi.n	8004250 <_realloc_r+0x34>
 800424a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800424e:	d8f4      	bhi.n	800423a <_realloc_r+0x1e>
 8004250:	4621      	mov	r1, r4
 8004252:	4638      	mov	r0, r7
 8004254:	f7ff fdca 	bl	8003dec <_malloc_r>
 8004258:	4680      	mov	r8, r0
 800425a:	b908      	cbnz	r0, 8004260 <_realloc_r+0x44>
 800425c:	4645      	mov	r5, r8
 800425e:	e7ec      	b.n	800423a <_realloc_r+0x1e>
 8004260:	42b4      	cmp	r4, r6
 8004262:	4622      	mov	r2, r4
 8004264:	4629      	mov	r1, r5
 8004266:	bf28      	it	cs
 8004268:	4632      	movcs	r2, r6
 800426a:	f000 f82f 	bl	80042cc <memcpy>
 800426e:	4629      	mov	r1, r5
 8004270:	4638      	mov	r0, r7
 8004272:	f000 f839 	bl	80042e8 <_free_r>
 8004276:	e7f1      	b.n	800425c <_realloc_r+0x40>

08004278 <memmove>:
 8004278:	4288      	cmp	r0, r1
 800427a:	b510      	push	{r4, lr}
 800427c:	eb01 0402 	add.w	r4, r1, r2
 8004280:	d902      	bls.n	8004288 <memmove+0x10>
 8004282:	4284      	cmp	r4, r0
 8004284:	4623      	mov	r3, r4
 8004286:	d807      	bhi.n	8004298 <memmove+0x20>
 8004288:	1e43      	subs	r3, r0, #1
 800428a:	42a1      	cmp	r1, r4
 800428c:	d008      	beq.n	80042a0 <memmove+0x28>
 800428e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004296:	e7f8      	b.n	800428a <memmove+0x12>
 8004298:	4402      	add	r2, r0
 800429a:	4601      	mov	r1, r0
 800429c:	428a      	cmp	r2, r1
 800429e:	d100      	bne.n	80042a2 <memmove+0x2a>
 80042a0:	bd10      	pop	{r4, pc}
 80042a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042aa:	e7f7      	b.n	800429c <memmove+0x24>

080042ac <_sbrk_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4d06      	ldr	r5, [pc, #24]	@ (80042c8 <_sbrk_r+0x1c>)
 80042b0:	2300      	movs	r3, #0
 80042b2:	4604      	mov	r4, r0
 80042b4:	4608      	mov	r0, r1
 80042b6:	602b      	str	r3, [r5, #0]
 80042b8:	f7fc fc32 	bl	8000b20 <_sbrk>
 80042bc:	1c43      	adds	r3, r0, #1
 80042be:	d102      	bne.n	80042c6 <_sbrk_r+0x1a>
 80042c0:	682b      	ldr	r3, [r5, #0]
 80042c2:	b103      	cbz	r3, 80042c6 <_sbrk_r+0x1a>
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	bd38      	pop	{r3, r4, r5, pc}
 80042c8:	20000360 	.word	0x20000360

080042cc <memcpy>:
 80042cc:	440a      	add	r2, r1
 80042ce:	4291      	cmp	r1, r2
 80042d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80042d4:	d100      	bne.n	80042d8 <memcpy+0xc>
 80042d6:	4770      	bx	lr
 80042d8:	b510      	push	{r4, lr}
 80042da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042e2:	4291      	cmp	r1, r2
 80042e4:	d1f9      	bne.n	80042da <memcpy+0xe>
 80042e6:	bd10      	pop	{r4, pc}

080042e8 <_free_r>:
 80042e8:	b538      	push	{r3, r4, r5, lr}
 80042ea:	4605      	mov	r5, r0
 80042ec:	2900      	cmp	r1, #0
 80042ee:	d041      	beq.n	8004374 <_free_r+0x8c>
 80042f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042f4:	1f0c      	subs	r4, r1, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bfb8      	it	lt
 80042fa:	18e4      	addlt	r4, r4, r3
 80042fc:	f7ff ff82 	bl	8004204 <__malloc_lock>
 8004300:	4a1d      	ldr	r2, [pc, #116]	@ (8004378 <_free_r+0x90>)
 8004302:	6813      	ldr	r3, [r2, #0]
 8004304:	b933      	cbnz	r3, 8004314 <_free_r+0x2c>
 8004306:	6063      	str	r3, [r4, #4]
 8004308:	6014      	str	r4, [r2, #0]
 800430a:	4628      	mov	r0, r5
 800430c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004310:	f7ff bf7e 	b.w	8004210 <__malloc_unlock>
 8004314:	42a3      	cmp	r3, r4
 8004316:	d908      	bls.n	800432a <_free_r+0x42>
 8004318:	6820      	ldr	r0, [r4, #0]
 800431a:	1821      	adds	r1, r4, r0
 800431c:	428b      	cmp	r3, r1
 800431e:	bf01      	itttt	eq
 8004320:	6819      	ldreq	r1, [r3, #0]
 8004322:	685b      	ldreq	r3, [r3, #4]
 8004324:	1809      	addeq	r1, r1, r0
 8004326:	6021      	streq	r1, [r4, #0]
 8004328:	e7ed      	b.n	8004306 <_free_r+0x1e>
 800432a:	461a      	mov	r2, r3
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	b10b      	cbz	r3, 8004334 <_free_r+0x4c>
 8004330:	42a3      	cmp	r3, r4
 8004332:	d9fa      	bls.n	800432a <_free_r+0x42>
 8004334:	6811      	ldr	r1, [r2, #0]
 8004336:	1850      	adds	r0, r2, r1
 8004338:	42a0      	cmp	r0, r4
 800433a:	d10b      	bne.n	8004354 <_free_r+0x6c>
 800433c:	6820      	ldr	r0, [r4, #0]
 800433e:	4401      	add	r1, r0
 8004340:	1850      	adds	r0, r2, r1
 8004342:	4283      	cmp	r3, r0
 8004344:	6011      	str	r1, [r2, #0]
 8004346:	d1e0      	bne.n	800430a <_free_r+0x22>
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	6053      	str	r3, [r2, #4]
 800434e:	4408      	add	r0, r1
 8004350:	6010      	str	r0, [r2, #0]
 8004352:	e7da      	b.n	800430a <_free_r+0x22>
 8004354:	d902      	bls.n	800435c <_free_r+0x74>
 8004356:	230c      	movs	r3, #12
 8004358:	602b      	str	r3, [r5, #0]
 800435a:	e7d6      	b.n	800430a <_free_r+0x22>
 800435c:	6820      	ldr	r0, [r4, #0]
 800435e:	1821      	adds	r1, r4, r0
 8004360:	428b      	cmp	r3, r1
 8004362:	bf04      	itt	eq
 8004364:	6819      	ldreq	r1, [r3, #0]
 8004366:	685b      	ldreq	r3, [r3, #4]
 8004368:	6063      	str	r3, [r4, #4]
 800436a:	bf04      	itt	eq
 800436c:	1809      	addeq	r1, r1, r0
 800436e:	6021      	streq	r1, [r4, #0]
 8004370:	6054      	str	r4, [r2, #4]
 8004372:	e7ca      	b.n	800430a <_free_r+0x22>
 8004374:	bd38      	pop	{r3, r4, r5, pc}
 8004376:	bf00      	nop
 8004378:	2000035c 	.word	0x2000035c

0800437c <_malloc_usable_size_r>:
 800437c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004380:	1f18      	subs	r0, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	bfbc      	itt	lt
 8004386:	580b      	ldrlt	r3, [r1, r0]
 8004388:	18c0      	addlt	r0, r0, r3
 800438a:	4770      	bx	lr

0800438c <_init>:
 800438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438e:	bf00      	nop
 8004390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004392:	bc08      	pop	{r3}
 8004394:	469e      	mov	lr, r3
 8004396:	4770      	bx	lr

08004398 <_fini>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	bf00      	nop
 800439c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439e:	bc08      	pop	{r3}
 80043a0:	469e      	mov	lr, r3
 80043a2:	4770      	bx	lr
