
002_BOOTLOADER_USER_APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003930  080081a0  080081a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800bad0  0800bad0  00004ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb5c  0800bb5c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bb5c  0800bb5c  00004b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb64  0800bb64  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb64  0800bb64  00004b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb68  0800bb68  00004b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800bb6c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          0000027c  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d8  200002d8  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000918f  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001675  00000000  00000000  0000e21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  0000f890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050d  00000000  00000000  0000ff30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb59  00000000  00000000  0001043d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000096a7  00000000  00000000  0002ff96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c01fa  00000000  00000000  0003963d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f9837  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e9c  00000000  00000000  000f987c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  000fb718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	@ (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	@ (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	@ (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	2000005c 	.word	0x2000005c
 80081bc:	00000000 	.word	0x00000000
 80081c0:	0800bab8 	.word	0x0800bab8

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	@ (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	@ (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	@ (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	20000060 	.word	0x20000060
 80081dc:	0800bab8 	.word	0x0800bab8

080081e0 <strlen>:
 80081e0:	4603      	mov	r3, r0
 80081e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	d1fb      	bne.n	80081e2 <strlen+0x2>
 80081ea:	1a18      	subs	r0, r3, r0
 80081ec:	3801      	subs	r0, #1
 80081ee:	4770      	bx	lr

080081f0 <memchr>:
 80081f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80081f4:	2a10      	cmp	r2, #16
 80081f6:	db2b      	blt.n	8008250 <memchr+0x60>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	d008      	beq.n	8008210 <memchr+0x20>
 80081fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008202:	3a01      	subs	r2, #1
 8008204:	428b      	cmp	r3, r1
 8008206:	d02d      	beq.n	8008264 <memchr+0x74>
 8008208:	f010 0f07 	tst.w	r0, #7
 800820c:	b342      	cbz	r2, 8008260 <memchr+0x70>
 800820e:	d1f6      	bne.n	80081fe <memchr+0xe>
 8008210:	b4f0      	push	{r4, r5, r6, r7}
 8008212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800821a:	f022 0407 	bic.w	r4, r2, #7
 800821e:	f07f 0700 	mvns.w	r7, #0
 8008222:	2300      	movs	r3, #0
 8008224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008228:	3c08      	subs	r4, #8
 800822a:	ea85 0501 	eor.w	r5, r5, r1
 800822e:	ea86 0601 	eor.w	r6, r6, r1
 8008232:	fa85 f547 	uadd8	r5, r5, r7
 8008236:	faa3 f587 	sel	r5, r3, r7
 800823a:	fa86 f647 	uadd8	r6, r6, r7
 800823e:	faa5 f687 	sel	r6, r5, r7
 8008242:	b98e      	cbnz	r6, 8008268 <memchr+0x78>
 8008244:	d1ee      	bne.n	8008224 <memchr+0x34>
 8008246:	bcf0      	pop	{r4, r5, r6, r7}
 8008248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800824c:	f002 0207 	and.w	r2, r2, #7
 8008250:	b132      	cbz	r2, 8008260 <memchr+0x70>
 8008252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008256:	3a01      	subs	r2, #1
 8008258:	ea83 0301 	eor.w	r3, r3, r1
 800825c:	b113      	cbz	r3, 8008264 <memchr+0x74>
 800825e:	d1f8      	bne.n	8008252 <memchr+0x62>
 8008260:	2000      	movs	r0, #0
 8008262:	4770      	bx	lr
 8008264:	3801      	subs	r0, #1
 8008266:	4770      	bx	lr
 8008268:	2d00      	cmp	r5, #0
 800826a:	bf06      	itte	eq
 800826c:	4635      	moveq	r5, r6
 800826e:	3803      	subeq	r0, #3
 8008270:	3807      	subne	r0, #7
 8008272:	f015 0f01 	tst.w	r5, #1
 8008276:	d107      	bne.n	8008288 <memchr+0x98>
 8008278:	3001      	adds	r0, #1
 800827a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800827e:	bf02      	ittt	eq
 8008280:	3001      	addeq	r0, #1
 8008282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8008286:	3001      	addeq	r0, #1
 8008288:	bcf0      	pop	{r4, r5, r6, r7}
 800828a:	3801      	subs	r0, #1
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop

08008290 <print_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_message(char* format, ...){
 8008290:	b40f      	push	{r0, r1, r2, r3}
 8008292:	b580      	push	{r7, lr}
 8008294:	b09a      	sub	sp, #104	@ 0x68
 8008296:	af00      	add	r7, sp, #0

	char coming_message[100];

	va_list va_list;
	va_start(va_list, format);
 8008298:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800829c:	603b      	str	r3, [r7, #0]
	vsprintf(coming_message, format, va_list);
 800829e:	1d3b      	adds	r3, r7, #4
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80082a4:	4618      	mov	r0, r3
 80082a6:	f002 ff7f 	bl	800b1a8 <vsiprintf>
	HAL_UART_Transmit(DEBUG_UART_PORT, (uint8_t*)coming_message, strlen(coming_message), HAL_MAX_DELAY);
 80082aa:	1d3b      	adds	r3, r7, #4
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7ff ff97 	bl	80081e0 <strlen>
 80082b2:	4603      	mov	r3, r0
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	1d39      	adds	r1, r7, #4
 80082b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80082bc:	4804      	ldr	r0, [pc, #16]	@ (80082d0 <print_message+0x40>)
 80082be:	f002 fae3 	bl	800a888 <HAL_UART_Transmit>
	va_end(va_list);
}
 80082c2:	bf00      	nop
 80082c4:	3768      	adds	r7, #104	@ 0x68
 80082c6:	46bd      	mov	sp, r7
 80082c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082cc:	b004      	add	sp, #16
 80082ce:	4770      	bx	lr
 80082d0:	20000078 	.word	0x20000078

080082d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80082d8:	f000 faa2 	bl	8008820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80082dc:	f000 f812 	bl	8008304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80082e0:	f000 f8c4 	bl	800846c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80082e4:	f000 f862 	bl	80083ac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80082e8:	f000 f890 	bl	800840c <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  print_message("Hello from BL user application\n");
 80082ec:	4804      	ldr	r0, [pc, #16]	@ (8008300 <main+0x2c>)
 80082ee:	f7ff ffcf 	bl	8008290 <print_message>
	  HAL_Delay(500);
 80082f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80082f6:	f000 faf9 	bl	80088ec <HAL_Delay>
	  print_message("Hello from BL user application\n");
 80082fa:	bf00      	nop
 80082fc:	e7f6      	b.n	80082ec <main+0x18>
 80082fe:	bf00      	nop
 8008300:	0800bad0 	.word	0x0800bad0

08008304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b0a6      	sub	sp, #152	@ 0x98
 8008308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800830a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800830e:	2228      	movs	r2, #40	@ 0x28
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f002 ff52 	bl	800b1bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008318:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800831c:	2200      	movs	r2, #0
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	605a      	str	r2, [r3, #4]
 8008322:	609a      	str	r2, [r3, #8]
 8008324:	60da      	str	r2, [r3, #12]
 8008326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008328:	1d3b      	adds	r3, r7, #4
 800832a:	2258      	movs	r2, #88	@ 0x58
 800832c:	2100      	movs	r1, #0
 800832e:	4618      	mov	r0, r3
 8008330:	f002 ff44 	bl	800b1bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008334:	2302      	movs	r3, #2
 8008336:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008338:	2301      	movs	r3, #1
 800833a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800833c:	2310      	movs	r3, #16
 800833e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008342:	2300      	movs	r3, #0
 8008344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008348:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800834c:	4618      	mov	r0, r3
 800834e:	f000 fdfb 	bl	8008f48 <HAL_RCC_OscConfig>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008358:	f000 f8ea 	bl	8008530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800835c:	230f      	movs	r3, #15
 800835e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008360:	2300      	movs	r3, #0
 8008362:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008364:	2300      	movs	r3, #0
 8008366:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008368:	2300      	movs	r3, #0
 800836a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800836c:	2300      	movs	r3, #0
 800836e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008370:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008374:	2100      	movs	r1, #0
 8008376:	4618      	mov	r0, r3
 8008378:	f001 fe0a 	bl	8009f90 <HAL_RCC_ClockConfig>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008382:	f000 f8d5 	bl	8008530 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8008386:	2306      	movs	r3, #6
 8008388:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800838a:	2300      	movs	r3, #0
 800838c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008392:	1d3b      	adds	r3, r7, #4
 8008394:	4618      	mov	r0, r3
 8008396:	f002 f80d 	bl	800a3b4 <HAL_RCCEx_PeriphCLKConfig>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80083a0:	f000 f8c6 	bl	8008530 <Error_Handler>
  }
}
 80083a4:	bf00      	nop
 80083a6:	3798      	adds	r7, #152	@ 0x98
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80083b0:	4b14      	ldr	r3, [pc, #80]	@ (8008404 <MX_USART2_UART_Init+0x58>)
 80083b2:	4a15      	ldr	r2, [pc, #84]	@ (8008408 <MX_USART2_UART_Init+0x5c>)
 80083b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80083b6:	4b13      	ldr	r3, [pc, #76]	@ (8008404 <MX_USART2_UART_Init+0x58>)
 80083b8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80083bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80083be:	4b11      	ldr	r3, [pc, #68]	@ (8008404 <MX_USART2_UART_Init+0x58>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80083c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008404 <MX_USART2_UART_Init+0x58>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80083ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008404 <MX_USART2_UART_Init+0x58>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80083d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008404 <MX_USART2_UART_Init+0x58>)
 80083d2:	220c      	movs	r2, #12
 80083d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008404 <MX_USART2_UART_Init+0x58>)
 80083d8:	2200      	movs	r2, #0
 80083da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80083dc:	4b09      	ldr	r3, [pc, #36]	@ (8008404 <MX_USART2_UART_Init+0x58>)
 80083de:	2200      	movs	r2, #0
 80083e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80083e2:	4b08      	ldr	r3, [pc, #32]	@ (8008404 <MX_USART2_UART_Init+0x58>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80083e8:	4b06      	ldr	r3, [pc, #24]	@ (8008404 <MX_USART2_UART_Init+0x58>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80083ee:	4805      	ldr	r0, [pc, #20]	@ (8008404 <MX_USART2_UART_Init+0x58>)
 80083f0:	f002 f9fc 	bl	800a7ec <HAL_UART_Init>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80083fa:	f000 f899 	bl	8008530 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80083fe:	bf00      	nop
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000078 	.word	0x20000078
 8008408:	40004400 	.word	0x40004400

0800840c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008410:	4b14      	ldr	r3, [pc, #80]	@ (8008464 <MX_USART3_UART_Init+0x58>)
 8008412:	4a15      	ldr	r2, [pc, #84]	@ (8008468 <MX_USART3_UART_Init+0x5c>)
 8008414:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8008416:	4b13      	ldr	r3, [pc, #76]	@ (8008464 <MX_USART3_UART_Init+0x58>)
 8008418:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800841c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800841e:	4b11      	ldr	r3, [pc, #68]	@ (8008464 <MX_USART3_UART_Init+0x58>)
 8008420:	2200      	movs	r2, #0
 8008422:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008424:	4b0f      	ldr	r3, [pc, #60]	@ (8008464 <MX_USART3_UART_Init+0x58>)
 8008426:	2200      	movs	r2, #0
 8008428:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800842a:	4b0e      	ldr	r3, [pc, #56]	@ (8008464 <MX_USART3_UART_Init+0x58>)
 800842c:	2200      	movs	r2, #0
 800842e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008430:	4b0c      	ldr	r3, [pc, #48]	@ (8008464 <MX_USART3_UART_Init+0x58>)
 8008432:	220c      	movs	r2, #12
 8008434:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008436:	4b0b      	ldr	r3, [pc, #44]	@ (8008464 <MX_USART3_UART_Init+0x58>)
 8008438:	2200      	movs	r2, #0
 800843a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800843c:	4b09      	ldr	r3, [pc, #36]	@ (8008464 <MX_USART3_UART_Init+0x58>)
 800843e:	2200      	movs	r2, #0
 8008440:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008442:	4b08      	ldr	r3, [pc, #32]	@ (8008464 <MX_USART3_UART_Init+0x58>)
 8008444:	2200      	movs	r2, #0
 8008446:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008448:	4b06      	ldr	r3, [pc, #24]	@ (8008464 <MX_USART3_UART_Init+0x58>)
 800844a:	2200      	movs	r2, #0
 800844c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800844e:	4805      	ldr	r0, [pc, #20]	@ (8008464 <MX_USART3_UART_Init+0x58>)
 8008450:	f002 f9cc 	bl	800a7ec <HAL_UART_Init>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800845a:	f000 f869 	bl	8008530 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800845e:	bf00      	nop
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20000100 	.word	0x20000100
 8008468:	40004800 	.word	0x40004800

0800846c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008472:	f107 030c 	add.w	r3, r7, #12
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	605a      	str	r2, [r3, #4]
 800847c:	609a      	str	r2, [r3, #8]
 800847e:	60da      	str	r2, [r3, #12]
 8008480:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008482:	4b29      	ldr	r3, [pc, #164]	@ (8008528 <MX_GPIO_Init+0xbc>)
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	4a28      	ldr	r2, [pc, #160]	@ (8008528 <MX_GPIO_Init+0xbc>)
 8008488:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800848c:	6153      	str	r3, [r2, #20]
 800848e:	4b26      	ldr	r3, [pc, #152]	@ (8008528 <MX_GPIO_Init+0xbc>)
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008496:	60bb      	str	r3, [r7, #8]
 8008498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800849a:	4b23      	ldr	r3, [pc, #140]	@ (8008528 <MX_GPIO_Init+0xbc>)
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	4a22      	ldr	r2, [pc, #136]	@ (8008528 <MX_GPIO_Init+0xbc>)
 80084a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084a4:	6153      	str	r3, [r2, #20]
 80084a6:	4b20      	ldr	r3, [pc, #128]	@ (8008528 <MX_GPIO_Init+0xbc>)
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ae:	607b      	str	r3, [r7, #4]
 80084b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80084b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008528 <MX_GPIO_Init+0xbc>)
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008528 <MX_GPIO_Init+0xbc>)
 80084b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084bc:	6153      	str	r3, [r2, #20]
 80084be:	4b1a      	ldr	r3, [pc, #104]	@ (8008528 <MX_GPIO_Init+0xbc>)
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80084ca:	2200      	movs	r2, #0
 80084cc:	2120      	movs	r1, #32
 80084ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80084d2:	f000 fce3 	bl	8008e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80084d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80084da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80084dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80084e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084e2:	2300      	movs	r3, #0
 80084e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084e6:	f107 030c 	add.w	r3, r7, #12
 80084ea:	4619      	mov	r1, r3
 80084ec:	480f      	ldr	r0, [pc, #60]	@ (800852c <MX_GPIO_Init+0xc0>)
 80084ee:	f000 fb33 	bl	8008b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80084f2:	2320      	movs	r3, #32
 80084f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084f6:	2301      	movs	r3, #1
 80084f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084fe:	2300      	movs	r3, #0
 8008500:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008502:	f107 030c 	add.w	r3, r7, #12
 8008506:	4619      	mov	r1, r3
 8008508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800850c:	f000 fb24 	bl	8008b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008510:	2200      	movs	r2, #0
 8008512:	2100      	movs	r1, #0
 8008514:	2028      	movs	r0, #40	@ 0x28
 8008516:	f000 fae8 	bl	8008aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800851a:	2028      	movs	r0, #40	@ 0x28
 800851c:	f000 fb01 	bl	8008b22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8008520:	bf00      	nop
 8008522:	3720      	adds	r7, #32
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	40021000 	.word	0x40021000
 800852c:	48000800 	.word	0x48000800

08008530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008530:	b480      	push	{r7}
 8008532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008534:	b672      	cpsid	i
}
 8008536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008538:	bf00      	nop
 800853a:	e7fd      	b.n	8008538 <Error_Handler+0x8>

0800853c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008542:	4b0f      	ldr	r3, [pc, #60]	@ (8008580 <HAL_MspInit+0x44>)
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	4a0e      	ldr	r2, [pc, #56]	@ (8008580 <HAL_MspInit+0x44>)
 8008548:	f043 0301 	orr.w	r3, r3, #1
 800854c:	6193      	str	r3, [r2, #24]
 800854e:	4b0c      	ldr	r3, [pc, #48]	@ (8008580 <HAL_MspInit+0x44>)
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	607b      	str	r3, [r7, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800855a:	4b09      	ldr	r3, [pc, #36]	@ (8008580 <HAL_MspInit+0x44>)
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	4a08      	ldr	r2, [pc, #32]	@ (8008580 <HAL_MspInit+0x44>)
 8008560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008564:	61d3      	str	r3, [r2, #28]
 8008566:	4b06      	ldr	r3, [pc, #24]	@ (8008580 <HAL_MspInit+0x44>)
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	40021000 	.word	0x40021000

08008584 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08c      	sub	sp, #48	@ 0x30
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800858c:	f107 031c 	add.w	r3, r7, #28
 8008590:	2200      	movs	r2, #0
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	605a      	str	r2, [r3, #4]
 8008596:	609a      	str	r2, [r3, #8]
 8008598:	60da      	str	r2, [r3, #12]
 800859a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a3d      	ldr	r2, [pc, #244]	@ (8008698 <HAL_UART_MspInit+0x114>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d145      	bne.n	8008632 <HAL_UART_MspInit+0xae>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80085a6:	4b3d      	ldr	r3, [pc, #244]	@ (800869c <HAL_UART_MspInit+0x118>)
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	4a3c      	ldr	r2, [pc, #240]	@ (800869c <HAL_UART_MspInit+0x118>)
 80085ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085b0:	61d3      	str	r3, [r2, #28]
 80085b2:	4b3a      	ldr	r3, [pc, #232]	@ (800869c <HAL_UART_MspInit+0x118>)
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ba:	61bb      	str	r3, [r7, #24]
 80085bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085be:	4b37      	ldr	r3, [pc, #220]	@ (800869c <HAL_UART_MspInit+0x118>)
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	4a36      	ldr	r2, [pc, #216]	@ (800869c <HAL_UART_MspInit+0x118>)
 80085c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085c8:	6153      	str	r3, [r2, #20]
 80085ca:	4b34      	ldr	r3, [pc, #208]	@ (800869c <HAL_UART_MspInit+0x118>)
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085d6:	4b31      	ldr	r3, [pc, #196]	@ (800869c <HAL_UART_MspInit+0x118>)
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	4a30      	ldr	r2, [pc, #192]	@ (800869c <HAL_UART_MspInit+0x118>)
 80085dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085e0:	6153      	str	r3, [r2, #20]
 80085e2:	4b2e      	ldr	r3, [pc, #184]	@ (800869c <HAL_UART_MspInit+0x118>)
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80085ee:	2308      	movs	r3, #8
 80085f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085f2:	2302      	movs	r3, #2
 80085f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80085fa:	2303      	movs	r3, #3
 80085fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80085fe:	2307      	movs	r3, #7
 8008600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008602:	f107 031c 	add.w	r3, r7, #28
 8008606:	4619      	mov	r1, r3
 8008608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800860c:	f000 faa4 	bl	8008b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008610:	2308      	movs	r3, #8
 8008612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008614:	2302      	movs	r3, #2
 8008616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008618:	2300      	movs	r3, #0
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800861c:	2303      	movs	r3, #3
 800861e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008620:	2307      	movs	r3, #7
 8008622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008624:	f107 031c 	add.w	r3, r7, #28
 8008628:	4619      	mov	r1, r3
 800862a:	481d      	ldr	r0, [pc, #116]	@ (80086a0 <HAL_UART_MspInit+0x11c>)
 800862c:	f000 fa94 	bl	8008b58 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8008630:	e02d      	b.n	800868e <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART3)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a1b      	ldr	r2, [pc, #108]	@ (80086a4 <HAL_UART_MspInit+0x120>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d128      	bne.n	800868e <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800863c:	4b17      	ldr	r3, [pc, #92]	@ (800869c <HAL_UART_MspInit+0x118>)
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	4a16      	ldr	r2, [pc, #88]	@ (800869c <HAL_UART_MspInit+0x118>)
 8008642:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008646:	61d3      	str	r3, [r2, #28]
 8008648:	4b14      	ldr	r3, [pc, #80]	@ (800869c <HAL_UART_MspInit+0x118>)
 800864a:	69db      	ldr	r3, [r3, #28]
 800864c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008650:	60fb      	str	r3, [r7, #12]
 8008652:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008654:	4b11      	ldr	r3, [pc, #68]	@ (800869c <HAL_UART_MspInit+0x118>)
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	4a10      	ldr	r2, [pc, #64]	@ (800869c <HAL_UART_MspInit+0x118>)
 800865a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800865e:	6153      	str	r3, [r2, #20]
 8008660:	4b0e      	ldr	r3, [pc, #56]	@ (800869c <HAL_UART_MspInit+0x118>)
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008668:	60bb      	str	r3, [r7, #8]
 800866a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800866c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008672:	2302      	movs	r3, #2
 8008674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008676:	2300      	movs	r3, #0
 8008678:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800867a:	2303      	movs	r3, #3
 800867c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800867e:	2307      	movs	r3, #7
 8008680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008682:	f107 031c 	add.w	r3, r7, #28
 8008686:	4619      	mov	r1, r3
 8008688:	4805      	ldr	r0, [pc, #20]	@ (80086a0 <HAL_UART_MspInit+0x11c>)
 800868a:	f000 fa65 	bl	8008b58 <HAL_GPIO_Init>
}
 800868e:	bf00      	nop
 8008690:	3730      	adds	r7, #48	@ 0x30
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40004400 	.word	0x40004400
 800869c:	40021000 	.word	0x40021000
 80086a0:	48000400 	.word	0x48000400
 80086a4:	40004800 	.word	0x40004800

080086a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80086a8:	b480      	push	{r7}
 80086aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80086ac:	bf00      	nop
 80086ae:	e7fd      	b.n	80086ac <NMI_Handler+0x4>

080086b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086b0:	b480      	push	{r7}
 80086b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80086b4:	bf00      	nop
 80086b6:	e7fd      	b.n	80086b4 <HardFault_Handler+0x4>

080086b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086bc:	bf00      	nop
 80086be:	e7fd      	b.n	80086bc <MemManage_Handler+0x4>

080086c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086c4:	bf00      	nop
 80086c6:	e7fd      	b.n	80086c4 <BusFault_Handler+0x4>

080086c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086c8:	b480      	push	{r7}
 80086ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80086cc:	bf00      	nop
 80086ce:	e7fd      	b.n	80086cc <UsageFault_Handler+0x4>

080086d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80086d4:	bf00      	nop
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80086de:	b480      	push	{r7}
 80086e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80086e2:	bf00      	nop
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80086ec:	b480      	push	{r7}
 80086ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80086f0:	bf00      	nop
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80086fe:	f000 f8d5 	bl	80088ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008702:	bf00      	nop
 8008704:	bd80      	pop	{r7, pc}

08008706 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == GPIO_PIN_SET){
 800870a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800870e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008712:	f000 fbab 	bl	8008e6c <HAL_GPIO_ReadPin>
 8008716:	4603      	mov	r3, r0
 8008718:	2b01      	cmp	r3, #1
 800871a:	d104      	bne.n	8008726 <EXTI15_10_IRQHandler+0x20>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800871c:	2120      	movs	r1, #32
 800871e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008722:	f000 fbd3 	bl	8008ecc <HAL_GPIO_TogglePin>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8008726:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800872a:	f000 fbe9 	bl	8008f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800872e:	bf00      	nop
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800873c:	4a14      	ldr	r2, [pc, #80]	@ (8008790 <_sbrk+0x5c>)
 800873e:	4b15      	ldr	r3, [pc, #84]	@ (8008794 <_sbrk+0x60>)
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008748:	4b13      	ldr	r3, [pc, #76]	@ (8008798 <_sbrk+0x64>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d102      	bne.n	8008756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008750:	4b11      	ldr	r3, [pc, #68]	@ (8008798 <_sbrk+0x64>)
 8008752:	4a12      	ldr	r2, [pc, #72]	@ (800879c <_sbrk+0x68>)
 8008754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008756:	4b10      	ldr	r3, [pc, #64]	@ (8008798 <_sbrk+0x64>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4413      	add	r3, r2
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	429a      	cmp	r2, r3
 8008762:	d207      	bcs.n	8008774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008764:	f002 fd32 	bl	800b1cc <__errno>
 8008768:	4603      	mov	r3, r0
 800876a:	220c      	movs	r2, #12
 800876c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800876e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008772:	e009      	b.n	8008788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008774:	4b08      	ldr	r3, [pc, #32]	@ (8008798 <_sbrk+0x64>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800877a:	4b07      	ldr	r3, [pc, #28]	@ (8008798 <_sbrk+0x64>)
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4413      	add	r3, r2
 8008782:	4a05      	ldr	r2, [pc, #20]	@ (8008798 <_sbrk+0x64>)
 8008784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008786:	68fb      	ldr	r3, [r7, #12]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20010000 	.word	0x20010000
 8008794:	00000400 	.word	0x00000400
 8008798:	20000188 	.word	0x20000188
 800879c:	200002d8 	.word	0x200002d8

080087a0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80087a0:	b480      	push	{r7}
 80087a2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80087a4:	4b07      	ldr	r3, [pc, #28]	@ (80087c4 <SystemInit+0x24>)
 80087a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087aa:	4a06      	ldr	r2, [pc, #24]	@ (80087c4 <SystemInit+0x24>)
 80087ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80087b4:	4b03      	ldr	r3, [pc, #12]	@ (80087c4 <SystemInit+0x24>)
 80087b6:	4a04      	ldr	r2, [pc, #16]	@ (80087c8 <SystemInit+0x28>)
 80087b8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80087ba:	bf00      	nop
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	e000ed00 	.word	0xe000ed00
 80087c8:	08008000 	.word	0x08008000

080087cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80087cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008804 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80087d0:	f7ff ffe6 	bl	80087a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80087d4:	480c      	ldr	r0, [pc, #48]	@ (8008808 <LoopForever+0x6>)
  ldr r1, =_edata
 80087d6:	490d      	ldr	r1, [pc, #52]	@ (800880c <LoopForever+0xa>)
  ldr r2, =_sidata
 80087d8:	4a0d      	ldr	r2, [pc, #52]	@ (8008810 <LoopForever+0xe>)
  movs r3, #0
 80087da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80087dc:	e002      	b.n	80087e4 <LoopCopyDataInit>

080087de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80087de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80087e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80087e2:	3304      	adds	r3, #4

080087e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80087e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80087e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80087e8:	d3f9      	bcc.n	80087de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80087ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80087ec:	4c0a      	ldr	r4, [pc, #40]	@ (8008818 <LoopForever+0x16>)
  movs r3, #0
 80087ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80087f0:	e001      	b.n	80087f6 <LoopFillZerobss>

080087f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80087f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80087f4:	3204      	adds	r2, #4

080087f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80087f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80087f8:	d3fb      	bcc.n	80087f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80087fa:	f002 fced 	bl	800b1d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80087fe:	f7ff fd69 	bl	80082d4 <main>

08008802 <LoopForever>:

LoopForever:
    b LoopForever
 8008802:	e7fe      	b.n	8008802 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008804:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800880c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8008810:	0800bb6c 	.word	0x0800bb6c
  ldr r2, =_sbss
 8008814:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8008818:	200002d8 	.word	0x200002d8

0800881c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800881c:	e7fe      	b.n	800881c <ADC1_2_IRQHandler>
	...

08008820 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008824:	4b08      	ldr	r3, [pc, #32]	@ (8008848 <HAL_Init+0x28>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a07      	ldr	r2, [pc, #28]	@ (8008848 <HAL_Init+0x28>)
 800882a:	f043 0310 	orr.w	r3, r3, #16
 800882e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008830:	2003      	movs	r0, #3
 8008832:	f000 f94f 	bl	8008ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008836:	200f      	movs	r0, #15
 8008838:	f000 f808 	bl	800884c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800883c:	f7ff fe7e 	bl	800853c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	40022000 	.word	0x40022000

0800884c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008854:	4b12      	ldr	r3, [pc, #72]	@ (80088a0 <HAL_InitTick+0x54>)
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	4b12      	ldr	r3, [pc, #72]	@ (80088a4 <HAL_InitTick+0x58>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	4619      	mov	r1, r3
 800885e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008862:	fbb3 f3f1 	udiv	r3, r3, r1
 8008866:	fbb2 f3f3 	udiv	r3, r2, r3
 800886a:	4618      	mov	r0, r3
 800886c:	f000 f967 	bl	8008b3e <HAL_SYSTICK_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e00e      	b.n	8008898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b0f      	cmp	r3, #15
 800887e:	d80a      	bhi.n	8008896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008880:	2200      	movs	r2, #0
 8008882:	6879      	ldr	r1, [r7, #4]
 8008884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008888:	f000 f92f 	bl	8008aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800888c:	4a06      	ldr	r2, [pc, #24]	@ (80088a8 <HAL_InitTick+0x5c>)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	e000      	b.n	8008898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20000000 	.word	0x20000000
 80088a4:	20000008 	.word	0x20000008
 80088a8:	20000004 	.word	0x20000004

080088ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80088b0:	4b06      	ldr	r3, [pc, #24]	@ (80088cc <HAL_IncTick+0x20>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	461a      	mov	r2, r3
 80088b6:	4b06      	ldr	r3, [pc, #24]	@ (80088d0 <HAL_IncTick+0x24>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4413      	add	r3, r2
 80088bc:	4a04      	ldr	r2, [pc, #16]	@ (80088d0 <HAL_IncTick+0x24>)
 80088be:	6013      	str	r3, [r2, #0]
}
 80088c0:	bf00      	nop
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	20000008 	.word	0x20000008
 80088d0:	2000018c 	.word	0x2000018c

080088d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80088d8:	4b03      	ldr	r3, [pc, #12]	@ (80088e8 <HAL_GetTick+0x14>)
 80088da:	681b      	ldr	r3, [r3, #0]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	2000018c 	.word	0x2000018c

080088ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80088f4:	f7ff ffee 	bl	80088d4 <HAL_GetTick>
 80088f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008904:	d005      	beq.n	8008912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008906:	4b0a      	ldr	r3, [pc, #40]	@ (8008930 <HAL_Delay+0x44>)
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8008912:	bf00      	nop
 8008914:	f7ff ffde 	bl	80088d4 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	429a      	cmp	r2, r3
 8008922:	d8f7      	bhi.n	8008914 <HAL_Delay+0x28>
  {
  }
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	20000008 	.word	0x20000008

08008934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f003 0307 	and.w	r3, r3, #7
 8008942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008944:	4b0c      	ldr	r3, [pc, #48]	@ (8008978 <__NVIC_SetPriorityGrouping+0x44>)
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008950:	4013      	ands	r3, r2
 8008952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800895c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008966:	4a04      	ldr	r2, [pc, #16]	@ (8008978 <__NVIC_SetPriorityGrouping+0x44>)
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	60d3      	str	r3, [r2, #12]
}
 800896c:	bf00      	nop
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	e000ed00 	.word	0xe000ed00

0800897c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800897c:	b480      	push	{r7}
 800897e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008980:	4b04      	ldr	r3, [pc, #16]	@ (8008994 <__NVIC_GetPriorityGrouping+0x18>)
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	0a1b      	lsrs	r3, r3, #8
 8008986:	f003 0307 	and.w	r3, r3, #7
}
 800898a:	4618      	mov	r0, r3
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	e000ed00 	.word	0xe000ed00

08008998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	db0b      	blt.n	80089c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089aa:	79fb      	ldrb	r3, [r7, #7]
 80089ac:	f003 021f 	and.w	r2, r3, #31
 80089b0:	4907      	ldr	r1, [pc, #28]	@ (80089d0 <__NVIC_EnableIRQ+0x38>)
 80089b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089b6:	095b      	lsrs	r3, r3, #5
 80089b8:	2001      	movs	r0, #1
 80089ba:	fa00 f202 	lsl.w	r2, r0, r2
 80089be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	e000e100 	.word	0xe000e100

080089d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	6039      	str	r1, [r7, #0]
 80089de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	db0a      	blt.n	80089fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	490c      	ldr	r1, [pc, #48]	@ (8008a20 <__NVIC_SetPriority+0x4c>)
 80089ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089f2:	0112      	lsls	r2, r2, #4
 80089f4:	b2d2      	uxtb	r2, r2
 80089f6:	440b      	add	r3, r1
 80089f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80089fc:	e00a      	b.n	8008a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	4908      	ldr	r1, [pc, #32]	@ (8008a24 <__NVIC_SetPriority+0x50>)
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	f003 030f 	and.w	r3, r3, #15
 8008a0a:	3b04      	subs	r3, #4
 8008a0c:	0112      	lsls	r2, r2, #4
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	440b      	add	r3, r1
 8008a12:	761a      	strb	r2, [r3, #24]
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	e000e100 	.word	0xe000e100
 8008a24:	e000ed00 	.word	0xe000ed00

08008a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b089      	sub	sp, #36	@ 0x24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	f1c3 0307 	rsb	r3, r3, #7
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	bf28      	it	cs
 8008a46:	2304      	movcs	r3, #4
 8008a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	2b06      	cmp	r3, #6
 8008a50:	d902      	bls.n	8008a58 <NVIC_EncodePriority+0x30>
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	3b03      	subs	r3, #3
 8008a56:	e000      	b.n	8008a5a <NVIC_EncodePriority+0x32>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	43da      	mvns	r2, r3
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	401a      	ands	r2, r3
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	fa01 f303 	lsl.w	r3, r1, r3
 8008a7a:	43d9      	mvns	r1, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a80:	4313      	orrs	r3, r2
         );
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3724      	adds	r7, #36	@ 0x24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
	...

08008a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008aa0:	d301      	bcc.n	8008aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e00f      	b.n	8008ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8008ad0 <SysTick_Config+0x40>)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008aae:	210f      	movs	r1, #15
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ab4:	f7ff ff8e 	bl	80089d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ab8:	4b05      	ldr	r3, [pc, #20]	@ (8008ad0 <SysTick_Config+0x40>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008abe:	4b04      	ldr	r3, [pc, #16]	@ (8008ad0 <SysTick_Config+0x40>)
 8008ac0:	2207      	movs	r2, #7
 8008ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	e000e010 	.word	0xe000e010

08008ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7ff ff29 	bl	8008934 <__NVIC_SetPriorityGrouping>
}
 8008ae2:	bf00      	nop
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b086      	sub	sp, #24
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	4603      	mov	r3, r0
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	607a      	str	r2, [r7, #4]
 8008af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008afc:	f7ff ff3e 	bl	800897c <__NVIC_GetPriorityGrouping>
 8008b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	68b9      	ldr	r1, [r7, #8]
 8008b06:	6978      	ldr	r0, [r7, #20]
 8008b08:	f7ff ff8e 	bl	8008a28 <NVIC_EncodePriority>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b12:	4611      	mov	r1, r2
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff ff5d 	bl	80089d4 <__NVIC_SetPriority>
}
 8008b1a:	bf00      	nop
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	4603      	mov	r3, r0
 8008b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff ff31 	bl	8008998 <__NVIC_EnableIRQ>
}
 8008b36:	bf00      	nop
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}

08008b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff ffa2 	bl	8008a90 <SysTick_Config>
 8008b4c:	4603      	mov	r3, r0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3708      	adds	r7, #8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b62:	2300      	movs	r3, #0
 8008b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b66:	e160      	b.n	8008e2a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	fa01 f303 	lsl.w	r3, r1, r3
 8008b74:	4013      	ands	r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f000 8152 	beq.w	8008e24 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f003 0303 	and.w	r3, r3, #3
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d005      	beq.n	8008b98 <HAL_GPIO_Init+0x40>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f003 0303 	and.w	r3, r3, #3
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d130      	bne.n	8008bfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	005b      	lsls	r3, r3, #1
 8008ba2:	2203      	movs	r2, #3
 8008ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba8:	43db      	mvns	r3, r3
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	4013      	ands	r3, r2
 8008bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008bce:	2201      	movs	r2, #1
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd6:	43db      	mvns	r3, r3
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	091b      	lsrs	r3, r3, #4
 8008be4:	f003 0201 	and.w	r2, r3, #1
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	fa02 f303 	lsl.w	r3, r2, r3
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d017      	beq.n	8008c36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	2203      	movs	r2, #3
 8008c12:	fa02 f303 	lsl.w	r3, r2, r3
 8008c16:	43db      	mvns	r3, r3
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	689a      	ldr	r2, [r3, #8]
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d123      	bne.n	8008c8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	08da      	lsrs	r2, r3, #3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	3208      	adds	r2, #8
 8008c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	220f      	movs	r2, #15
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	43db      	mvns	r3, r3
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	4013      	ands	r3, r2
 8008c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	691a      	ldr	r2, [r3, #16]
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f003 0307 	and.w	r3, r3, #7
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	fa02 f303 	lsl.w	r3, r2, r3
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	08da      	lsrs	r2, r3, #3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3208      	adds	r2, #8
 8008c84:	6939      	ldr	r1, [r7, #16]
 8008c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	2203      	movs	r2, #3
 8008c96:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9a:	43db      	mvns	r3, r3
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f003 0203 	and.w	r2, r3, #3
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f000 80ac 	beq.w	8008e24 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ccc:	4b5e      	ldr	r3, [pc, #376]	@ (8008e48 <HAL_GPIO_Init+0x2f0>)
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	4a5d      	ldr	r2, [pc, #372]	@ (8008e48 <HAL_GPIO_Init+0x2f0>)
 8008cd2:	f043 0301 	orr.w	r3, r3, #1
 8008cd6:	6193      	str	r3, [r2, #24]
 8008cd8:	4b5b      	ldr	r3, [pc, #364]	@ (8008e48 <HAL_GPIO_Init+0x2f0>)
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	60bb      	str	r3, [r7, #8]
 8008ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008ce4:	4a59      	ldr	r2, [pc, #356]	@ (8008e4c <HAL_GPIO_Init+0x2f4>)
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	089b      	lsrs	r3, r3, #2
 8008cea:	3302      	adds	r3, #2
 8008cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f003 0303 	and.w	r3, r3, #3
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	220f      	movs	r2, #15
 8008cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008d00:	43db      	mvns	r3, r3
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	4013      	ands	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008d0e:	d025      	beq.n	8008d5c <HAL_GPIO_Init+0x204>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a4f      	ldr	r2, [pc, #316]	@ (8008e50 <HAL_GPIO_Init+0x2f8>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d01f      	beq.n	8008d58 <HAL_GPIO_Init+0x200>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a4e      	ldr	r2, [pc, #312]	@ (8008e54 <HAL_GPIO_Init+0x2fc>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d019      	beq.n	8008d54 <HAL_GPIO_Init+0x1fc>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a4d      	ldr	r2, [pc, #308]	@ (8008e58 <HAL_GPIO_Init+0x300>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d013      	beq.n	8008d50 <HAL_GPIO_Init+0x1f8>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a4c      	ldr	r2, [pc, #304]	@ (8008e5c <HAL_GPIO_Init+0x304>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d00d      	beq.n	8008d4c <HAL_GPIO_Init+0x1f4>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a4b      	ldr	r2, [pc, #300]	@ (8008e60 <HAL_GPIO_Init+0x308>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d007      	beq.n	8008d48 <HAL_GPIO_Init+0x1f0>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a4a      	ldr	r2, [pc, #296]	@ (8008e64 <HAL_GPIO_Init+0x30c>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d101      	bne.n	8008d44 <HAL_GPIO_Init+0x1ec>
 8008d40:	2306      	movs	r3, #6
 8008d42:	e00c      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d44:	2307      	movs	r3, #7
 8008d46:	e00a      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d48:	2305      	movs	r3, #5
 8008d4a:	e008      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d4c:	2304      	movs	r3, #4
 8008d4e:	e006      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d50:	2303      	movs	r3, #3
 8008d52:	e004      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e002      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e000      	b.n	8008d5e <HAL_GPIO_Init+0x206>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	f002 0203 	and.w	r2, r2, #3
 8008d64:	0092      	lsls	r2, r2, #2
 8008d66:	4093      	lsls	r3, r2
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008d6e:	4937      	ldr	r1, [pc, #220]	@ (8008e4c <HAL_GPIO_Init+0x2f4>)
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	089b      	lsrs	r3, r3, #2
 8008d74:	3302      	adds	r3, #2
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8008e68 <HAL_GPIO_Init+0x310>)
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	43db      	mvns	r3, r3
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008da0:	4a31      	ldr	r2, [pc, #196]	@ (8008e68 <HAL_GPIO_Init+0x310>)
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008da6:	4b30      	ldr	r3, [pc, #192]	@ (8008e68 <HAL_GPIO_Init+0x310>)
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	43db      	mvns	r3, r3
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	4013      	ands	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008dca:	4a27      	ldr	r2, [pc, #156]	@ (8008e68 <HAL_GPIO_Init+0x310>)
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008dd0:	4b25      	ldr	r3, [pc, #148]	@ (8008e68 <HAL_GPIO_Init+0x310>)
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	43db      	mvns	r3, r3
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	4013      	ands	r3, r2
 8008dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008df4:	4a1c      	ldr	r2, [pc, #112]	@ (8008e68 <HAL_GPIO_Init+0x310>)
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8008e68 <HAL_GPIO_Init+0x310>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	43db      	mvns	r3, r3
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	4013      	ands	r3, r2
 8008e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d003      	beq.n	8008e1e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008e1e:	4a12      	ldr	r2, [pc, #72]	@ (8008e68 <HAL_GPIO_Init+0x310>)
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	3301      	adds	r3, #1
 8008e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	fa22 f303 	lsr.w	r3, r2, r3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f47f ae97 	bne.w	8008b68 <HAL_GPIO_Init+0x10>
  }
}
 8008e3a:	bf00      	nop
 8008e3c:	bf00      	nop
 8008e3e:	371c      	adds	r7, #28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	40021000 	.word	0x40021000
 8008e4c:	40010000 	.word	0x40010000
 8008e50:	48000400 	.word	0x48000400
 8008e54:	48000800 	.word	0x48000800
 8008e58:	48000c00 	.word	0x48000c00
 8008e5c:	48001000 	.word	0x48001000
 8008e60:	48001400 	.word	0x48001400
 8008e64:	48001800 	.word	0x48001800
 8008e68:	40010400 	.word	0x40010400

08008e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691a      	ldr	r2, [r3, #16]
 8008e7c:	887b      	ldrh	r3, [r7, #2]
 8008e7e:	4013      	ands	r3, r2
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e84:	2301      	movs	r3, #1
 8008e86:	73fb      	strb	r3, [r7, #15]
 8008e88:	e001      	b.n	8008e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	807b      	strh	r3, [r7, #2]
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008eac:	787b      	ldrb	r3, [r7, #1]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008eb2:	887a      	ldrh	r2, [r7, #2]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008eb8:	e002      	b.n	8008ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008eba:	887a      	ldrh	r2, [r7, #2]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008ec0:	bf00      	nop
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008ede:	887a      	ldrh	r2, [r7, #2]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	041a      	lsls	r2, r3, #16
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	43d9      	mvns	r1, r3
 8008eea:	887b      	ldrh	r3, [r7, #2]
 8008eec:	400b      	ands	r3, r1
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	619a      	str	r2, [r3, #24]
}
 8008ef4:	bf00      	nop
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	4603      	mov	r3, r0
 8008f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008f0a:	4b08      	ldr	r3, [pc, #32]	@ (8008f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f0c:	695a      	ldr	r2, [r3, #20]
 8008f0e:	88fb      	ldrh	r3, [r7, #6]
 8008f10:	4013      	ands	r3, r2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d006      	beq.n	8008f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f16:	4a05      	ldr	r2, [pc, #20]	@ (8008f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f18:	88fb      	ldrh	r3, [r7, #6]
 8008f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f1c:	88fb      	ldrh	r3, [r7, #6]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 f806 	bl	8008f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8008f24:	bf00      	nop
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	40010400 	.word	0x40010400

08008f30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
	...

08008f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008f54:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008f58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008f5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d102      	bne.n	8008f6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	f001 b80a 	b.w	8009f82 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008f72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 8161 	beq.w	8009246 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008f84:	4bae      	ldr	r3, [pc, #696]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f003 030c 	and.w	r3, r3, #12
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	d00c      	beq.n	8008faa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008f90:	4bab      	ldr	r3, [pc, #684]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f003 030c 	and.w	r3, r3, #12
 8008f98:	2b08      	cmp	r3, #8
 8008f9a:	d157      	bne.n	800904c <HAL_RCC_OscConfig+0x104>
 8008f9c:	4ba8      	ldr	r3, [pc, #672]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8008fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fa8:	d150      	bne.n	800904c <HAL_RCC_OscConfig+0x104>
 8008faa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008fae:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8008fb6:	fa93 f3a3 	rbit	r3, r3
 8008fba:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008fbe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fc2:	fab3 f383 	clz	r3, r3
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b3f      	cmp	r3, #63	@ 0x3f
 8008fca:	d802      	bhi.n	8008fd2 <HAL_RCC_OscConfig+0x8a>
 8008fcc:	4b9c      	ldr	r3, [pc, #624]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	e015      	b.n	8008ffe <HAL_RCC_OscConfig+0xb6>
 8008fd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008fd6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8008fde:	fa93 f3a3 	rbit	r3, r3
 8008fe2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8008fe6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008fea:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8008fee:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8008ff2:	fa93 f3a3 	rbit	r3, r3
 8008ff6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8008ffa:	4b91      	ldr	r3, [pc, #580]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009002:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8009006:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800900a:	fa92 f2a2 	rbit	r2, r2
 800900e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8009012:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8009016:	fab2 f282 	clz	r2, r2
 800901a:	b2d2      	uxtb	r2, r2
 800901c:	f042 0220 	orr.w	r2, r2, #32
 8009020:	b2d2      	uxtb	r2, r2
 8009022:	f002 021f 	and.w	r2, r2, #31
 8009026:	2101      	movs	r1, #1
 8009028:	fa01 f202 	lsl.w	r2, r1, r2
 800902c:	4013      	ands	r3, r2
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 8108 	beq.w	8009244 <HAL_RCC_OscConfig+0x2fc>
 8009034:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009038:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	f040 80ff 	bne.w	8009244 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	f000 bf9b 	b.w	8009f82 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800904c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009050:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800905c:	d106      	bne.n	800906c <HAL_RCC_OscConfig+0x124>
 800905e:	4b78      	ldr	r3, [pc, #480]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a77      	ldr	r2, [pc, #476]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 8009064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	e036      	b.n	80090da <HAL_RCC_OscConfig+0x192>
 800906c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009070:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10c      	bne.n	8009096 <HAL_RCC_OscConfig+0x14e>
 800907c:	4b70      	ldr	r3, [pc, #448]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a6f      	ldr	r2, [pc, #444]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 8009082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	4b6d      	ldr	r3, [pc, #436]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a6c      	ldr	r2, [pc, #432]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 800908e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	e021      	b.n	80090da <HAL_RCC_OscConfig+0x192>
 8009096:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800909a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090a6:	d10c      	bne.n	80090c2 <HAL_RCC_OscConfig+0x17a>
 80090a8:	4b65      	ldr	r3, [pc, #404]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a64      	ldr	r2, [pc, #400]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 80090ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090b2:	6013      	str	r3, [r2, #0]
 80090b4:	4b62      	ldr	r3, [pc, #392]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a61      	ldr	r2, [pc, #388]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 80090ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	e00b      	b.n	80090da <HAL_RCC_OscConfig+0x192>
 80090c2:	4b5f      	ldr	r3, [pc, #380]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a5e      	ldr	r2, [pc, #376]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 80090c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	4b5c      	ldr	r3, [pc, #368]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a5b      	ldr	r2, [pc, #364]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 80090d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090d8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80090de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d054      	beq.n	8009194 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090ea:	f7ff fbf3 	bl	80088d4 <HAL_GetTick>
 80090ee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090f2:	e00a      	b.n	800910a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090f4:	f7ff fbee 	bl	80088d4 <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	2b64      	cmp	r3, #100	@ 0x64
 8009102:	d902      	bls.n	800910a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	f000 bf3c 	b.w	8009f82 <HAL_RCC_OscConfig+0x103a>
 800910a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800910e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009112:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8009116:	fa93 f3a3 	rbit	r3, r3
 800911a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800911e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009122:	fab3 f383 	clz	r3, r3
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b3f      	cmp	r3, #63	@ 0x3f
 800912a:	d802      	bhi.n	8009132 <HAL_RCC_OscConfig+0x1ea>
 800912c:	4b44      	ldr	r3, [pc, #272]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	e015      	b.n	800915e <HAL_RCC_OscConfig+0x216>
 8009132:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009136:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800913a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800913e:	fa93 f3a3 	rbit	r3, r3
 8009142:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8009146:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800914a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800914e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8009152:	fa93 f3a3 	rbit	r3, r3
 8009156:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800915a:	4b39      	ldr	r3, [pc, #228]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 800915c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800915e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009162:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8009166:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800916a:	fa92 f2a2 	rbit	r2, r2
 800916e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8009172:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8009176:	fab2 f282 	clz	r2, r2
 800917a:	b2d2      	uxtb	r2, r2
 800917c:	f042 0220 	orr.w	r2, r2, #32
 8009180:	b2d2      	uxtb	r2, r2
 8009182:	f002 021f 	and.w	r2, r2, #31
 8009186:	2101      	movs	r1, #1
 8009188:	fa01 f202 	lsl.w	r2, r1, r2
 800918c:	4013      	ands	r3, r2
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0b0      	beq.n	80090f4 <HAL_RCC_OscConfig+0x1ac>
 8009192:	e058      	b.n	8009246 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009194:	f7ff fb9e 	bl	80088d4 <HAL_GetTick>
 8009198:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800919c:	e00a      	b.n	80091b4 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800919e:	f7ff fb99 	bl	80088d4 <HAL_GetTick>
 80091a2:	4602      	mov	r2, r0
 80091a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b64      	cmp	r3, #100	@ 0x64
 80091ac:	d902      	bls.n	80091b4 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	f000 bee7 	b.w	8009f82 <HAL_RCC_OscConfig+0x103a>
 80091b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80091b8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80091c0:	fa93 f3a3 	rbit	r3, r3
 80091c4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80091c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091cc:	fab3 f383 	clz	r3, r3
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80091d4:	d802      	bhi.n	80091dc <HAL_RCC_OscConfig+0x294>
 80091d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	e015      	b.n	8009208 <HAL_RCC_OscConfig+0x2c0>
 80091dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80091e0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80091e8:	fa93 f3a3 	rbit	r3, r3
 80091ec:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80091f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80091f4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80091f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80091fc:	fa93 f3a3 	rbit	r3, r3
 8009200:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8009204:	4b0e      	ldr	r3, [pc, #56]	@ (8009240 <HAL_RCC_OscConfig+0x2f8>)
 8009206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009208:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800920c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8009210:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8009214:	fa92 f2a2 	rbit	r2, r2
 8009218:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800921c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8009220:	fab2 f282 	clz	r2, r2
 8009224:	b2d2      	uxtb	r2, r2
 8009226:	f042 0220 	orr.w	r2, r2, #32
 800922a:	b2d2      	uxtb	r2, r2
 800922c:	f002 021f 	and.w	r2, r2, #31
 8009230:	2101      	movs	r1, #1
 8009232:	fa01 f202 	lsl.w	r2, r1, r2
 8009236:	4013      	ands	r3, r2
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1b0      	bne.n	800919e <HAL_RCC_OscConfig+0x256>
 800923c:	e003      	b.n	8009246 <HAL_RCC_OscConfig+0x2fe>
 800923e:	bf00      	nop
 8009240:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800924a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 816d 	beq.w	8009536 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800925c:	4bcd      	ldr	r3, [pc, #820]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f003 030c 	and.w	r3, r3, #12
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00c      	beq.n	8009282 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009268:	4bca      	ldr	r3, [pc, #808]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	f003 030c 	and.w	r3, r3, #12
 8009270:	2b08      	cmp	r3, #8
 8009272:	d16e      	bne.n	8009352 <HAL_RCC_OscConfig+0x40a>
 8009274:	4bc7      	ldr	r3, [pc, #796]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800927c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009280:	d167      	bne.n	8009352 <HAL_RCC_OscConfig+0x40a>
 8009282:	2302      	movs	r3, #2
 8009284:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009288:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800928c:	fa93 f3a3 	rbit	r3, r3
 8009290:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8009294:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009298:	fab3 f383 	clz	r3, r3
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b3f      	cmp	r3, #63	@ 0x3f
 80092a0:	d802      	bhi.n	80092a8 <HAL_RCC_OscConfig+0x360>
 80092a2:	4bbc      	ldr	r3, [pc, #752]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	e013      	b.n	80092d0 <HAL_RCC_OscConfig+0x388>
 80092a8:	2302      	movs	r3, #2
 80092aa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80092b2:	fa93 f3a3 	rbit	r3, r3
 80092b6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80092ba:	2302      	movs	r3, #2
 80092bc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80092c0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80092c4:	fa93 f3a3 	rbit	r3, r3
 80092c8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80092cc:	4bb1      	ldr	r3, [pc, #708]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 80092ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d0:	2202      	movs	r2, #2
 80092d2:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80092d6:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80092da:	fa92 f2a2 	rbit	r2, r2
 80092de:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80092e2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80092e6:	fab2 f282 	clz	r2, r2
 80092ea:	b2d2      	uxtb	r2, r2
 80092ec:	f042 0220 	orr.w	r2, r2, #32
 80092f0:	b2d2      	uxtb	r2, r2
 80092f2:	f002 021f 	and.w	r2, r2, #31
 80092f6:	2101      	movs	r1, #1
 80092f8:	fa01 f202 	lsl.w	r2, r1, r2
 80092fc:	4013      	ands	r3, r2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <HAL_RCC_OscConfig+0x3d0>
 8009302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009306:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d002      	beq.n	8009318 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	f000 be35 	b.w	8009f82 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009318:	4b9e      	ldr	r3, [pc, #632]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009324:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	21f8      	movs	r1, #248	@ 0xf8
 800932e:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009332:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8009336:	fa91 f1a1 	rbit	r1, r1
 800933a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800933e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8009342:	fab1 f181 	clz	r1, r1
 8009346:	b2c9      	uxtb	r1, r1
 8009348:	408b      	lsls	r3, r1
 800934a:	4992      	ldr	r1, [pc, #584]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 800934c:	4313      	orrs	r3, r2
 800934e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009350:	e0f1      	b.n	8009536 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009352:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009356:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 8083 	beq.w	800946a <HAL_RCC_OscConfig+0x522>
 8009364:	2301      	movs	r3, #1
 8009366:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800936a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800936e:	fa93 f3a3 	rbit	r3, r3
 8009372:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8009376:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800937a:	fab3 f383 	clz	r3, r3
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8009384:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	461a      	mov	r2, r3
 800938c:	2301      	movs	r3, #1
 800938e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009390:	f7ff faa0 	bl	80088d4 <HAL_GetTick>
 8009394:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009398:	e00a      	b.n	80093b0 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800939a:	f7ff fa9b 	bl	80088d4 <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d902      	bls.n	80093b0 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	f000 bde9 	b.w	8009f82 <HAL_RCC_OscConfig+0x103a>
 80093b0:	2302      	movs	r3, #2
 80093b2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80093ba:	fa93 f3a3 	rbit	r3, r3
 80093be:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80093c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093c6:	fab3 f383 	clz	r3, r3
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80093ce:	d802      	bhi.n	80093d6 <HAL_RCC_OscConfig+0x48e>
 80093d0:	4b70      	ldr	r3, [pc, #448]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	e013      	b.n	80093fe <HAL_RCC_OscConfig+0x4b6>
 80093d6:	2302      	movs	r3, #2
 80093d8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093dc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80093e0:	fa93 f3a3 	rbit	r3, r3
 80093e4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80093e8:	2302      	movs	r3, #2
 80093ea:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80093ee:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80093f2:	fa93 f3a3 	rbit	r3, r3
 80093f6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80093fa:	4b66      	ldr	r3, [pc, #408]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 80093fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fe:	2202      	movs	r2, #2
 8009400:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8009404:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009408:	fa92 f2a2 	rbit	r2, r2
 800940c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8009410:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8009414:	fab2 f282 	clz	r2, r2
 8009418:	b2d2      	uxtb	r2, r2
 800941a:	f042 0220 	orr.w	r2, r2, #32
 800941e:	b2d2      	uxtb	r2, r2
 8009420:	f002 021f 	and.w	r2, r2, #31
 8009424:	2101      	movs	r1, #1
 8009426:	fa01 f202 	lsl.w	r2, r1, r2
 800942a:	4013      	ands	r3, r2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0b4      	beq.n	800939a <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009430:	4b58      	ldr	r3, [pc, #352]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009438:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800943c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	21f8      	movs	r1, #248	@ 0xf8
 8009446:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800944a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800944e:	fa91 f1a1 	rbit	r1, r1
 8009452:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8009456:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800945a:	fab1 f181 	clz	r1, r1
 800945e:	b2c9      	uxtb	r1, r1
 8009460:	408b      	lsls	r3, r1
 8009462:	494c      	ldr	r1, [pc, #304]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 8009464:	4313      	orrs	r3, r2
 8009466:	600b      	str	r3, [r1, #0]
 8009468:	e065      	b.n	8009536 <HAL_RCC_OscConfig+0x5ee>
 800946a:	2301      	movs	r3, #1
 800946c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009470:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8009474:	fa93 f3a3 	rbit	r3, r3
 8009478:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800947c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009480:	fab3 f383 	clz	r3, r3
 8009484:	b2db      	uxtb	r3, r3
 8009486:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800948a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	461a      	mov	r2, r3
 8009492:	2300      	movs	r3, #0
 8009494:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009496:	f7ff fa1d 	bl	80088d4 <HAL_GetTick>
 800949a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800949e:	e00a      	b.n	80094b6 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094a0:	f7ff fa18 	bl	80088d4 <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d902      	bls.n	80094b6 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	f000 bd66 	b.w	8009f82 <HAL_RCC_OscConfig+0x103a>
 80094b6:	2302      	movs	r3, #2
 80094b8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094c0:	fa93 f3a3 	rbit	r3, r3
 80094c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80094c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094cc:	fab3 f383 	clz	r3, r3
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80094d4:	d802      	bhi.n	80094dc <HAL_RCC_OscConfig+0x594>
 80094d6:	4b2f      	ldr	r3, [pc, #188]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	e013      	b.n	8009504 <HAL_RCC_OscConfig+0x5bc>
 80094dc:	2302      	movs	r3, #2
 80094de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80094e6:	fa93 f3a3 	rbit	r3, r3
 80094ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80094ee:	2302      	movs	r3, #2
 80094f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80094f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80094f8:	fa93 f3a3 	rbit	r3, r3
 80094fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8009500:	4b24      	ldr	r3, [pc, #144]	@ (8009594 <HAL_RCC_OscConfig+0x64c>)
 8009502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009504:	2202      	movs	r2, #2
 8009506:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800950a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800950e:	fa92 f2a2 	rbit	r2, r2
 8009512:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8009516:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800951a:	fab2 f282 	clz	r2, r2
 800951e:	b2d2      	uxtb	r2, r2
 8009520:	f042 0220 	orr.w	r2, r2, #32
 8009524:	b2d2      	uxtb	r2, r2
 8009526:	f002 021f 	and.w	r2, r2, #31
 800952a:	2101      	movs	r1, #1
 800952c:	fa01 f202 	lsl.w	r2, r1, r2
 8009530:	4013      	ands	r3, r2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1b4      	bne.n	80094a0 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800953a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0308 	and.w	r3, r3, #8
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 8119 	beq.w	800977e <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800954c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009550:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 8082 	beq.w	8009662 <HAL_RCC_OscConfig+0x71a>
 800955e:	2301      	movs	r3, #1
 8009560:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009568:	fa93 f3a3 	rbit	r3, r3
 800956c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8009570:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009574:	fab3 f383 	clz	r3, r3
 8009578:	b2db      	uxtb	r3, r3
 800957a:	461a      	mov	r2, r3
 800957c:	4b06      	ldr	r3, [pc, #24]	@ (8009598 <HAL_RCC_OscConfig+0x650>)
 800957e:	4413      	add	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	461a      	mov	r2, r3
 8009584:	2301      	movs	r3, #1
 8009586:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009588:	f7ff f9a4 	bl	80088d4 <HAL_GetTick>
 800958c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009590:	e00f      	b.n	80095b2 <HAL_RCC_OscConfig+0x66a>
 8009592:	bf00      	nop
 8009594:	40021000 	.word	0x40021000
 8009598:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800959c:	f7ff f99a 	bl	80088d4 <HAL_GetTick>
 80095a0:	4602      	mov	r2, r0
 80095a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d902      	bls.n	80095b2 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	f000 bce8 	b.w	8009f82 <HAL_RCC_OscConfig+0x103a>
 80095b2:	2302      	movs	r3, #2
 80095b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095bc:	fa93 f2a3 	rbit	r2, r3
 80095c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80095c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80095ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095d2:	2202      	movs	r2, #2
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80095da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	fa93 f2a3 	rbit	r2, r3
 80095e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80095e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80095f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095f6:	2202      	movs	r2, #2
 80095f8:	601a      	str	r2, [r3, #0]
 80095fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80095fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	fa93 f2a3 	rbit	r2, r3
 8009608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800960c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009610:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009612:	4bb0      	ldr	r3, [pc, #704]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 8009614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800961a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800961e:	2102      	movs	r1, #2
 8009620:	6019      	str	r1, [r3, #0]
 8009622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009626:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	fa93 f1a3 	rbit	r1, r3
 8009630:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009634:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8009638:	6019      	str	r1, [r3, #0]
  return result;
 800963a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800963e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	fab3 f383 	clz	r3, r3
 8009648:	b2db      	uxtb	r3, r3
 800964a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800964e:	b2db      	uxtb	r3, r3
 8009650:	f003 031f 	and.w	r3, r3, #31
 8009654:	2101      	movs	r1, #1
 8009656:	fa01 f303 	lsl.w	r3, r1, r3
 800965a:	4013      	ands	r3, r2
 800965c:	2b00      	cmp	r3, #0
 800965e:	d09d      	beq.n	800959c <HAL_RCC_OscConfig+0x654>
 8009660:	e08d      	b.n	800977e <HAL_RCC_OscConfig+0x836>
 8009662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009666:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800966a:	2201      	movs	r2, #1
 800966c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800966e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009672:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	fa93 f2a3 	rbit	r2, r3
 800967c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009680:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009684:	601a      	str	r2, [r3, #0]
  return result;
 8009686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800968a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800968e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009690:	fab3 f383 	clz	r3, r3
 8009694:	b2db      	uxtb	r3, r3
 8009696:	461a      	mov	r2, r3
 8009698:	4b8f      	ldr	r3, [pc, #572]	@ (80098d8 <HAL_RCC_OscConfig+0x990>)
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	461a      	mov	r2, r3
 80096a0:	2300      	movs	r3, #0
 80096a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096a4:	f7ff f916 	bl	80088d4 <HAL_GetTick>
 80096a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096ac:	e00a      	b.n	80096c4 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096ae:	f7ff f911 	bl	80088d4 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d902      	bls.n	80096c4 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	f000 bc5f 	b.w	8009f82 <HAL_RCC_OscConfig+0x103a>
 80096c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80096cc:	2202      	movs	r2, #2
 80096ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	fa93 f2a3 	rbit	r2, r3
 80096de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80096f0:	2202      	movs	r2, #2
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	fa93 f2a3 	rbit	r2, r3
 8009702:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009706:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009710:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009714:	2202      	movs	r2, #2
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800971c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	fa93 f2a3 	rbit	r2, r3
 8009726:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800972a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800972e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009730:	4b68      	ldr	r3, [pc, #416]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 8009732:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009734:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009738:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800973c:	2102      	movs	r1, #2
 800973e:	6019      	str	r1, [r3, #0]
 8009740:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009744:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	fa93 f1a3 	rbit	r1, r3
 800974e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009752:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8009756:	6019      	str	r1, [r3, #0]
  return result;
 8009758:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800975c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	fab3 f383 	clz	r3, r3
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800976c:	b2db      	uxtb	r3, r3
 800976e:	f003 031f 	and.w	r3, r3, #31
 8009772:	2101      	movs	r1, #1
 8009774:	fa01 f303 	lsl.w	r3, r1, r3
 8009778:	4013      	ands	r3, r2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d197      	bne.n	80096ae <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800977e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009782:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0304 	and.w	r3, r3, #4
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 819c 	beq.w	8009acc <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009794:	2300      	movs	r3, #0
 8009796:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800979a:	4b4e      	ldr	r3, [pc, #312]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 800979c:	69db      	ldr	r3, [r3, #28]
 800979e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d116      	bne.n	80097d4 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097a6:	4b4b      	ldr	r3, [pc, #300]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 80097a8:	69db      	ldr	r3, [r3, #28]
 80097aa:	4a4a      	ldr	r2, [pc, #296]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 80097ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097b0:	61d3      	str	r3, [r2, #28]
 80097b2:	4b48      	ldr	r3, [pc, #288]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80097ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80097be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80097c2:	601a      	str	r2, [r3, #0]
 80097c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80097c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80097cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80097ce:	2301      	movs	r3, #1
 80097d0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097d4:	4b41      	ldr	r3, [pc, #260]	@ (80098dc <HAL_RCC_OscConfig+0x994>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d11a      	bne.n	8009816 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80097e0:	4b3e      	ldr	r3, [pc, #248]	@ (80098dc <HAL_RCC_OscConfig+0x994>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a3d      	ldr	r2, [pc, #244]	@ (80098dc <HAL_RCC_OscConfig+0x994>)
 80097e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097ec:	f7ff f872 	bl	80088d4 <HAL_GetTick>
 80097f0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097f4:	e009      	b.n	800980a <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097f6:	f7ff f86d 	bl	80088d4 <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	2b64      	cmp	r3, #100	@ 0x64
 8009804:	d901      	bls.n	800980a <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8009806:	2303      	movs	r3, #3
 8009808:	e3bb      	b.n	8009f82 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800980a:	4b34      	ldr	r3, [pc, #208]	@ (80098dc <HAL_RCC_OscConfig+0x994>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009812:	2b00      	cmp	r3, #0
 8009814:	d0ef      	beq.n	80097f6 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009816:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800981a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d106      	bne.n	8009834 <HAL_RCC_OscConfig+0x8ec>
 8009826:	4b2b      	ldr	r3, [pc, #172]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	4a2a      	ldr	r2, [pc, #168]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 800982c:	f043 0301 	orr.w	r3, r3, #1
 8009830:	6213      	str	r3, [r2, #32]
 8009832:	e035      	b.n	80098a0 <HAL_RCC_OscConfig+0x958>
 8009834:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009838:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d10c      	bne.n	800985e <HAL_RCC_OscConfig+0x916>
 8009844:	4b23      	ldr	r3, [pc, #140]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 8009846:	6a1b      	ldr	r3, [r3, #32]
 8009848:	4a22      	ldr	r2, [pc, #136]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 800984a:	f023 0301 	bic.w	r3, r3, #1
 800984e:	6213      	str	r3, [r2, #32]
 8009850:	4b20      	ldr	r3, [pc, #128]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 8009852:	6a1b      	ldr	r3, [r3, #32]
 8009854:	4a1f      	ldr	r2, [pc, #124]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 8009856:	f023 0304 	bic.w	r3, r3, #4
 800985a:	6213      	str	r3, [r2, #32]
 800985c:	e020      	b.n	80098a0 <HAL_RCC_OscConfig+0x958>
 800985e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009862:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	2b05      	cmp	r3, #5
 800986c:	d10c      	bne.n	8009888 <HAL_RCC_OscConfig+0x940>
 800986e:	4b19      	ldr	r3, [pc, #100]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	4a18      	ldr	r2, [pc, #96]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 8009874:	f043 0304 	orr.w	r3, r3, #4
 8009878:	6213      	str	r3, [r2, #32]
 800987a:	4b16      	ldr	r3, [pc, #88]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	4a15      	ldr	r2, [pc, #84]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 8009880:	f043 0301 	orr.w	r3, r3, #1
 8009884:	6213      	str	r3, [r2, #32]
 8009886:	e00b      	b.n	80098a0 <HAL_RCC_OscConfig+0x958>
 8009888:	4b12      	ldr	r3, [pc, #72]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	4a11      	ldr	r2, [pc, #68]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 800988e:	f023 0301 	bic.w	r3, r3, #1
 8009892:	6213      	str	r3, [r2, #32]
 8009894:	4b0f      	ldr	r3, [pc, #60]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 8009896:	6a1b      	ldr	r3, [r3, #32]
 8009898:	4a0e      	ldr	r2, [pc, #56]	@ (80098d4 <HAL_RCC_OscConfig+0x98c>)
 800989a:	f023 0304 	bic.w	r3, r3, #4
 800989e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80098a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80098a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 8085 	beq.w	80099bc <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098b2:	f7ff f80f 	bl	80088d4 <HAL_GetTick>
 80098b6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098ba:	e011      	b.n	80098e0 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098bc:	f7ff f80a 	bl	80088d4 <HAL_GetTick>
 80098c0:	4602      	mov	r2, r0
 80098c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d907      	bls.n	80098e0 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e356      	b.n	8009f82 <HAL_RCC_OscConfig+0x103a>
 80098d4:	40021000 	.word	0x40021000
 80098d8:	10908120 	.word	0x10908120
 80098dc:	40007000 	.word	0x40007000
 80098e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80098e4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80098e8:	2202      	movs	r2, #2
 80098ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80098f0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	fa93 f2a3 	rbit	r2, r3
 80098fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80098fe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009908:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800990c:	2202      	movs	r2, #2
 800990e:	601a      	str	r2, [r3, #0]
 8009910:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009914:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	fa93 f2a3 	rbit	r2, r3
 800991e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009922:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8009926:	601a      	str	r2, [r3, #0]
  return result;
 8009928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800992c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8009930:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009932:	fab3 f383 	clz	r3, r3
 8009936:	b2db      	uxtb	r3, r3
 8009938:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <HAL_RCC_OscConfig+0xa00>
 8009942:	4b98      	ldr	r3, [pc, #608]	@ (8009ba4 <HAL_RCC_OscConfig+0xc5c>)
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	e013      	b.n	8009970 <HAL_RCC_OscConfig+0xa28>
 8009948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800994c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8009950:	2202      	movs	r2, #2
 8009952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009954:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009958:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	fa93 f2a3 	rbit	r2, r3
 8009962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009966:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800996a:	601a      	str	r2, [r3, #0]
 800996c:	4b8d      	ldr	r3, [pc, #564]	@ (8009ba4 <HAL_RCC_OscConfig+0xc5c>)
 800996e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009970:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009974:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8009978:	2102      	movs	r1, #2
 800997a:	6011      	str	r1, [r2, #0]
 800997c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009980:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8009984:	6812      	ldr	r2, [r2, #0]
 8009986:	fa92 f1a2 	rbit	r1, r2
 800998a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800998e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8009992:	6011      	str	r1, [r2, #0]
  return result;
 8009994:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009998:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800999c:	6812      	ldr	r2, [r2, #0]
 800999e:	fab2 f282 	clz	r2, r2
 80099a2:	b2d2      	uxtb	r2, r2
 80099a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099a8:	b2d2      	uxtb	r2, r2
 80099aa:	f002 021f 	and.w	r2, r2, #31
 80099ae:	2101      	movs	r1, #1
 80099b0:	fa01 f202 	lsl.w	r2, r1, r2
 80099b4:	4013      	ands	r3, r2
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d080      	beq.n	80098bc <HAL_RCC_OscConfig+0x974>
 80099ba:	e07d      	b.n	8009ab8 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099bc:	f7fe ff8a 	bl	80088d4 <HAL_GetTick>
 80099c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099c4:	e00b      	b.n	80099de <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099c6:	f7fe ff85 	bl	80088d4 <HAL_GetTick>
 80099ca:	4602      	mov	r2, r0
 80099cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d901      	bls.n	80099de <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	e2d1      	b.n	8009f82 <HAL_RCC_OscConfig+0x103a>
 80099de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80099e2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80099e6:	2202      	movs	r2, #2
 80099e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80099ee:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	fa93 f2a3 	rbit	r2, r3
 80099f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80099fc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8009a00:	601a      	str	r2, [r3, #0]
 8009a02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a06:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a12:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	fa93 f2a3 	rbit	r2, r3
 8009a1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a20:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8009a24:	601a      	str	r2, [r3, #0]
  return result;
 8009a26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a2a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8009a2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a30:	fab3 f383 	clz	r3, r3
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d102      	bne.n	8009a46 <HAL_RCC_OscConfig+0xafe>
 8009a40:	4b58      	ldr	r3, [pc, #352]	@ (8009ba4 <HAL_RCC_OscConfig+0xc5c>)
 8009a42:	6a1b      	ldr	r3, [r3, #32]
 8009a44:	e013      	b.n	8009a6e <HAL_RCC_OscConfig+0xb26>
 8009a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a4a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8009a4e:	2202      	movs	r2, #2
 8009a50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a56:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	fa93 f2a3 	rbit	r2, r3
 8009a60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a64:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8009ba4 <HAL_RCC_OscConfig+0xc5c>)
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009a72:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8009a76:	2102      	movs	r1, #2
 8009a78:	6011      	str	r1, [r2, #0]
 8009a7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009a7e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8009a82:	6812      	ldr	r2, [r2, #0]
 8009a84:	fa92 f1a2 	rbit	r1, r2
 8009a88:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009a8c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8009a90:	6011      	str	r1, [r2, #0]
  return result;
 8009a92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009a96:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8009a9a:	6812      	ldr	r2, [r2, #0]
 8009a9c:	fab2 f282 	clz	r2, r2
 8009aa0:	b2d2      	uxtb	r2, r2
 8009aa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009aa6:	b2d2      	uxtb	r2, r2
 8009aa8:	f002 021f 	and.w	r2, r2, #31
 8009aac:	2101      	movs	r1, #1
 8009aae:	fa01 f202 	lsl.w	r2, r1, r2
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d186      	bne.n	80099c6 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009ab8:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d105      	bne.n	8009acc <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ac0:	4b38      	ldr	r3, [pc, #224]	@ (8009ba4 <HAL_RCC_OscConfig+0xc5c>)
 8009ac2:	69db      	ldr	r3, [r3, #28]
 8009ac4:	4a37      	ldr	r2, [pc, #220]	@ (8009ba4 <HAL_RCC_OscConfig+0xc5c>)
 8009ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009aca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009acc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009ad0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 8251 	beq.w	8009f80 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ade:	4b31      	ldr	r3, [pc, #196]	@ (8009ba4 <HAL_RCC_OscConfig+0xc5c>)
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f003 030c 	and.w	r3, r3, #12
 8009ae6:	2b08      	cmp	r3, #8
 8009ae8:	f000 820f 	beq.w	8009f0a <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009aec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009af0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	f040 8165 	bne.w	8009dc8 <HAL_RCC_OscConfig+0xe80>
 8009afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b02:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009b06:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b10:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	fa93 f2a3 	rbit	r2, r3
 8009b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b1e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009b22:	601a      	str	r2, [r3, #0]
  return result;
 8009b24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b28:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009b2c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b2e:	fab3 f383 	clz	r3, r3
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8009b38:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	461a      	mov	r2, r3
 8009b40:	2300      	movs	r3, #0
 8009b42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b44:	f7fe fec6 	bl	80088d4 <HAL_GetTick>
 8009b48:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b4c:	e009      	b.n	8009b62 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b4e:	f7fe fec1 	bl	80088d4 <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d901      	bls.n	8009b62 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e20f      	b.n	8009f82 <HAL_RCC_OscConfig+0x103a>
 8009b62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b66:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009b6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b74:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	fa93 f2a3 	rbit	r2, r3
 8009b7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b82:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009b86:	601a      	str	r2, [r3, #0]
  return result;
 8009b88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b8c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009b90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b92:	fab3 f383 	clz	r3, r3
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b3f      	cmp	r3, #63	@ 0x3f
 8009b9a:	d805      	bhi.n	8009ba8 <HAL_RCC_OscConfig+0xc60>
 8009b9c:	4b01      	ldr	r3, [pc, #4]	@ (8009ba4 <HAL_RCC_OscConfig+0xc5c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	e02a      	b.n	8009bf8 <HAL_RCC_OscConfig+0xcb0>
 8009ba2:	bf00      	nop
 8009ba4:	40021000 	.word	0x40021000
 8009ba8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009bac:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009bb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009bba:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	fa93 f2a3 	rbit	r2, r3
 8009bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009bc8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009bd2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8009bd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009be0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	fa93 f2a3 	rbit	r2, r3
 8009bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009bee:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8009bf2:	601a      	str	r2, [r3, #0]
 8009bf4:	4bca      	ldr	r3, [pc, #808]	@ (8009f20 <HAL_RCC_OscConfig+0xfd8>)
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009bfc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8009c00:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8009c04:	6011      	str	r1, [r2, #0]
 8009c06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009c0a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8009c0e:	6812      	ldr	r2, [r2, #0]
 8009c10:	fa92 f1a2 	rbit	r1, r2
 8009c14:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009c18:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8009c1c:	6011      	str	r1, [r2, #0]
  return result;
 8009c1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009c22:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8009c26:	6812      	ldr	r2, [r2, #0]
 8009c28:	fab2 f282 	clz	r2, r2
 8009c2c:	b2d2      	uxtb	r2, r2
 8009c2e:	f042 0220 	orr.w	r2, r2, #32
 8009c32:	b2d2      	uxtb	r2, r2
 8009c34:	f002 021f 	and.w	r2, r2, #31
 8009c38:	2101      	movs	r1, #1
 8009c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8009c3e:	4013      	ands	r3, r2
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d184      	bne.n	8009b4e <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c44:	4bb6      	ldr	r3, [pc, #728]	@ (8009f20 <HAL_RCC_OscConfig+0xfd8>)
 8009c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c48:	f023 020f 	bic.w	r2, r3, #15
 8009c4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009c50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c58:	49b1      	ldr	r1, [pc, #708]	@ (8009f20 <HAL_RCC_OscConfig+0xfd8>)
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009c5e:	4bb0      	ldr	r3, [pc, #704]	@ (8009f20 <HAL_RCC_OscConfig+0xfd8>)
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8009c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009c6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6a19      	ldr	r1, [r3, #32]
 8009c72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009c76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	69db      	ldr	r3, [r3, #28]
 8009c7e:	430b      	orrs	r3, r1
 8009c80:	49a7      	ldr	r1, [pc, #668]	@ (8009f20 <HAL_RCC_OscConfig+0xfd8>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	604b      	str	r3, [r1, #4]
 8009c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009c8a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8009c8e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009c98:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	fa93 f2a3 	rbit	r2, r3
 8009ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009ca6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8009caa:	601a      	str	r2, [r3, #0]
  return result;
 8009cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009cb0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8009cb4:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009cb6:	fab3 f383 	clz	r3, r3
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8009cc0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	2301      	movs	r3, #1
 8009cca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ccc:	f7fe fe02 	bl	80088d4 <HAL_GetTick>
 8009cd0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009cd4:	e009      	b.n	8009cea <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cd6:	f7fe fdfd 	bl	80088d4 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d901      	bls.n	8009cea <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e14b      	b.n	8009f82 <HAL_RCC_OscConfig+0x103a>
 8009cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009cee:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8009cf2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cf8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009cfc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	fa93 f2a3 	rbit	r2, r3
 8009d06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d0a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8009d0e:	601a      	str	r2, [r3, #0]
  return result;
 8009d10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d14:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8009d18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009d1a:	fab3 f383 	clz	r3, r3
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	2b3f      	cmp	r3, #63	@ 0x3f
 8009d22:	d802      	bhi.n	8009d2a <HAL_RCC_OscConfig+0xde2>
 8009d24:	4b7e      	ldr	r3, [pc, #504]	@ (8009f20 <HAL_RCC_OscConfig+0xfd8>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	e027      	b.n	8009d7a <HAL_RCC_OscConfig+0xe32>
 8009d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d2e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8009d32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d3c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	fa93 f2a3 	rbit	r2, r3
 8009d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d4a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d54:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8009d58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d62:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	fa93 f2a3 	rbit	r2, r3
 8009d6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d70:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8009d74:	601a      	str	r2, [r3, #0]
 8009d76:	4b6a      	ldr	r3, [pc, #424]	@ (8009f20 <HAL_RCC_OscConfig+0xfd8>)
 8009d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009d7e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8009d82:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8009d86:	6011      	str	r1, [r2, #0]
 8009d88:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009d8c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8009d90:	6812      	ldr	r2, [r2, #0]
 8009d92:	fa92 f1a2 	rbit	r1, r2
 8009d96:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009d9a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8009d9e:	6011      	str	r1, [r2, #0]
  return result;
 8009da0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009da4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8009da8:	6812      	ldr	r2, [r2, #0]
 8009daa:	fab2 f282 	clz	r2, r2
 8009dae:	b2d2      	uxtb	r2, r2
 8009db0:	f042 0220 	orr.w	r2, r2, #32
 8009db4:	b2d2      	uxtb	r2, r2
 8009db6:	f002 021f 	and.w	r2, r2, #31
 8009dba:	2101      	movs	r1, #1
 8009dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d087      	beq.n	8009cd6 <HAL_RCC_OscConfig+0xd8e>
 8009dc6:	e0db      	b.n	8009f80 <HAL_RCC_OscConfig+0x1038>
 8009dc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009dcc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8009dd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009dda:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	fa93 f2a3 	rbit	r2, r3
 8009de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009de8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8009dec:	601a      	str	r2, [r3, #0]
  return result;
 8009dee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009df2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8009df6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009df8:	fab3 f383 	clz	r3, r3
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8009e02:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	461a      	mov	r2, r3
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e0e:	f7fe fd61 	bl	80088d4 <HAL_GetTick>
 8009e12:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e16:	e009      	b.n	8009e2c <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e18:	f7fe fd5c 	bl	80088d4 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d901      	bls.n	8009e2c <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e0aa      	b.n	8009f82 <HAL_RCC_OscConfig+0x103a>
 8009e2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e30:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8009e34:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e3e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	fa93 f2a3 	rbit	r2, r3
 8009e48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e4c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8009e50:	601a      	str	r2, [r3, #0]
  return result;
 8009e52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e56:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8009e5a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e5c:	fab3 f383 	clz	r3, r3
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b3f      	cmp	r3, #63	@ 0x3f
 8009e64:	d802      	bhi.n	8009e6c <HAL_RCC_OscConfig+0xf24>
 8009e66:	4b2e      	ldr	r3, [pc, #184]	@ (8009f20 <HAL_RCC_OscConfig+0xfd8>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	e027      	b.n	8009ebc <HAL_RCC_OscConfig+0xf74>
 8009e6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e70:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8009e74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e7e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	fa93 f2a3 	rbit	r2, r3
 8009e88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e8c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e96:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8009e9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009ea4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	fa93 f2a3 	rbit	r2, r3
 8009eae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009eb2:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	4b19      	ldr	r3, [pc, #100]	@ (8009f20 <HAL_RCC_OscConfig+0xfd8>)
 8009eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ebc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009ec0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8009ec4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8009ec8:	6011      	str	r1, [r2, #0]
 8009eca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009ece:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	fa92 f1a2 	rbit	r1, r2
 8009ed8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009edc:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8009ee0:	6011      	str	r1, [r2, #0]
  return result;
 8009ee2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009ee6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8009eea:	6812      	ldr	r2, [r2, #0]
 8009eec:	fab2 f282 	clz	r2, r2
 8009ef0:	b2d2      	uxtb	r2, r2
 8009ef2:	f042 0220 	orr.w	r2, r2, #32
 8009ef6:	b2d2      	uxtb	r2, r2
 8009ef8:	f002 021f 	and.w	r2, r2, #31
 8009efc:	2101      	movs	r1, #1
 8009efe:	fa01 f202 	lsl.w	r2, r1, r2
 8009f02:	4013      	ands	r3, r2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d187      	bne.n	8009e18 <HAL_RCC_OscConfig+0xed0>
 8009f08:	e03a      	b.n	8009f80 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009f0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d104      	bne.n	8009f24 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e031      	b.n	8009f82 <HAL_RCC_OscConfig+0x103a>
 8009f1e:	bf00      	nop
 8009f20:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009f24:	4b19      	ldr	r3, [pc, #100]	@ (8009f8c <HAL_RCC_OscConfig+0x1044>)
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8009f2c:	4b17      	ldr	r3, [pc, #92]	@ (8009f8c <HAL_RCC_OscConfig+0x1044>)
 8009f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f30:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009f34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009f38:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8009f3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009f40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	69db      	ldr	r3, [r3, #28]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d117      	bne.n	8009f7c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009f4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009f50:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8009f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009f58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d10b      	bne.n	8009f7c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8009f64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8009f68:	f003 020f 	and.w	r2, r3, #15
 8009f6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009f70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d001      	beq.n	8009f80 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e000      	b.n	8009f82 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	40021000 	.word	0x40021000

08009f90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b09e      	sub	sp, #120	@ 0x78
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d101      	bne.n	8009fa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e154      	b.n	800a252 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009fa8:	4b89      	ldr	r3, [pc, #548]	@ (800a1d0 <HAL_RCC_ClockConfig+0x240>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0307 	and.w	r3, r3, #7
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d910      	bls.n	8009fd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fb6:	4b86      	ldr	r3, [pc, #536]	@ (800a1d0 <HAL_RCC_ClockConfig+0x240>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f023 0207 	bic.w	r2, r3, #7
 8009fbe:	4984      	ldr	r1, [pc, #528]	@ (800a1d0 <HAL_RCC_ClockConfig+0x240>)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fc6:	4b82      	ldr	r3, [pc, #520]	@ (800a1d0 <HAL_RCC_ClockConfig+0x240>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 0307 	and.w	r3, r3, #7
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d001      	beq.n	8009fd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e13c      	b.n	800a252 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0302 	and.w	r3, r3, #2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d008      	beq.n	8009ff6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fe4:	4b7b      	ldr	r3, [pc, #492]	@ (800a1d4 <HAL_RCC_ClockConfig+0x244>)
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	4978      	ldr	r1, [pc, #480]	@ (800a1d4 <HAL_RCC_ClockConfig+0x244>)
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f000 80cd 	beq.w	800a19e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d137      	bne.n	800a07c <HAL_RCC_ClockConfig+0xec>
 800a00c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a010:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a014:	fa93 f3a3 	rbit	r3, r3
 800a018:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a01a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a01c:	fab3 f383 	clz	r3, r3
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b3f      	cmp	r3, #63	@ 0x3f
 800a024:	d802      	bhi.n	800a02c <HAL_RCC_ClockConfig+0x9c>
 800a026:	4b6b      	ldr	r3, [pc, #428]	@ (800a1d4 <HAL_RCC_ClockConfig+0x244>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	e00f      	b.n	800a04c <HAL_RCC_ClockConfig+0xbc>
 800a02c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a030:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a032:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a034:	fa93 f3a3 	rbit	r3, r3
 800a038:	667b      	str	r3, [r7, #100]	@ 0x64
 800a03a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a03e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a040:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a042:	fa93 f3a3 	rbit	r3, r3
 800a046:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a048:	4b62      	ldr	r3, [pc, #392]	@ (800a1d4 <HAL_RCC_ClockConfig+0x244>)
 800a04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a050:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a052:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a054:	fa92 f2a2 	rbit	r2, r2
 800a058:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800a05a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a05c:	fab2 f282 	clz	r2, r2
 800a060:	b2d2      	uxtb	r2, r2
 800a062:	f042 0220 	orr.w	r2, r2, #32
 800a066:	b2d2      	uxtb	r2, r2
 800a068:	f002 021f 	and.w	r2, r2, #31
 800a06c:	2101      	movs	r1, #1
 800a06e:	fa01 f202 	lsl.w	r2, r1, r2
 800a072:	4013      	ands	r3, r2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d171      	bne.n	800a15c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e0ea      	b.n	800a252 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	2b02      	cmp	r3, #2
 800a082:	d137      	bne.n	800a0f4 <HAL_RCC_ClockConfig+0x164>
 800a084:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a088:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a08a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a08c:	fa93 f3a3 	rbit	r3, r3
 800a090:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a094:	fab3 f383 	clz	r3, r3
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a09c:	d802      	bhi.n	800a0a4 <HAL_RCC_ClockConfig+0x114>
 800a09e:	4b4d      	ldr	r3, [pc, #308]	@ (800a1d4 <HAL_RCC_ClockConfig+0x244>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	e00f      	b.n	800a0c4 <HAL_RCC_ClockConfig+0x134>
 800a0a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a0a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0ac:	fa93 f3a3 	rbit	r3, r3
 800a0b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a0b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0ba:	fa93 f3a3 	rbit	r3, r3
 800a0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0c0:	4b44      	ldr	r3, [pc, #272]	@ (800a1d4 <HAL_RCC_ClockConfig+0x244>)
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800a0c8:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a0ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0cc:	fa92 f2a2 	rbit	r2, r2
 800a0d0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800a0d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0d4:	fab2 f282 	clz	r2, r2
 800a0d8:	b2d2      	uxtb	r2, r2
 800a0da:	f042 0220 	orr.w	r2, r2, #32
 800a0de:	b2d2      	uxtb	r2, r2
 800a0e0:	f002 021f 	and.w	r2, r2, #31
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	fa01 f202 	lsl.w	r2, r1, r2
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d135      	bne.n	800a15c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e0ae      	b.n	800a252 <HAL_RCC_ClockConfig+0x2c2>
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fa:	fa93 f3a3 	rbit	r3, r3
 800a0fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800a100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a102:	fab3 f383 	clz	r3, r3
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b3f      	cmp	r3, #63	@ 0x3f
 800a10a:	d802      	bhi.n	800a112 <HAL_RCC_ClockConfig+0x182>
 800a10c:	4b31      	ldr	r3, [pc, #196]	@ (800a1d4 <HAL_RCC_ClockConfig+0x244>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	e00d      	b.n	800a12e <HAL_RCC_ClockConfig+0x19e>
 800a112:	2302      	movs	r3, #2
 800a114:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a118:	fa93 f3a3 	rbit	r3, r3
 800a11c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a11e:	2302      	movs	r3, #2
 800a120:	623b      	str	r3, [r7, #32]
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	fa93 f3a3 	rbit	r3, r3
 800a128:	61fb      	str	r3, [r7, #28]
 800a12a:	4b2a      	ldr	r3, [pc, #168]	@ (800a1d4 <HAL_RCC_ClockConfig+0x244>)
 800a12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a12e:	2202      	movs	r2, #2
 800a130:	61ba      	str	r2, [r7, #24]
 800a132:	69ba      	ldr	r2, [r7, #24]
 800a134:	fa92 f2a2 	rbit	r2, r2
 800a138:	617a      	str	r2, [r7, #20]
  return result;
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	fab2 f282 	clz	r2, r2
 800a140:	b2d2      	uxtb	r2, r2
 800a142:	f042 0220 	orr.w	r2, r2, #32
 800a146:	b2d2      	uxtb	r2, r2
 800a148:	f002 021f 	and.w	r2, r2, #31
 800a14c:	2101      	movs	r1, #1
 800a14e:	fa01 f202 	lsl.w	r2, r1, r2
 800a152:	4013      	ands	r3, r2
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e07a      	b.n	800a252 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a15c:	4b1d      	ldr	r3, [pc, #116]	@ (800a1d4 <HAL_RCC_ClockConfig+0x244>)
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	f023 0203 	bic.w	r2, r3, #3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	491a      	ldr	r1, [pc, #104]	@ (800a1d4 <HAL_RCC_ClockConfig+0x244>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a16e:	f7fe fbb1 	bl	80088d4 <HAL_GetTick>
 800a172:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a174:	e00a      	b.n	800a18c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a176:	f7fe fbad 	bl	80088d4 <HAL_GetTick>
 800a17a:	4602      	mov	r2, r0
 800a17c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a184:	4293      	cmp	r3, r2
 800a186:	d901      	bls.n	800a18c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e062      	b.n	800a252 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a18c:	4b11      	ldr	r3, [pc, #68]	@ (800a1d4 <HAL_RCC_ClockConfig+0x244>)
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f003 020c 	and.w	r2, r3, #12
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d1eb      	bne.n	800a176 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a19e:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d0 <HAL_RCC_ClockConfig+0x240>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0307 	and.w	r3, r3, #7
 800a1a6:	683a      	ldr	r2, [r7, #0]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d215      	bcs.n	800a1d8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1ac:	4b08      	ldr	r3, [pc, #32]	@ (800a1d0 <HAL_RCC_ClockConfig+0x240>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f023 0207 	bic.w	r2, r3, #7
 800a1b4:	4906      	ldr	r1, [pc, #24]	@ (800a1d0 <HAL_RCC_ClockConfig+0x240>)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1bc:	4b04      	ldr	r3, [pc, #16]	@ (800a1d0 <HAL_RCC_ClockConfig+0x240>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 0307 	and.w	r3, r3, #7
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d006      	beq.n	800a1d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e041      	b.n	800a252 <HAL_RCC_ClockConfig+0x2c2>
 800a1ce:	bf00      	nop
 800a1d0:	40022000 	.word	0x40022000
 800a1d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0304 	and.w	r3, r3, #4
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d008      	beq.n	800a1f6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1e4:	4b1d      	ldr	r3, [pc, #116]	@ (800a25c <HAL_RCC_ClockConfig+0x2cc>)
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	491a      	ldr	r1, [pc, #104]	@ (800a25c <HAL_RCC_ClockConfig+0x2cc>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f003 0308 	and.w	r3, r3, #8
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d009      	beq.n	800a216 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a202:	4b16      	ldr	r3, [pc, #88]	@ (800a25c <HAL_RCC_ClockConfig+0x2cc>)
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	4912      	ldr	r1, [pc, #72]	@ (800a25c <HAL_RCC_ClockConfig+0x2cc>)
 800a212:	4313      	orrs	r3, r2
 800a214:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a216:	f000 f829 	bl	800a26c <HAL_RCC_GetSysClockFreq>
 800a21a:	4601      	mov	r1, r0
 800a21c:	4b0f      	ldr	r3, [pc, #60]	@ (800a25c <HAL_RCC_ClockConfig+0x2cc>)
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a224:	22f0      	movs	r2, #240	@ 0xf0
 800a226:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a228:	693a      	ldr	r2, [r7, #16]
 800a22a:	fa92 f2a2 	rbit	r2, r2
 800a22e:	60fa      	str	r2, [r7, #12]
  return result;
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	fab2 f282 	clz	r2, r2
 800a236:	b2d2      	uxtb	r2, r2
 800a238:	40d3      	lsrs	r3, r2
 800a23a:	4a09      	ldr	r2, [pc, #36]	@ (800a260 <HAL_RCC_ClockConfig+0x2d0>)
 800a23c:	5cd3      	ldrb	r3, [r2, r3]
 800a23e:	fa21 f303 	lsr.w	r3, r1, r3
 800a242:	4a08      	ldr	r2, [pc, #32]	@ (800a264 <HAL_RCC_ClockConfig+0x2d4>)
 800a244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a246:	4b08      	ldr	r3, [pc, #32]	@ (800a268 <HAL_RCC_ClockConfig+0x2d8>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fe fafe 	bl	800884c <HAL_InitTick>
  
  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3778      	adds	r7, #120	@ 0x78
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	40021000 	.word	0x40021000
 800a260:	0800baf0 	.word	0x0800baf0
 800a264:	20000000 	.word	0x20000000
 800a268:	20000004 	.word	0x20000004

0800a26c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b087      	sub	sp, #28
 800a270:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a272:	2300      	movs	r3, #0
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	2300      	movs	r3, #0
 800a278:	60bb      	str	r3, [r7, #8]
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]
 800a27e:	2300      	movs	r3, #0
 800a280:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a282:	2300      	movs	r3, #0
 800a284:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800a286:	4b1f      	ldr	r3, [pc, #124]	@ (800a304 <HAL_RCC_GetSysClockFreq+0x98>)
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f003 030c 	and.w	r3, r3, #12
 800a292:	2b04      	cmp	r3, #4
 800a294:	d002      	beq.n	800a29c <HAL_RCC_GetSysClockFreq+0x30>
 800a296:	2b08      	cmp	r3, #8
 800a298:	d003      	beq.n	800a2a2 <HAL_RCC_GetSysClockFreq+0x36>
 800a29a:	e029      	b.n	800a2f0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a29c:	4b1a      	ldr	r3, [pc, #104]	@ (800a308 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a29e:	613b      	str	r3, [r7, #16]
      break;
 800a2a0:	e029      	b.n	800a2f6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	0c9b      	lsrs	r3, r3, #18
 800a2a6:	f003 030f 	and.w	r3, r3, #15
 800a2aa:	4a18      	ldr	r2, [pc, #96]	@ (800a30c <HAL_RCC_GetSysClockFreq+0xa0>)
 800a2ac:	5cd3      	ldrb	r3, [r2, r3]
 800a2ae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800a2b0:	4b14      	ldr	r3, [pc, #80]	@ (800a304 <HAL_RCC_GetSysClockFreq+0x98>)
 800a2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b4:	f003 030f 	and.w	r3, r3, #15
 800a2b8:	4a15      	ldr	r2, [pc, #84]	@ (800a310 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a2ba:	5cd3      	ldrb	r3, [r2, r3]
 800a2bc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d008      	beq.n	800a2da <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a2c8:	4a0f      	ldr	r2, [pc, #60]	@ (800a308 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	fb02 f303 	mul.w	r3, r2, r3
 800a2d6:	617b      	str	r3, [r7, #20]
 800a2d8:	e007      	b.n	800a2ea <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a2da:	4a0b      	ldr	r2, [pc, #44]	@ (800a308 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	fb02 f303 	mul.w	r3, r2, r3
 800a2e8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	613b      	str	r3, [r7, #16]
      break;
 800a2ee:	e002      	b.n	800a2f6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a2f0:	4b05      	ldr	r3, [pc, #20]	@ (800a308 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a2f2:	613b      	str	r3, [r7, #16]
      break;
 800a2f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2f6:	693b      	ldr	r3, [r7, #16]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	371c      	adds	r7, #28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	40021000 	.word	0x40021000
 800a308:	007a1200 	.word	0x007a1200
 800a30c:	0800bb08 	.word	0x0800bb08
 800a310:	0800bb18 	.word	0x0800bb18

0800a314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a314:	b480      	push	{r7}
 800a316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a318:	4b03      	ldr	r3, [pc, #12]	@ (800a328 <HAL_RCC_GetHCLKFreq+0x14>)
 800a31a:	681b      	ldr	r3, [r3, #0]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	20000000 	.word	0x20000000

0800a32c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800a332:	f7ff ffef 	bl	800a314 <HAL_RCC_GetHCLKFreq>
 800a336:	4601      	mov	r1, r0
 800a338:	4b0b      	ldr	r3, [pc, #44]	@ (800a368 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a340:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800a344:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	fa92 f2a2 	rbit	r2, r2
 800a34c:	603a      	str	r2, [r7, #0]
  return result;
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	fab2 f282 	clz	r2, r2
 800a354:	b2d2      	uxtb	r2, r2
 800a356:	40d3      	lsrs	r3, r2
 800a358:	4a04      	ldr	r2, [pc, #16]	@ (800a36c <HAL_RCC_GetPCLK1Freq+0x40>)
 800a35a:	5cd3      	ldrb	r3, [r2, r3]
 800a35c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a360:	4618      	mov	r0, r3
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	40021000 	.word	0x40021000
 800a36c:	0800bb00 	.word	0x0800bb00

0800a370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800a376:	f7ff ffcd 	bl	800a314 <HAL_RCC_GetHCLKFreq>
 800a37a:	4601      	mov	r1, r0
 800a37c:	4b0b      	ldr	r3, [pc, #44]	@ (800a3ac <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800a384:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800a388:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	fa92 f2a2 	rbit	r2, r2
 800a390:	603a      	str	r2, [r7, #0]
  return result;
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	fab2 f282 	clz	r2, r2
 800a398:	b2d2      	uxtb	r2, r2
 800a39a:	40d3      	lsrs	r3, r2
 800a39c:	4a04      	ldr	r2, [pc, #16]	@ (800a3b0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800a39e:	5cd3      	ldrb	r3, [r2, r3]
 800a3a0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	40021000 	.word	0x40021000
 800a3b0:	0800bb00 	.word	0x0800bb00

0800a3b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b092      	sub	sp, #72	@ 0x48
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 80d2 	beq.w	800a57c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3d8:	4b4d      	ldr	r3, [pc, #308]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a3da:	69db      	ldr	r3, [r3, #28]
 800a3dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10e      	bne.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3e4:	4b4a      	ldr	r3, [pc, #296]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	4a49      	ldr	r2, [pc, #292]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a3ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3ee:	61d3      	str	r3, [r2, #28]
 800a3f0:	4b47      	ldr	r3, [pc, #284]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a3f2:	69db      	ldr	r3, [r3, #28]
 800a3f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3f8:	60bb      	str	r3, [r7, #8]
 800a3fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a402:	4b44      	ldr	r3, [pc, #272]	@ (800a514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d118      	bne.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a40e:	4b41      	ldr	r3, [pc, #260]	@ (800a514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a40      	ldr	r2, [pc, #256]	@ (800a514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a418:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a41a:	f7fe fa5b 	bl	80088d4 <HAL_GetTick>
 800a41e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a420:	e008      	b.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a422:	f7fe fa57 	bl	80088d4 <HAL_GetTick>
 800a426:	4602      	mov	r2, r0
 800a428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	2b64      	cmp	r3, #100	@ 0x64
 800a42e:	d901      	bls.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a430:	2303      	movs	r3, #3
 800a432:	e1d4      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a434:	4b37      	ldr	r3, [pc, #220]	@ (800a514 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d0f0      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a440:	4b33      	ldr	r3, [pc, #204]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a448:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a44a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 8082 	beq.w	800a556 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a45a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d07a      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a460:	4b2b      	ldr	r3, [pc, #172]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a46a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a46e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a472:	fa93 f3a3 	rbit	r3, r3
 800a476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800a478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a47a:	fab3 f383 	clz	r3, r3
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	461a      	mov	r2, r3
 800a482:	4b25      	ldr	r3, [pc, #148]	@ (800a518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a484:	4413      	add	r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	461a      	mov	r2, r3
 800a48a:	2301      	movs	r3, #1
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a492:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a496:	fa93 f3a3 	rbit	r3, r3
 800a49a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800a49c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a49e:	fab3 f383 	clz	r3, r3
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	4b1c      	ldr	r3, [pc, #112]	@ (800a518 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a4a8:	4413      	add	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a4b2:	4a17      	ldr	r2, [pc, #92]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a4b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d049      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4c2:	f7fe fa07 	bl	80088d4 <HAL_GetTick>
 800a4c6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4c8:	e00a      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4ca:	f7fe fa03 	bl	80088d4 <HAL_GetTick>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d901      	bls.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e17e      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e6:	fa93 f3a3 	rbit	r3, r3
 800a4ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	623b      	str	r3, [r7, #32]
 800a4f0:	6a3b      	ldr	r3, [r7, #32]
 800a4f2:	fa93 f3a3 	rbit	r3, r3
 800a4f6:	61fb      	str	r3, [r7, #28]
  return result;
 800a4f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4fa:	fab3 f383 	clz	r3, r3
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	d108      	bne.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a50a:	4b01      	ldr	r3, [pc, #4]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a50c:	6a1b      	ldr	r3, [r3, #32]
 800a50e:	e00d      	b.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x178>
 800a510:	40021000 	.word	0x40021000
 800a514:	40007000 	.word	0x40007000
 800a518:	10908100 	.word	0x10908100
 800a51c:	2302      	movs	r3, #2
 800a51e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	fa93 f3a3 	rbit	r3, r3
 800a526:	617b      	str	r3, [r7, #20]
 800a528:	4b9a      	ldr	r3, [pc, #616]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a52c:	2202      	movs	r2, #2
 800a52e:	613a      	str	r2, [r7, #16]
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	fa92 f2a2 	rbit	r2, r2
 800a536:	60fa      	str	r2, [r7, #12]
  return result;
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	fab2 f282 	clz	r2, r2
 800a53e:	b2d2      	uxtb	r2, r2
 800a540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a544:	b2d2      	uxtb	r2, r2
 800a546:	f002 021f 	and.w	r2, r2, #31
 800a54a:	2101      	movs	r1, #1
 800a54c:	fa01 f202 	lsl.w	r2, r1, r2
 800a550:	4013      	ands	r3, r2
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0b9      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800a556:	4b8f      	ldr	r3, [pc, #572]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	498c      	ldr	r1, [pc, #560]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a564:	4313      	orrs	r3, r2
 800a566:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a568:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d105      	bne.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a570:	4b88      	ldr	r3, [pc, #544]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a572:	69db      	ldr	r3, [r3, #28]
 800a574:	4a87      	ldr	r2, [pc, #540]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a57a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	2b00      	cmp	r3, #0
 800a586:	d008      	beq.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a588:	4b82      	ldr	r3, [pc, #520]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a58a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a58c:	f023 0203 	bic.w	r2, r3, #3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	497f      	ldr	r1, [pc, #508]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a596:	4313      	orrs	r3, r2
 800a598:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0302 	and.w	r3, r3, #2
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d008      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a5a6:	4b7b      	ldr	r3, [pc, #492]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	4978      	ldr	r1, [pc, #480]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d008      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a5c4:	4b73      	ldr	r3, [pc, #460]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	4970      	ldr	r1, [pc, #448]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0320 	and.w	r3, r3, #32
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d008      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a5e2:	4b6c      	ldr	r3, [pc, #432]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e6:	f023 0210 	bic.w	r2, r3, #16
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	4969      	ldr	r1, [pc, #420]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d008      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800a600:	4b64      	ldr	r3, [pc, #400]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a60c:	4961      	ldr	r1, [pc, #388]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d008      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a61e:	4b5d      	ldr	r3, [pc, #372]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a622:	f023 0220 	bic.w	r2, r3, #32
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	495a      	ldr	r1, [pc, #360]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a62c:	4313      	orrs	r3, r2
 800a62e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d008      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a63c:	4b55      	ldr	r3, [pc, #340]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a63e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a640:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a648:	4952      	ldr	r1, [pc, #328]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a64a:	4313      	orrs	r3, r2
 800a64c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0308 	and.w	r3, r3, #8
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a65a:	4b4e      	ldr	r3, [pc, #312]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a65c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a65e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	494b      	ldr	r1, [pc, #300]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a668:	4313      	orrs	r3, r2
 800a66a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0310 	and.w	r3, r3, #16
 800a674:	2b00      	cmp	r3, #0
 800a676:	d008      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a678:	4b46      	ldr	r3, [pc, #280]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a67a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a67c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	4943      	ldr	r1, [pc, #268]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a686:	4313      	orrs	r3, r2
 800a688:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a692:	2b00      	cmp	r3, #0
 800a694:	d008      	beq.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a696:	4b3f      	ldr	r3, [pc, #252]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a2:	493c      	ldr	r1, [pc, #240]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d008      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a6b4:	4b37      	ldr	r3, [pc, #220]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c0:	4934      	ldr	r1, [pc, #208]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d008      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a6d2:	4b30      	ldr	r3, [pc, #192]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d6:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6de:	492d      	ldr	r1, [pc, #180]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d008      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a6f0:	4b28      	ldr	r3, [pc, #160]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6fc:	4925      	ldr	r1, [pc, #148]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6fe:	4313      	orrs	r3, r2
 800a700:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d008      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a70e:	4b21      	ldr	r3, [pc, #132]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a712:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a71a:	491e      	ldr	r1, [pc, #120]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a71c:	4313      	orrs	r3, r2
 800a71e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d008      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800a72c:	4b19      	ldr	r3, [pc, #100]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a72e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a730:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a738:	4916      	ldr	r1, [pc, #88]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a73a:	4313      	orrs	r3, r2
 800a73c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a746:	2b00      	cmp	r3, #0
 800a748:	d008      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800a74a:	4b12      	ldr	r3, [pc, #72]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a74c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a74e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a756:	490f      	ldr	r1, [pc, #60]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d008      	beq.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a768:	4b0a      	ldr	r3, [pc, #40]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a76a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a76c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a774:	4907      	ldr	r1, [pc, #28]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a776:	4313      	orrs	r3, r2
 800a778:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00c      	beq.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800a786:	4b03      	ldr	r3, [pc, #12]	@ (800a794 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a78a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	e002      	b.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a792:	bf00      	nop
 800a794:	40021000 	.word	0x40021000
 800a798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a79a:	4913      	ldr	r1, [pc, #76]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a79c:	4313      	orrs	r3, r2
 800a79e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d008      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800a7ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a7ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7b8:	490b      	ldr	r1, [pc, #44]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d008      	beq.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800a7ca:	4b07      	ldr	r3, [pc, #28]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7ce:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7d6:	4904      	ldr	r1, [pc, #16]	@ (800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3748      	adds	r7, #72	@ 0x48
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	40021000 	.word	0x40021000

0800a7ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d101      	bne.n	800a7fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e040      	b.n	800a880 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a802:	2b00      	cmp	r3, #0
 800a804:	d106      	bne.n	800a814 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7fd feb8 	bl	8008584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2224      	movs	r2, #36	@ 0x24
 800a818:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f022 0201 	bic.w	r2, r2, #1
 800a828:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d002      	beq.n	800a838 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fa86 	bl	800ad44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f8af 	bl	800a99c <UART_SetConfig>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b01      	cmp	r3, #1
 800a842:	d101      	bne.n	800a848 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a844:	2301      	movs	r3, #1
 800a846:	e01b      	b.n	800a880 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	685a      	ldr	r2, [r3, #4]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a856:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	689a      	ldr	r2, [r3, #8]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a866:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f042 0201 	orr.w	r2, r2, #1
 800a876:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 fb05 	bl	800ae88 <UART_CheckIdleState>
 800a87e:	4603      	mov	r3, r0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b08a      	sub	sp, #40	@ 0x28
 800a88c:	af02      	add	r7, sp, #8
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	4613      	mov	r3, r2
 800a896:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a89c:	2b20      	cmp	r3, #32
 800a89e:	d177      	bne.n	800a990 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d002      	beq.n	800a8ac <HAL_UART_Transmit+0x24>
 800a8a6:	88fb      	ldrh	r3, [r7, #6]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d101      	bne.n	800a8b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e070      	b.n	800a992 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2221      	movs	r2, #33	@ 0x21
 800a8bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8be:	f7fe f809 	bl	80088d4 <HAL_GetTick>
 800a8c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	88fa      	ldrh	r2, [r7, #6]
 800a8c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	88fa      	ldrh	r2, [r7, #6]
 800a8d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8dc:	d108      	bne.n	800a8f0 <HAL_UART_Transmit+0x68>
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d104      	bne.n	800a8f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	61bb      	str	r3, [r7, #24]
 800a8ee:	e003      	b.n	800a8f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a8f8:	e02f      	b.n	800a95a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2200      	movs	r2, #0
 800a902:	2180      	movs	r1, #128	@ 0x80
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f000 fb67 	bl	800afd8 <UART_WaitOnFlagUntilTimeout>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d004      	beq.n	800a91a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2220      	movs	r2, #32
 800a914:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e03b      	b.n	800a992 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10b      	bne.n	800a938 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	881a      	ldrh	r2, [r3, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a92c:	b292      	uxth	r2, r2
 800a92e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	3302      	adds	r3, #2
 800a934:	61bb      	str	r3, [r7, #24]
 800a936:	e007      	b.n	800a948 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	781a      	ldrb	r2, [r3, #0]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	3301      	adds	r3, #1
 800a946:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a94e:	b29b      	uxth	r3, r3
 800a950:	3b01      	subs	r3, #1
 800a952:	b29a      	uxth	r2, r3
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a960:	b29b      	uxth	r3, r3
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1c9      	bne.n	800a8fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	9300      	str	r3, [sp, #0]
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	2200      	movs	r2, #0
 800a96e:	2140      	movs	r1, #64	@ 0x40
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f000 fb31 	bl	800afd8 <UART_WaitOnFlagUntilTimeout>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d004      	beq.n	800a986 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2220      	movs	r2, #32
 800a980:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a982:	2303      	movs	r3, #3
 800a984:	e005      	b.n	800a992 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2220      	movs	r2, #32
 800a98a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	e000      	b.n	800a992 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a990:	2302      	movs	r3, #2
  }
}
 800a992:	4618      	mov	r0, r3
 800a994:	3720      	adds	r7, #32
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
	...

0800a99c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b088      	sub	sp, #32
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	689a      	ldr	r2, [r3, #8]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	431a      	orrs	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	431a      	orrs	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	69db      	ldr	r3, [r3, #28]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	4b92      	ldr	r3, [pc, #584]	@ (800ac10 <UART_SetConfig+0x274>)
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	6812      	ldr	r2, [r2, #0]
 800a9ce:	6979      	ldr	r1, [r7, #20]
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	68da      	ldr	r2, [r3, #12]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a1b      	ldr	r3, [r3, #32]
 800a9f4:	697a      	ldr	r2, [r7, #20]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a80      	ldr	r2, [pc, #512]	@ (800ac14 <UART_SetConfig+0x278>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d120      	bne.n	800aa5a <UART_SetConfig+0xbe>
 800aa18:	4b7f      	ldr	r3, [pc, #508]	@ (800ac18 <UART_SetConfig+0x27c>)
 800aa1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa1c:	f003 0303 	and.w	r3, r3, #3
 800aa20:	2b03      	cmp	r3, #3
 800aa22:	d817      	bhi.n	800aa54 <UART_SetConfig+0xb8>
 800aa24:	a201      	add	r2, pc, #4	@ (adr r2, 800aa2c <UART_SetConfig+0x90>)
 800aa26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2a:	bf00      	nop
 800aa2c:	0800aa3d 	.word	0x0800aa3d
 800aa30:	0800aa49 	.word	0x0800aa49
 800aa34:	0800aa4f 	.word	0x0800aa4f
 800aa38:	0800aa43 	.word	0x0800aa43
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	77fb      	strb	r3, [r7, #31]
 800aa40:	e0b5      	b.n	800abae <UART_SetConfig+0x212>
 800aa42:	2302      	movs	r3, #2
 800aa44:	77fb      	strb	r3, [r7, #31]
 800aa46:	e0b2      	b.n	800abae <UART_SetConfig+0x212>
 800aa48:	2304      	movs	r3, #4
 800aa4a:	77fb      	strb	r3, [r7, #31]
 800aa4c:	e0af      	b.n	800abae <UART_SetConfig+0x212>
 800aa4e:	2308      	movs	r3, #8
 800aa50:	77fb      	strb	r3, [r7, #31]
 800aa52:	e0ac      	b.n	800abae <UART_SetConfig+0x212>
 800aa54:	2310      	movs	r3, #16
 800aa56:	77fb      	strb	r3, [r7, #31]
 800aa58:	e0a9      	b.n	800abae <UART_SetConfig+0x212>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a6f      	ldr	r2, [pc, #444]	@ (800ac1c <UART_SetConfig+0x280>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d124      	bne.n	800aaae <UART_SetConfig+0x112>
 800aa64:	4b6c      	ldr	r3, [pc, #432]	@ (800ac18 <UART_SetConfig+0x27c>)
 800aa66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa70:	d011      	beq.n	800aa96 <UART_SetConfig+0xfa>
 800aa72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa76:	d817      	bhi.n	800aaa8 <UART_SetConfig+0x10c>
 800aa78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa7c:	d011      	beq.n	800aaa2 <UART_SetConfig+0x106>
 800aa7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa82:	d811      	bhi.n	800aaa8 <UART_SetConfig+0x10c>
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <UART_SetConfig+0xf4>
 800aa88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa8c:	d006      	beq.n	800aa9c <UART_SetConfig+0x100>
 800aa8e:	e00b      	b.n	800aaa8 <UART_SetConfig+0x10c>
 800aa90:	2300      	movs	r3, #0
 800aa92:	77fb      	strb	r3, [r7, #31]
 800aa94:	e08b      	b.n	800abae <UART_SetConfig+0x212>
 800aa96:	2302      	movs	r3, #2
 800aa98:	77fb      	strb	r3, [r7, #31]
 800aa9a:	e088      	b.n	800abae <UART_SetConfig+0x212>
 800aa9c:	2304      	movs	r3, #4
 800aa9e:	77fb      	strb	r3, [r7, #31]
 800aaa0:	e085      	b.n	800abae <UART_SetConfig+0x212>
 800aaa2:	2308      	movs	r3, #8
 800aaa4:	77fb      	strb	r3, [r7, #31]
 800aaa6:	e082      	b.n	800abae <UART_SetConfig+0x212>
 800aaa8:	2310      	movs	r3, #16
 800aaaa:	77fb      	strb	r3, [r7, #31]
 800aaac:	e07f      	b.n	800abae <UART_SetConfig+0x212>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a5b      	ldr	r2, [pc, #364]	@ (800ac20 <UART_SetConfig+0x284>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d124      	bne.n	800ab02 <UART_SetConfig+0x166>
 800aab8:	4b57      	ldr	r3, [pc, #348]	@ (800ac18 <UART_SetConfig+0x27c>)
 800aaba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aabc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800aac0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800aac4:	d011      	beq.n	800aaea <UART_SetConfig+0x14e>
 800aac6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800aaca:	d817      	bhi.n	800aafc <UART_SetConfig+0x160>
 800aacc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800aad0:	d011      	beq.n	800aaf6 <UART_SetConfig+0x15a>
 800aad2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800aad6:	d811      	bhi.n	800aafc <UART_SetConfig+0x160>
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d003      	beq.n	800aae4 <UART_SetConfig+0x148>
 800aadc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aae0:	d006      	beq.n	800aaf0 <UART_SetConfig+0x154>
 800aae2:	e00b      	b.n	800aafc <UART_SetConfig+0x160>
 800aae4:	2300      	movs	r3, #0
 800aae6:	77fb      	strb	r3, [r7, #31]
 800aae8:	e061      	b.n	800abae <UART_SetConfig+0x212>
 800aaea:	2302      	movs	r3, #2
 800aaec:	77fb      	strb	r3, [r7, #31]
 800aaee:	e05e      	b.n	800abae <UART_SetConfig+0x212>
 800aaf0:	2304      	movs	r3, #4
 800aaf2:	77fb      	strb	r3, [r7, #31]
 800aaf4:	e05b      	b.n	800abae <UART_SetConfig+0x212>
 800aaf6:	2308      	movs	r3, #8
 800aaf8:	77fb      	strb	r3, [r7, #31]
 800aafa:	e058      	b.n	800abae <UART_SetConfig+0x212>
 800aafc:	2310      	movs	r3, #16
 800aafe:	77fb      	strb	r3, [r7, #31]
 800ab00:	e055      	b.n	800abae <UART_SetConfig+0x212>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a47      	ldr	r2, [pc, #284]	@ (800ac24 <UART_SetConfig+0x288>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d124      	bne.n	800ab56 <UART_SetConfig+0x1ba>
 800ab0c:	4b42      	ldr	r3, [pc, #264]	@ (800ac18 <UART_SetConfig+0x27c>)
 800ab0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab10:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ab14:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab18:	d011      	beq.n	800ab3e <UART_SetConfig+0x1a2>
 800ab1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab1e:	d817      	bhi.n	800ab50 <UART_SetConfig+0x1b4>
 800ab20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab24:	d011      	beq.n	800ab4a <UART_SetConfig+0x1ae>
 800ab26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab2a:	d811      	bhi.n	800ab50 <UART_SetConfig+0x1b4>
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d003      	beq.n	800ab38 <UART_SetConfig+0x19c>
 800ab30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab34:	d006      	beq.n	800ab44 <UART_SetConfig+0x1a8>
 800ab36:	e00b      	b.n	800ab50 <UART_SetConfig+0x1b4>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	77fb      	strb	r3, [r7, #31]
 800ab3c:	e037      	b.n	800abae <UART_SetConfig+0x212>
 800ab3e:	2302      	movs	r3, #2
 800ab40:	77fb      	strb	r3, [r7, #31]
 800ab42:	e034      	b.n	800abae <UART_SetConfig+0x212>
 800ab44:	2304      	movs	r3, #4
 800ab46:	77fb      	strb	r3, [r7, #31]
 800ab48:	e031      	b.n	800abae <UART_SetConfig+0x212>
 800ab4a:	2308      	movs	r3, #8
 800ab4c:	77fb      	strb	r3, [r7, #31]
 800ab4e:	e02e      	b.n	800abae <UART_SetConfig+0x212>
 800ab50:	2310      	movs	r3, #16
 800ab52:	77fb      	strb	r3, [r7, #31]
 800ab54:	e02b      	b.n	800abae <UART_SetConfig+0x212>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a33      	ldr	r2, [pc, #204]	@ (800ac28 <UART_SetConfig+0x28c>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d124      	bne.n	800abaa <UART_SetConfig+0x20e>
 800ab60:	4b2d      	ldr	r3, [pc, #180]	@ (800ac18 <UART_SetConfig+0x27c>)
 800ab62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab64:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800ab68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ab6c:	d011      	beq.n	800ab92 <UART_SetConfig+0x1f6>
 800ab6e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ab72:	d817      	bhi.n	800aba4 <UART_SetConfig+0x208>
 800ab74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ab78:	d011      	beq.n	800ab9e <UART_SetConfig+0x202>
 800ab7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ab7e:	d811      	bhi.n	800aba4 <UART_SetConfig+0x208>
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d003      	beq.n	800ab8c <UART_SetConfig+0x1f0>
 800ab84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab88:	d006      	beq.n	800ab98 <UART_SetConfig+0x1fc>
 800ab8a:	e00b      	b.n	800aba4 <UART_SetConfig+0x208>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	77fb      	strb	r3, [r7, #31]
 800ab90:	e00d      	b.n	800abae <UART_SetConfig+0x212>
 800ab92:	2302      	movs	r3, #2
 800ab94:	77fb      	strb	r3, [r7, #31]
 800ab96:	e00a      	b.n	800abae <UART_SetConfig+0x212>
 800ab98:	2304      	movs	r3, #4
 800ab9a:	77fb      	strb	r3, [r7, #31]
 800ab9c:	e007      	b.n	800abae <UART_SetConfig+0x212>
 800ab9e:	2308      	movs	r3, #8
 800aba0:	77fb      	strb	r3, [r7, #31]
 800aba2:	e004      	b.n	800abae <UART_SetConfig+0x212>
 800aba4:	2310      	movs	r3, #16
 800aba6:	77fb      	strb	r3, [r7, #31]
 800aba8:	e001      	b.n	800abae <UART_SetConfig+0x212>
 800abaa:	2310      	movs	r3, #16
 800abac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	69db      	ldr	r3, [r3, #28]
 800abb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abb6:	d16b      	bne.n	800ac90 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800abb8:	7ffb      	ldrb	r3, [r7, #31]
 800abba:	2b08      	cmp	r3, #8
 800abbc:	d838      	bhi.n	800ac30 <UART_SetConfig+0x294>
 800abbe:	a201      	add	r2, pc, #4	@ (adr r2, 800abc4 <UART_SetConfig+0x228>)
 800abc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abc4:	0800abe9 	.word	0x0800abe9
 800abc8:	0800abf1 	.word	0x0800abf1
 800abcc:	0800abf9 	.word	0x0800abf9
 800abd0:	0800ac31 	.word	0x0800ac31
 800abd4:	0800abff 	.word	0x0800abff
 800abd8:	0800ac31 	.word	0x0800ac31
 800abdc:	0800ac31 	.word	0x0800ac31
 800abe0:	0800ac31 	.word	0x0800ac31
 800abe4:	0800ac07 	.word	0x0800ac07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abe8:	f7ff fba0 	bl	800a32c <HAL_RCC_GetPCLK1Freq>
 800abec:	61b8      	str	r0, [r7, #24]
        break;
 800abee:	e024      	b.n	800ac3a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abf0:	f7ff fbbe 	bl	800a370 <HAL_RCC_GetPCLK2Freq>
 800abf4:	61b8      	str	r0, [r7, #24]
        break;
 800abf6:	e020      	b.n	800ac3a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abf8:	4b0c      	ldr	r3, [pc, #48]	@ (800ac2c <UART_SetConfig+0x290>)
 800abfa:	61bb      	str	r3, [r7, #24]
        break;
 800abfc:	e01d      	b.n	800ac3a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abfe:	f7ff fb35 	bl	800a26c <HAL_RCC_GetSysClockFreq>
 800ac02:	61b8      	str	r0, [r7, #24]
        break;
 800ac04:	e019      	b.n	800ac3a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac0a:	61bb      	str	r3, [r7, #24]
        break;
 800ac0c:	e015      	b.n	800ac3a <UART_SetConfig+0x29e>
 800ac0e:	bf00      	nop
 800ac10:	efff69f3 	.word	0xefff69f3
 800ac14:	40013800 	.word	0x40013800
 800ac18:	40021000 	.word	0x40021000
 800ac1c:	40004400 	.word	0x40004400
 800ac20:	40004800 	.word	0x40004800
 800ac24:	40004c00 	.word	0x40004c00
 800ac28:	40005000 	.word	0x40005000
 800ac2c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800ac30:	2300      	movs	r3, #0
 800ac32:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	77bb      	strb	r3, [r7, #30]
        break;
 800ac38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d073      	beq.n	800ad28 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	005a      	lsls	r2, r3, #1
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	085b      	lsrs	r3, r3, #1
 800ac4a:	441a      	add	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	2b0f      	cmp	r3, #15
 800ac5a:	d916      	bls.n	800ac8a <UART_SetConfig+0x2ee>
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac62:	d212      	bcs.n	800ac8a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	f023 030f 	bic.w	r3, r3, #15
 800ac6c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	085b      	lsrs	r3, r3, #1
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	f003 0307 	and.w	r3, r3, #7
 800ac78:	b29a      	uxth	r2, r3
 800ac7a:	89fb      	ldrh	r3, [r7, #14]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	89fa      	ldrh	r2, [r7, #14]
 800ac86:	60da      	str	r2, [r3, #12]
 800ac88:	e04e      	b.n	800ad28 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	77bb      	strb	r3, [r7, #30]
 800ac8e:	e04b      	b.n	800ad28 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac90:	7ffb      	ldrb	r3, [r7, #31]
 800ac92:	2b08      	cmp	r3, #8
 800ac94:	d827      	bhi.n	800ace6 <UART_SetConfig+0x34a>
 800ac96:	a201      	add	r2, pc, #4	@ (adr r2, 800ac9c <UART_SetConfig+0x300>)
 800ac98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9c:	0800acc1 	.word	0x0800acc1
 800aca0:	0800acc9 	.word	0x0800acc9
 800aca4:	0800acd1 	.word	0x0800acd1
 800aca8:	0800ace7 	.word	0x0800ace7
 800acac:	0800acd7 	.word	0x0800acd7
 800acb0:	0800ace7 	.word	0x0800ace7
 800acb4:	0800ace7 	.word	0x0800ace7
 800acb8:	0800ace7 	.word	0x0800ace7
 800acbc:	0800acdf 	.word	0x0800acdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acc0:	f7ff fb34 	bl	800a32c <HAL_RCC_GetPCLK1Freq>
 800acc4:	61b8      	str	r0, [r7, #24]
        break;
 800acc6:	e013      	b.n	800acf0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acc8:	f7ff fb52 	bl	800a370 <HAL_RCC_GetPCLK2Freq>
 800accc:	61b8      	str	r0, [r7, #24]
        break;
 800acce:	e00f      	b.n	800acf0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acd0:	4b1b      	ldr	r3, [pc, #108]	@ (800ad40 <UART_SetConfig+0x3a4>)
 800acd2:	61bb      	str	r3, [r7, #24]
        break;
 800acd4:	e00c      	b.n	800acf0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acd6:	f7ff fac9 	bl	800a26c <HAL_RCC_GetSysClockFreq>
 800acda:	61b8      	str	r0, [r7, #24]
        break;
 800acdc:	e008      	b.n	800acf0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ace2:	61bb      	str	r3, [r7, #24]
        break;
 800ace4:	e004      	b.n	800acf0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800ace6:	2300      	movs	r3, #0
 800ace8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	77bb      	strb	r3, [r7, #30]
        break;
 800acee:	bf00      	nop
    }

    if (pclk != 0U)
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d018      	beq.n	800ad28 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	085a      	lsrs	r2, r3, #1
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	441a      	add	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	2b0f      	cmp	r3, #15
 800ad0e:	d909      	bls.n	800ad24 <UART_SetConfig+0x388>
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad16:	d205      	bcs.n	800ad24 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	60da      	str	r2, [r3, #12]
 800ad22:	e001      	b.n	800ad28 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ad34:	7fbb      	ldrb	r3, [r7, #30]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3720      	adds	r7, #32
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	007a1200 	.word	0x007a1200

0800ad44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad50:	f003 0308 	and.w	r3, r3, #8
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00a      	beq.n	800ad6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	430a      	orrs	r2, r1
 800ad6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00a      	beq.n	800ad90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	430a      	orrs	r2, r1
 800ad8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad94:	f003 0302 	and.w	r3, r3, #2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00a      	beq.n	800adb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	430a      	orrs	r2, r1
 800adb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb6:	f003 0304 	and.w	r3, r3, #4
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00a      	beq.n	800add4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	430a      	orrs	r2, r1
 800add2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add8:	f003 0310 	and.w	r3, r3, #16
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00a      	beq.n	800adf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	430a      	orrs	r2, r1
 800adf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adfa:	f003 0320 	and.w	r3, r3, #32
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00a      	beq.n	800ae18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	430a      	orrs	r2, r1
 800ae16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d01a      	beq.n	800ae5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	430a      	orrs	r2, r1
 800ae38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae42:	d10a      	bne.n	800ae5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	430a      	orrs	r2, r1
 800ae58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00a      	beq.n	800ae7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	430a      	orrs	r2, r1
 800ae7a:	605a      	str	r2, [r3, #4]
  }
}
 800ae7c:	bf00      	nop
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b098      	sub	sp, #96	@ 0x60
 800ae8c:	af02      	add	r7, sp, #8
 800ae8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae98:	f7fd fd1c 	bl	80088d4 <HAL_GetTick>
 800ae9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 0308 	and.w	r3, r3, #8
 800aea8:	2b08      	cmp	r3, #8
 800aeaa:	d12e      	bne.n	800af0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aeac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f88c 	bl	800afd8 <UART_WaitOnFlagUntilTimeout>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d021      	beq.n	800af0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aece:	e853 3f00 	ldrex	r3, [r3]
 800aed2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aeda:	653b      	str	r3, [r7, #80]	@ 0x50
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	461a      	mov	r2, r3
 800aee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aee4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aee6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aeea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aeec:	e841 2300 	strex	r3, r2, [r1]
 800aef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1e6      	bne.n	800aec6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2220      	movs	r2, #32
 800aefc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e062      	b.n	800afd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	2b04      	cmp	r3, #4
 800af16:	d149      	bne.n	800afac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af20:	2200      	movs	r2, #0
 800af22:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f856 	bl	800afd8 <UART_WaitOnFlagUntilTimeout>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d03c      	beq.n	800afac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3a:	e853 3f00 	ldrex	r3, [r3]
 800af3e:	623b      	str	r3, [r7, #32]
   return(result);
 800af40:	6a3b      	ldr	r3, [r7, #32]
 800af42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	461a      	mov	r2, r3
 800af4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af50:	633b      	str	r3, [r7, #48]	@ 0x30
 800af52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af58:	e841 2300 	strex	r3, r2, [r1]
 800af5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e6      	bne.n	800af32 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	3308      	adds	r3, #8
 800af6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	e853 3f00 	ldrex	r3, [r3]
 800af72:	60fb      	str	r3, [r7, #12]
   return(result);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f023 0301 	bic.w	r3, r3, #1
 800af7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3308      	adds	r3, #8
 800af82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af84:	61fa      	str	r2, [r7, #28]
 800af86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af88:	69b9      	ldr	r1, [r7, #24]
 800af8a:	69fa      	ldr	r2, [r7, #28]
 800af8c:	e841 2300 	strex	r3, r2, [r1]
 800af90:	617b      	str	r3, [r7, #20]
   return(result);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1e5      	bne.n	800af64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2220      	movs	r2, #32
 800af9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e011      	b.n	800afd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2220      	movs	r2, #32
 800afb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2220      	movs	r2, #32
 800afb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3758      	adds	r7, #88	@ 0x58
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	603b      	str	r3, [r7, #0]
 800afe4:	4613      	mov	r3, r2
 800afe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afe8:	e04f      	b.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aff0:	d04b      	beq.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aff2:	f7fd fc6f 	bl	80088d4 <HAL_GetTick>
 800aff6:	4602      	mov	r2, r0
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	1ad3      	subs	r3, r2, r3
 800affc:	69ba      	ldr	r2, [r7, #24]
 800affe:	429a      	cmp	r2, r3
 800b000:	d302      	bcc.n	800b008 <UART_WaitOnFlagUntilTimeout+0x30>
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d101      	bne.n	800b00c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b008:	2303      	movs	r3, #3
 800b00a:	e04e      	b.n	800b0aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 0304 	and.w	r3, r3, #4
 800b016:	2b00      	cmp	r3, #0
 800b018:	d037      	beq.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2b80      	cmp	r3, #128	@ 0x80
 800b01e:	d034      	beq.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2b40      	cmp	r3, #64	@ 0x40
 800b024:	d031      	beq.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	69db      	ldr	r3, [r3, #28]
 800b02c:	f003 0308 	and.w	r3, r3, #8
 800b030:	2b08      	cmp	r3, #8
 800b032:	d110      	bne.n	800b056 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2208      	movs	r2, #8
 800b03a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 f838 	bl	800b0b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2208      	movs	r2, #8
 800b046:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e029      	b.n	800b0aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	69db      	ldr	r3, [r3, #28]
 800b05c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b064:	d111      	bne.n	800b08a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b06e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f000 f81e 	bl	800b0b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2220      	movs	r2, #32
 800b07a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e00f      	b.n	800b0aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	69da      	ldr	r2, [r3, #28]
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	4013      	ands	r3, r2
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	429a      	cmp	r2, r3
 800b098:	bf0c      	ite	eq
 800b09a:	2301      	moveq	r3, #1
 800b09c:	2300      	movne	r3, #0
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	79fb      	ldrb	r3, [r7, #7]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d0a0      	beq.n	800afea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	b095      	sub	sp, #84	@ 0x54
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0c2:	e853 3f00 	ldrex	r3, [r3]
 800b0c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0e0:	e841 2300 	strex	r3, r2, [r1]
 800b0e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1e6      	bne.n	800b0ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	3308      	adds	r3, #8
 800b0f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	e853 3f00 	ldrex	r3, [r3]
 800b0fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	f023 0301 	bic.w	r3, r3, #1
 800b102:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3308      	adds	r3, #8
 800b10a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b10c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b10e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b110:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b114:	e841 2300 	strex	r3, r2, [r1]
 800b118:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1e5      	bne.n	800b0ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b124:	2b01      	cmp	r3, #1
 800b126:	d118      	bne.n	800b15a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	e853 3f00 	ldrex	r3, [r3]
 800b134:	60bb      	str	r3, [r7, #8]
   return(result);
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	f023 0310 	bic.w	r3, r3, #16
 800b13c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	461a      	mov	r2, r3
 800b144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b146:	61bb      	str	r3, [r7, #24]
 800b148:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14a:	6979      	ldr	r1, [r7, #20]
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	e841 2300 	strex	r3, r2, [r1]
 800b152:	613b      	str	r3, [r7, #16]
   return(result);
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d1e6      	bne.n	800b128 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2220      	movs	r2, #32
 800b15e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b16e:	bf00      	nop
 800b170:	3754      	adds	r7, #84	@ 0x54
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
	...

0800b17c <_vsiprintf_r>:
 800b17c:	b510      	push	{r4, lr}
 800b17e:	b09a      	sub	sp, #104	@ 0x68
 800b180:	2400      	movs	r4, #0
 800b182:	9100      	str	r1, [sp, #0]
 800b184:	9104      	str	r1, [sp, #16]
 800b186:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b18a:	9105      	str	r1, [sp, #20]
 800b18c:	9102      	str	r1, [sp, #8]
 800b18e:	4905      	ldr	r1, [pc, #20]	@ (800b1a4 <_vsiprintf_r+0x28>)
 800b190:	9103      	str	r1, [sp, #12]
 800b192:	4669      	mov	r1, sp
 800b194:	9419      	str	r4, [sp, #100]	@ 0x64
 800b196:	f000 f8a1 	bl	800b2dc <_svfiprintf_r>
 800b19a:	9b00      	ldr	r3, [sp, #0]
 800b19c:	701c      	strb	r4, [r3, #0]
 800b19e:	b01a      	add	sp, #104	@ 0x68
 800b1a0:	bd10      	pop	{r4, pc}
 800b1a2:	bf00      	nop
 800b1a4:	ffff0208 	.word	0xffff0208

0800b1a8 <vsiprintf>:
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	460a      	mov	r2, r1
 800b1ac:	4601      	mov	r1, r0
 800b1ae:	4802      	ldr	r0, [pc, #8]	@ (800b1b8 <vsiprintf+0x10>)
 800b1b0:	6800      	ldr	r0, [r0, #0]
 800b1b2:	f7ff bfe3 	b.w	800b17c <_vsiprintf_r>
 800b1b6:	bf00      	nop
 800b1b8:	2000000c 	.word	0x2000000c

0800b1bc <memset>:
 800b1bc:	4402      	add	r2, r0
 800b1be:	4603      	mov	r3, r0
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d100      	bne.n	800b1c6 <memset+0xa>
 800b1c4:	4770      	bx	lr
 800b1c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ca:	e7f9      	b.n	800b1c0 <memset+0x4>

0800b1cc <__errno>:
 800b1cc:	4b01      	ldr	r3, [pc, #4]	@ (800b1d4 <__errno+0x8>)
 800b1ce:	6818      	ldr	r0, [r3, #0]
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	2000000c 	.word	0x2000000c

0800b1d8 <__libc_init_array>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	4d0d      	ldr	r5, [pc, #52]	@ (800b210 <__libc_init_array+0x38>)
 800b1dc:	4c0d      	ldr	r4, [pc, #52]	@ (800b214 <__libc_init_array+0x3c>)
 800b1de:	1b64      	subs	r4, r4, r5
 800b1e0:	10a4      	asrs	r4, r4, #2
 800b1e2:	2600      	movs	r6, #0
 800b1e4:	42a6      	cmp	r6, r4
 800b1e6:	d109      	bne.n	800b1fc <__libc_init_array+0x24>
 800b1e8:	4d0b      	ldr	r5, [pc, #44]	@ (800b218 <__libc_init_array+0x40>)
 800b1ea:	4c0c      	ldr	r4, [pc, #48]	@ (800b21c <__libc_init_array+0x44>)
 800b1ec:	f000 fc64 	bl	800bab8 <_init>
 800b1f0:	1b64      	subs	r4, r4, r5
 800b1f2:	10a4      	asrs	r4, r4, #2
 800b1f4:	2600      	movs	r6, #0
 800b1f6:	42a6      	cmp	r6, r4
 800b1f8:	d105      	bne.n	800b206 <__libc_init_array+0x2e>
 800b1fa:	bd70      	pop	{r4, r5, r6, pc}
 800b1fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b200:	4798      	blx	r3
 800b202:	3601      	adds	r6, #1
 800b204:	e7ee      	b.n	800b1e4 <__libc_init_array+0xc>
 800b206:	f855 3b04 	ldr.w	r3, [r5], #4
 800b20a:	4798      	blx	r3
 800b20c:	3601      	adds	r6, #1
 800b20e:	e7f2      	b.n	800b1f6 <__libc_init_array+0x1e>
 800b210:	0800bb64 	.word	0x0800bb64
 800b214:	0800bb64 	.word	0x0800bb64
 800b218:	0800bb64 	.word	0x0800bb64
 800b21c:	0800bb68 	.word	0x0800bb68

0800b220 <__retarget_lock_acquire_recursive>:
 800b220:	4770      	bx	lr

0800b222 <__retarget_lock_release_recursive>:
 800b222:	4770      	bx	lr

0800b224 <__ssputs_r>:
 800b224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b228:	688e      	ldr	r6, [r1, #8]
 800b22a:	461f      	mov	r7, r3
 800b22c:	42be      	cmp	r6, r7
 800b22e:	680b      	ldr	r3, [r1, #0]
 800b230:	4682      	mov	sl, r0
 800b232:	460c      	mov	r4, r1
 800b234:	4690      	mov	r8, r2
 800b236:	d82d      	bhi.n	800b294 <__ssputs_r+0x70>
 800b238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b23c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b240:	d026      	beq.n	800b290 <__ssputs_r+0x6c>
 800b242:	6965      	ldr	r5, [r4, #20]
 800b244:	6909      	ldr	r1, [r1, #16]
 800b246:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b24a:	eba3 0901 	sub.w	r9, r3, r1
 800b24e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b252:	1c7b      	adds	r3, r7, #1
 800b254:	444b      	add	r3, r9
 800b256:	106d      	asrs	r5, r5, #1
 800b258:	429d      	cmp	r5, r3
 800b25a:	bf38      	it	cc
 800b25c:	461d      	movcc	r5, r3
 800b25e:	0553      	lsls	r3, r2, #21
 800b260:	d527      	bpl.n	800b2b2 <__ssputs_r+0x8e>
 800b262:	4629      	mov	r1, r5
 800b264:	f000 f958 	bl	800b518 <_malloc_r>
 800b268:	4606      	mov	r6, r0
 800b26a:	b360      	cbz	r0, 800b2c6 <__ssputs_r+0xa2>
 800b26c:	6921      	ldr	r1, [r4, #16]
 800b26e:	464a      	mov	r2, r9
 800b270:	f000 fbc2 	bl	800b9f8 <memcpy>
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b27a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b27e:	81a3      	strh	r3, [r4, #12]
 800b280:	6126      	str	r6, [r4, #16]
 800b282:	6165      	str	r5, [r4, #20]
 800b284:	444e      	add	r6, r9
 800b286:	eba5 0509 	sub.w	r5, r5, r9
 800b28a:	6026      	str	r6, [r4, #0]
 800b28c:	60a5      	str	r5, [r4, #8]
 800b28e:	463e      	mov	r6, r7
 800b290:	42be      	cmp	r6, r7
 800b292:	d900      	bls.n	800b296 <__ssputs_r+0x72>
 800b294:	463e      	mov	r6, r7
 800b296:	6820      	ldr	r0, [r4, #0]
 800b298:	4632      	mov	r2, r6
 800b29a:	4641      	mov	r1, r8
 800b29c:	f000 fb82 	bl	800b9a4 <memmove>
 800b2a0:	68a3      	ldr	r3, [r4, #8]
 800b2a2:	1b9b      	subs	r3, r3, r6
 800b2a4:	60a3      	str	r3, [r4, #8]
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	4433      	add	r3, r6
 800b2aa:	6023      	str	r3, [r4, #0]
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b2:	462a      	mov	r2, r5
 800b2b4:	f000 fb48 	bl	800b948 <_realloc_r>
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d1e0      	bne.n	800b280 <__ssputs_r+0x5c>
 800b2be:	6921      	ldr	r1, [r4, #16]
 800b2c0:	4650      	mov	r0, sl
 800b2c2:	f000 fba7 	bl	800ba14 <_free_r>
 800b2c6:	230c      	movs	r3, #12
 800b2c8:	f8ca 3000 	str.w	r3, [sl]
 800b2cc:	89a3      	ldrh	r3, [r4, #12]
 800b2ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2d2:	81a3      	strh	r3, [r4, #12]
 800b2d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2d8:	e7e9      	b.n	800b2ae <__ssputs_r+0x8a>
	...

0800b2dc <_svfiprintf_r>:
 800b2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e0:	4698      	mov	r8, r3
 800b2e2:	898b      	ldrh	r3, [r1, #12]
 800b2e4:	061b      	lsls	r3, r3, #24
 800b2e6:	b09d      	sub	sp, #116	@ 0x74
 800b2e8:	4607      	mov	r7, r0
 800b2ea:	460d      	mov	r5, r1
 800b2ec:	4614      	mov	r4, r2
 800b2ee:	d510      	bpl.n	800b312 <_svfiprintf_r+0x36>
 800b2f0:	690b      	ldr	r3, [r1, #16]
 800b2f2:	b973      	cbnz	r3, 800b312 <_svfiprintf_r+0x36>
 800b2f4:	2140      	movs	r1, #64	@ 0x40
 800b2f6:	f000 f90f 	bl	800b518 <_malloc_r>
 800b2fa:	6028      	str	r0, [r5, #0]
 800b2fc:	6128      	str	r0, [r5, #16]
 800b2fe:	b930      	cbnz	r0, 800b30e <_svfiprintf_r+0x32>
 800b300:	230c      	movs	r3, #12
 800b302:	603b      	str	r3, [r7, #0]
 800b304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b308:	b01d      	add	sp, #116	@ 0x74
 800b30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30e:	2340      	movs	r3, #64	@ 0x40
 800b310:	616b      	str	r3, [r5, #20]
 800b312:	2300      	movs	r3, #0
 800b314:	9309      	str	r3, [sp, #36]	@ 0x24
 800b316:	2320      	movs	r3, #32
 800b318:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b31c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b320:	2330      	movs	r3, #48	@ 0x30
 800b322:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b4c0 <_svfiprintf_r+0x1e4>
 800b326:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b32a:	f04f 0901 	mov.w	r9, #1
 800b32e:	4623      	mov	r3, r4
 800b330:	469a      	mov	sl, r3
 800b332:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b336:	b10a      	cbz	r2, 800b33c <_svfiprintf_r+0x60>
 800b338:	2a25      	cmp	r2, #37	@ 0x25
 800b33a:	d1f9      	bne.n	800b330 <_svfiprintf_r+0x54>
 800b33c:	ebba 0b04 	subs.w	fp, sl, r4
 800b340:	d00b      	beq.n	800b35a <_svfiprintf_r+0x7e>
 800b342:	465b      	mov	r3, fp
 800b344:	4622      	mov	r2, r4
 800b346:	4629      	mov	r1, r5
 800b348:	4638      	mov	r0, r7
 800b34a:	f7ff ff6b 	bl	800b224 <__ssputs_r>
 800b34e:	3001      	adds	r0, #1
 800b350:	f000 80a7 	beq.w	800b4a2 <_svfiprintf_r+0x1c6>
 800b354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b356:	445a      	add	r2, fp
 800b358:	9209      	str	r2, [sp, #36]	@ 0x24
 800b35a:	f89a 3000 	ldrb.w	r3, [sl]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f000 809f 	beq.w	800b4a2 <_svfiprintf_r+0x1c6>
 800b364:	2300      	movs	r3, #0
 800b366:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b36a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b36e:	f10a 0a01 	add.w	sl, sl, #1
 800b372:	9304      	str	r3, [sp, #16]
 800b374:	9307      	str	r3, [sp, #28]
 800b376:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b37a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b37c:	4654      	mov	r4, sl
 800b37e:	2205      	movs	r2, #5
 800b380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b384:	484e      	ldr	r0, [pc, #312]	@ (800b4c0 <_svfiprintf_r+0x1e4>)
 800b386:	f7fc ff33 	bl	80081f0 <memchr>
 800b38a:	9a04      	ldr	r2, [sp, #16]
 800b38c:	b9d8      	cbnz	r0, 800b3c6 <_svfiprintf_r+0xea>
 800b38e:	06d0      	lsls	r0, r2, #27
 800b390:	bf44      	itt	mi
 800b392:	2320      	movmi	r3, #32
 800b394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b398:	0711      	lsls	r1, r2, #28
 800b39a:	bf44      	itt	mi
 800b39c:	232b      	movmi	r3, #43	@ 0x2b
 800b39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b3a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3a8:	d015      	beq.n	800b3d6 <_svfiprintf_r+0xfa>
 800b3aa:	9a07      	ldr	r2, [sp, #28]
 800b3ac:	4654      	mov	r4, sl
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	f04f 0c0a 	mov.w	ip, #10
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3ba:	3b30      	subs	r3, #48	@ 0x30
 800b3bc:	2b09      	cmp	r3, #9
 800b3be:	d94b      	bls.n	800b458 <_svfiprintf_r+0x17c>
 800b3c0:	b1b0      	cbz	r0, 800b3f0 <_svfiprintf_r+0x114>
 800b3c2:	9207      	str	r2, [sp, #28]
 800b3c4:	e014      	b.n	800b3f0 <_svfiprintf_r+0x114>
 800b3c6:	eba0 0308 	sub.w	r3, r0, r8
 800b3ca:	fa09 f303 	lsl.w	r3, r9, r3
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	9304      	str	r3, [sp, #16]
 800b3d2:	46a2      	mov	sl, r4
 800b3d4:	e7d2      	b.n	800b37c <_svfiprintf_r+0xa0>
 800b3d6:	9b03      	ldr	r3, [sp, #12]
 800b3d8:	1d19      	adds	r1, r3, #4
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	9103      	str	r1, [sp, #12]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	bfbb      	ittet	lt
 800b3e2:	425b      	neglt	r3, r3
 800b3e4:	f042 0202 	orrlt.w	r2, r2, #2
 800b3e8:	9307      	strge	r3, [sp, #28]
 800b3ea:	9307      	strlt	r3, [sp, #28]
 800b3ec:	bfb8      	it	lt
 800b3ee:	9204      	strlt	r2, [sp, #16]
 800b3f0:	7823      	ldrb	r3, [r4, #0]
 800b3f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3f4:	d10a      	bne.n	800b40c <_svfiprintf_r+0x130>
 800b3f6:	7863      	ldrb	r3, [r4, #1]
 800b3f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3fa:	d132      	bne.n	800b462 <_svfiprintf_r+0x186>
 800b3fc:	9b03      	ldr	r3, [sp, #12]
 800b3fe:	1d1a      	adds	r2, r3, #4
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	9203      	str	r2, [sp, #12]
 800b404:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b408:	3402      	adds	r4, #2
 800b40a:	9305      	str	r3, [sp, #20]
 800b40c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b4d0 <_svfiprintf_r+0x1f4>
 800b410:	7821      	ldrb	r1, [r4, #0]
 800b412:	2203      	movs	r2, #3
 800b414:	4650      	mov	r0, sl
 800b416:	f7fc feeb 	bl	80081f0 <memchr>
 800b41a:	b138      	cbz	r0, 800b42c <_svfiprintf_r+0x150>
 800b41c:	9b04      	ldr	r3, [sp, #16]
 800b41e:	eba0 000a 	sub.w	r0, r0, sl
 800b422:	2240      	movs	r2, #64	@ 0x40
 800b424:	4082      	lsls	r2, r0
 800b426:	4313      	orrs	r3, r2
 800b428:	3401      	adds	r4, #1
 800b42a:	9304      	str	r3, [sp, #16]
 800b42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b430:	4824      	ldr	r0, [pc, #144]	@ (800b4c4 <_svfiprintf_r+0x1e8>)
 800b432:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b436:	2206      	movs	r2, #6
 800b438:	f7fc feda 	bl	80081f0 <memchr>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d036      	beq.n	800b4ae <_svfiprintf_r+0x1d2>
 800b440:	4b21      	ldr	r3, [pc, #132]	@ (800b4c8 <_svfiprintf_r+0x1ec>)
 800b442:	bb1b      	cbnz	r3, 800b48c <_svfiprintf_r+0x1b0>
 800b444:	9b03      	ldr	r3, [sp, #12]
 800b446:	3307      	adds	r3, #7
 800b448:	f023 0307 	bic.w	r3, r3, #7
 800b44c:	3308      	adds	r3, #8
 800b44e:	9303      	str	r3, [sp, #12]
 800b450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b452:	4433      	add	r3, r6
 800b454:	9309      	str	r3, [sp, #36]	@ 0x24
 800b456:	e76a      	b.n	800b32e <_svfiprintf_r+0x52>
 800b458:	fb0c 3202 	mla	r2, ip, r2, r3
 800b45c:	460c      	mov	r4, r1
 800b45e:	2001      	movs	r0, #1
 800b460:	e7a8      	b.n	800b3b4 <_svfiprintf_r+0xd8>
 800b462:	2300      	movs	r3, #0
 800b464:	3401      	adds	r4, #1
 800b466:	9305      	str	r3, [sp, #20]
 800b468:	4619      	mov	r1, r3
 800b46a:	f04f 0c0a 	mov.w	ip, #10
 800b46e:	4620      	mov	r0, r4
 800b470:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b474:	3a30      	subs	r2, #48	@ 0x30
 800b476:	2a09      	cmp	r2, #9
 800b478:	d903      	bls.n	800b482 <_svfiprintf_r+0x1a6>
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d0c6      	beq.n	800b40c <_svfiprintf_r+0x130>
 800b47e:	9105      	str	r1, [sp, #20]
 800b480:	e7c4      	b.n	800b40c <_svfiprintf_r+0x130>
 800b482:	fb0c 2101 	mla	r1, ip, r1, r2
 800b486:	4604      	mov	r4, r0
 800b488:	2301      	movs	r3, #1
 800b48a:	e7f0      	b.n	800b46e <_svfiprintf_r+0x192>
 800b48c:	ab03      	add	r3, sp, #12
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	462a      	mov	r2, r5
 800b492:	4b0e      	ldr	r3, [pc, #56]	@ (800b4cc <_svfiprintf_r+0x1f0>)
 800b494:	a904      	add	r1, sp, #16
 800b496:	4638      	mov	r0, r7
 800b498:	f3af 8000 	nop.w
 800b49c:	1c42      	adds	r2, r0, #1
 800b49e:	4606      	mov	r6, r0
 800b4a0:	d1d6      	bne.n	800b450 <_svfiprintf_r+0x174>
 800b4a2:	89ab      	ldrh	r3, [r5, #12]
 800b4a4:	065b      	lsls	r3, r3, #25
 800b4a6:	f53f af2d 	bmi.w	800b304 <_svfiprintf_r+0x28>
 800b4aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4ac:	e72c      	b.n	800b308 <_svfiprintf_r+0x2c>
 800b4ae:	ab03      	add	r3, sp, #12
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	462a      	mov	r2, r5
 800b4b4:	4b05      	ldr	r3, [pc, #20]	@ (800b4cc <_svfiprintf_r+0x1f0>)
 800b4b6:	a904      	add	r1, sp, #16
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	f000 f91b 	bl	800b6f4 <_printf_i>
 800b4be:	e7ed      	b.n	800b49c <_svfiprintf_r+0x1c0>
 800b4c0:	0800bb28 	.word	0x0800bb28
 800b4c4:	0800bb32 	.word	0x0800bb32
 800b4c8:	00000000 	.word	0x00000000
 800b4cc:	0800b225 	.word	0x0800b225
 800b4d0:	0800bb2e 	.word	0x0800bb2e

0800b4d4 <sbrk_aligned>:
 800b4d4:	b570      	push	{r4, r5, r6, lr}
 800b4d6:	4e0f      	ldr	r6, [pc, #60]	@ (800b514 <sbrk_aligned+0x40>)
 800b4d8:	460c      	mov	r4, r1
 800b4da:	6831      	ldr	r1, [r6, #0]
 800b4dc:	4605      	mov	r5, r0
 800b4de:	b911      	cbnz	r1, 800b4e6 <sbrk_aligned+0x12>
 800b4e0:	f000 fa7a 	bl	800b9d8 <_sbrk_r>
 800b4e4:	6030      	str	r0, [r6, #0]
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	f000 fa75 	bl	800b9d8 <_sbrk_r>
 800b4ee:	1c43      	adds	r3, r0, #1
 800b4f0:	d103      	bne.n	800b4fa <sbrk_aligned+0x26>
 800b4f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	bd70      	pop	{r4, r5, r6, pc}
 800b4fa:	1cc4      	adds	r4, r0, #3
 800b4fc:	f024 0403 	bic.w	r4, r4, #3
 800b500:	42a0      	cmp	r0, r4
 800b502:	d0f8      	beq.n	800b4f6 <sbrk_aligned+0x22>
 800b504:	1a21      	subs	r1, r4, r0
 800b506:	4628      	mov	r0, r5
 800b508:	f000 fa66 	bl	800b9d8 <_sbrk_r>
 800b50c:	3001      	adds	r0, #1
 800b50e:	d1f2      	bne.n	800b4f6 <sbrk_aligned+0x22>
 800b510:	e7ef      	b.n	800b4f2 <sbrk_aligned+0x1e>
 800b512:	bf00      	nop
 800b514:	200002cc 	.word	0x200002cc

0800b518 <_malloc_r>:
 800b518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b51c:	1ccd      	adds	r5, r1, #3
 800b51e:	f025 0503 	bic.w	r5, r5, #3
 800b522:	3508      	adds	r5, #8
 800b524:	2d0c      	cmp	r5, #12
 800b526:	bf38      	it	cc
 800b528:	250c      	movcc	r5, #12
 800b52a:	2d00      	cmp	r5, #0
 800b52c:	4606      	mov	r6, r0
 800b52e:	db01      	blt.n	800b534 <_malloc_r+0x1c>
 800b530:	42a9      	cmp	r1, r5
 800b532:	d904      	bls.n	800b53e <_malloc_r+0x26>
 800b534:	230c      	movs	r3, #12
 800b536:	6033      	str	r3, [r6, #0]
 800b538:	2000      	movs	r0, #0
 800b53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b53e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b614 <_malloc_r+0xfc>
 800b542:	f000 f9f5 	bl	800b930 <__malloc_lock>
 800b546:	f8d8 3000 	ldr.w	r3, [r8]
 800b54a:	461c      	mov	r4, r3
 800b54c:	bb44      	cbnz	r4, 800b5a0 <_malloc_r+0x88>
 800b54e:	4629      	mov	r1, r5
 800b550:	4630      	mov	r0, r6
 800b552:	f7ff ffbf 	bl	800b4d4 <sbrk_aligned>
 800b556:	1c43      	adds	r3, r0, #1
 800b558:	4604      	mov	r4, r0
 800b55a:	d158      	bne.n	800b60e <_malloc_r+0xf6>
 800b55c:	f8d8 4000 	ldr.w	r4, [r8]
 800b560:	4627      	mov	r7, r4
 800b562:	2f00      	cmp	r7, #0
 800b564:	d143      	bne.n	800b5ee <_malloc_r+0xd6>
 800b566:	2c00      	cmp	r4, #0
 800b568:	d04b      	beq.n	800b602 <_malloc_r+0xea>
 800b56a:	6823      	ldr	r3, [r4, #0]
 800b56c:	4639      	mov	r1, r7
 800b56e:	4630      	mov	r0, r6
 800b570:	eb04 0903 	add.w	r9, r4, r3
 800b574:	f000 fa30 	bl	800b9d8 <_sbrk_r>
 800b578:	4581      	cmp	r9, r0
 800b57a:	d142      	bne.n	800b602 <_malloc_r+0xea>
 800b57c:	6821      	ldr	r1, [r4, #0]
 800b57e:	1a6d      	subs	r5, r5, r1
 800b580:	4629      	mov	r1, r5
 800b582:	4630      	mov	r0, r6
 800b584:	f7ff ffa6 	bl	800b4d4 <sbrk_aligned>
 800b588:	3001      	adds	r0, #1
 800b58a:	d03a      	beq.n	800b602 <_malloc_r+0xea>
 800b58c:	6823      	ldr	r3, [r4, #0]
 800b58e:	442b      	add	r3, r5
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	f8d8 3000 	ldr.w	r3, [r8]
 800b596:	685a      	ldr	r2, [r3, #4]
 800b598:	bb62      	cbnz	r2, 800b5f4 <_malloc_r+0xdc>
 800b59a:	f8c8 7000 	str.w	r7, [r8]
 800b59e:	e00f      	b.n	800b5c0 <_malloc_r+0xa8>
 800b5a0:	6822      	ldr	r2, [r4, #0]
 800b5a2:	1b52      	subs	r2, r2, r5
 800b5a4:	d420      	bmi.n	800b5e8 <_malloc_r+0xd0>
 800b5a6:	2a0b      	cmp	r2, #11
 800b5a8:	d917      	bls.n	800b5da <_malloc_r+0xc2>
 800b5aa:	1961      	adds	r1, r4, r5
 800b5ac:	42a3      	cmp	r3, r4
 800b5ae:	6025      	str	r5, [r4, #0]
 800b5b0:	bf18      	it	ne
 800b5b2:	6059      	strne	r1, [r3, #4]
 800b5b4:	6863      	ldr	r3, [r4, #4]
 800b5b6:	bf08      	it	eq
 800b5b8:	f8c8 1000 	streq.w	r1, [r8]
 800b5bc:	5162      	str	r2, [r4, r5]
 800b5be:	604b      	str	r3, [r1, #4]
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f000 f9bb 	bl	800b93c <__malloc_unlock>
 800b5c6:	f104 000b 	add.w	r0, r4, #11
 800b5ca:	1d23      	adds	r3, r4, #4
 800b5cc:	f020 0007 	bic.w	r0, r0, #7
 800b5d0:	1ac2      	subs	r2, r0, r3
 800b5d2:	bf1c      	itt	ne
 800b5d4:	1a1b      	subne	r3, r3, r0
 800b5d6:	50a3      	strne	r3, [r4, r2]
 800b5d8:	e7af      	b.n	800b53a <_malloc_r+0x22>
 800b5da:	6862      	ldr	r2, [r4, #4]
 800b5dc:	42a3      	cmp	r3, r4
 800b5de:	bf0c      	ite	eq
 800b5e0:	f8c8 2000 	streq.w	r2, [r8]
 800b5e4:	605a      	strne	r2, [r3, #4]
 800b5e6:	e7eb      	b.n	800b5c0 <_malloc_r+0xa8>
 800b5e8:	4623      	mov	r3, r4
 800b5ea:	6864      	ldr	r4, [r4, #4]
 800b5ec:	e7ae      	b.n	800b54c <_malloc_r+0x34>
 800b5ee:	463c      	mov	r4, r7
 800b5f0:	687f      	ldr	r7, [r7, #4]
 800b5f2:	e7b6      	b.n	800b562 <_malloc_r+0x4a>
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	42a3      	cmp	r3, r4
 800b5fa:	d1fb      	bne.n	800b5f4 <_malloc_r+0xdc>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	6053      	str	r3, [r2, #4]
 800b600:	e7de      	b.n	800b5c0 <_malloc_r+0xa8>
 800b602:	230c      	movs	r3, #12
 800b604:	6033      	str	r3, [r6, #0]
 800b606:	4630      	mov	r0, r6
 800b608:	f000 f998 	bl	800b93c <__malloc_unlock>
 800b60c:	e794      	b.n	800b538 <_malloc_r+0x20>
 800b60e:	6005      	str	r5, [r0, #0]
 800b610:	e7d6      	b.n	800b5c0 <_malloc_r+0xa8>
 800b612:	bf00      	nop
 800b614:	200002d0 	.word	0x200002d0

0800b618 <_printf_common>:
 800b618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b61c:	4616      	mov	r6, r2
 800b61e:	4698      	mov	r8, r3
 800b620:	688a      	ldr	r2, [r1, #8]
 800b622:	690b      	ldr	r3, [r1, #16]
 800b624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b628:	4293      	cmp	r3, r2
 800b62a:	bfb8      	it	lt
 800b62c:	4613      	movlt	r3, r2
 800b62e:	6033      	str	r3, [r6, #0]
 800b630:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b634:	4607      	mov	r7, r0
 800b636:	460c      	mov	r4, r1
 800b638:	b10a      	cbz	r2, 800b63e <_printf_common+0x26>
 800b63a:	3301      	adds	r3, #1
 800b63c:	6033      	str	r3, [r6, #0]
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	0699      	lsls	r1, r3, #26
 800b642:	bf42      	ittt	mi
 800b644:	6833      	ldrmi	r3, [r6, #0]
 800b646:	3302      	addmi	r3, #2
 800b648:	6033      	strmi	r3, [r6, #0]
 800b64a:	6825      	ldr	r5, [r4, #0]
 800b64c:	f015 0506 	ands.w	r5, r5, #6
 800b650:	d106      	bne.n	800b660 <_printf_common+0x48>
 800b652:	f104 0a19 	add.w	sl, r4, #25
 800b656:	68e3      	ldr	r3, [r4, #12]
 800b658:	6832      	ldr	r2, [r6, #0]
 800b65a:	1a9b      	subs	r3, r3, r2
 800b65c:	42ab      	cmp	r3, r5
 800b65e:	dc26      	bgt.n	800b6ae <_printf_common+0x96>
 800b660:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b664:	6822      	ldr	r2, [r4, #0]
 800b666:	3b00      	subs	r3, #0
 800b668:	bf18      	it	ne
 800b66a:	2301      	movne	r3, #1
 800b66c:	0692      	lsls	r2, r2, #26
 800b66e:	d42b      	bmi.n	800b6c8 <_printf_common+0xb0>
 800b670:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b674:	4641      	mov	r1, r8
 800b676:	4638      	mov	r0, r7
 800b678:	47c8      	blx	r9
 800b67a:	3001      	adds	r0, #1
 800b67c:	d01e      	beq.n	800b6bc <_printf_common+0xa4>
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	6922      	ldr	r2, [r4, #16]
 800b682:	f003 0306 	and.w	r3, r3, #6
 800b686:	2b04      	cmp	r3, #4
 800b688:	bf02      	ittt	eq
 800b68a:	68e5      	ldreq	r5, [r4, #12]
 800b68c:	6833      	ldreq	r3, [r6, #0]
 800b68e:	1aed      	subeq	r5, r5, r3
 800b690:	68a3      	ldr	r3, [r4, #8]
 800b692:	bf0c      	ite	eq
 800b694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b698:	2500      	movne	r5, #0
 800b69a:	4293      	cmp	r3, r2
 800b69c:	bfc4      	itt	gt
 800b69e:	1a9b      	subgt	r3, r3, r2
 800b6a0:	18ed      	addgt	r5, r5, r3
 800b6a2:	2600      	movs	r6, #0
 800b6a4:	341a      	adds	r4, #26
 800b6a6:	42b5      	cmp	r5, r6
 800b6a8:	d11a      	bne.n	800b6e0 <_printf_common+0xc8>
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	e008      	b.n	800b6c0 <_printf_common+0xa8>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	4652      	mov	r2, sl
 800b6b2:	4641      	mov	r1, r8
 800b6b4:	4638      	mov	r0, r7
 800b6b6:	47c8      	blx	r9
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	d103      	bne.n	800b6c4 <_printf_common+0xac>
 800b6bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c4:	3501      	adds	r5, #1
 800b6c6:	e7c6      	b.n	800b656 <_printf_common+0x3e>
 800b6c8:	18e1      	adds	r1, r4, r3
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	2030      	movs	r0, #48	@ 0x30
 800b6ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6d2:	4422      	add	r2, r4
 800b6d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6dc:	3302      	adds	r3, #2
 800b6de:	e7c7      	b.n	800b670 <_printf_common+0x58>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	4622      	mov	r2, r4
 800b6e4:	4641      	mov	r1, r8
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	47c8      	blx	r9
 800b6ea:	3001      	adds	r0, #1
 800b6ec:	d0e6      	beq.n	800b6bc <_printf_common+0xa4>
 800b6ee:	3601      	adds	r6, #1
 800b6f0:	e7d9      	b.n	800b6a6 <_printf_common+0x8e>
	...

0800b6f4 <_printf_i>:
 800b6f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f8:	7e0f      	ldrb	r7, [r1, #24]
 800b6fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6fc:	2f78      	cmp	r7, #120	@ 0x78
 800b6fe:	4691      	mov	r9, r2
 800b700:	4680      	mov	r8, r0
 800b702:	460c      	mov	r4, r1
 800b704:	469a      	mov	sl, r3
 800b706:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b70a:	d807      	bhi.n	800b71c <_printf_i+0x28>
 800b70c:	2f62      	cmp	r7, #98	@ 0x62
 800b70e:	d80a      	bhi.n	800b726 <_printf_i+0x32>
 800b710:	2f00      	cmp	r7, #0
 800b712:	f000 80d1 	beq.w	800b8b8 <_printf_i+0x1c4>
 800b716:	2f58      	cmp	r7, #88	@ 0x58
 800b718:	f000 80b8 	beq.w	800b88c <_printf_i+0x198>
 800b71c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b720:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b724:	e03a      	b.n	800b79c <_printf_i+0xa8>
 800b726:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b72a:	2b15      	cmp	r3, #21
 800b72c:	d8f6      	bhi.n	800b71c <_printf_i+0x28>
 800b72e:	a101      	add	r1, pc, #4	@ (adr r1, 800b734 <_printf_i+0x40>)
 800b730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b734:	0800b78d 	.word	0x0800b78d
 800b738:	0800b7a1 	.word	0x0800b7a1
 800b73c:	0800b71d 	.word	0x0800b71d
 800b740:	0800b71d 	.word	0x0800b71d
 800b744:	0800b71d 	.word	0x0800b71d
 800b748:	0800b71d 	.word	0x0800b71d
 800b74c:	0800b7a1 	.word	0x0800b7a1
 800b750:	0800b71d 	.word	0x0800b71d
 800b754:	0800b71d 	.word	0x0800b71d
 800b758:	0800b71d 	.word	0x0800b71d
 800b75c:	0800b71d 	.word	0x0800b71d
 800b760:	0800b89f 	.word	0x0800b89f
 800b764:	0800b7cb 	.word	0x0800b7cb
 800b768:	0800b859 	.word	0x0800b859
 800b76c:	0800b71d 	.word	0x0800b71d
 800b770:	0800b71d 	.word	0x0800b71d
 800b774:	0800b8c1 	.word	0x0800b8c1
 800b778:	0800b71d 	.word	0x0800b71d
 800b77c:	0800b7cb 	.word	0x0800b7cb
 800b780:	0800b71d 	.word	0x0800b71d
 800b784:	0800b71d 	.word	0x0800b71d
 800b788:	0800b861 	.word	0x0800b861
 800b78c:	6833      	ldr	r3, [r6, #0]
 800b78e:	1d1a      	adds	r2, r3, #4
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6032      	str	r2, [r6, #0]
 800b794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b798:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b79c:	2301      	movs	r3, #1
 800b79e:	e09c      	b.n	800b8da <_printf_i+0x1e6>
 800b7a0:	6833      	ldr	r3, [r6, #0]
 800b7a2:	6820      	ldr	r0, [r4, #0]
 800b7a4:	1d19      	adds	r1, r3, #4
 800b7a6:	6031      	str	r1, [r6, #0]
 800b7a8:	0606      	lsls	r6, r0, #24
 800b7aa:	d501      	bpl.n	800b7b0 <_printf_i+0xbc>
 800b7ac:	681d      	ldr	r5, [r3, #0]
 800b7ae:	e003      	b.n	800b7b8 <_printf_i+0xc4>
 800b7b0:	0645      	lsls	r5, r0, #25
 800b7b2:	d5fb      	bpl.n	800b7ac <_printf_i+0xb8>
 800b7b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7b8:	2d00      	cmp	r5, #0
 800b7ba:	da03      	bge.n	800b7c4 <_printf_i+0xd0>
 800b7bc:	232d      	movs	r3, #45	@ 0x2d
 800b7be:	426d      	negs	r5, r5
 800b7c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7c4:	4858      	ldr	r0, [pc, #352]	@ (800b928 <_printf_i+0x234>)
 800b7c6:	230a      	movs	r3, #10
 800b7c8:	e011      	b.n	800b7ee <_printf_i+0xfa>
 800b7ca:	6821      	ldr	r1, [r4, #0]
 800b7cc:	6833      	ldr	r3, [r6, #0]
 800b7ce:	0608      	lsls	r0, r1, #24
 800b7d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7d4:	d402      	bmi.n	800b7dc <_printf_i+0xe8>
 800b7d6:	0649      	lsls	r1, r1, #25
 800b7d8:	bf48      	it	mi
 800b7da:	b2ad      	uxthmi	r5, r5
 800b7dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7de:	4852      	ldr	r0, [pc, #328]	@ (800b928 <_printf_i+0x234>)
 800b7e0:	6033      	str	r3, [r6, #0]
 800b7e2:	bf14      	ite	ne
 800b7e4:	230a      	movne	r3, #10
 800b7e6:	2308      	moveq	r3, #8
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7ee:	6866      	ldr	r6, [r4, #4]
 800b7f0:	60a6      	str	r6, [r4, #8]
 800b7f2:	2e00      	cmp	r6, #0
 800b7f4:	db05      	blt.n	800b802 <_printf_i+0x10e>
 800b7f6:	6821      	ldr	r1, [r4, #0]
 800b7f8:	432e      	orrs	r6, r5
 800b7fa:	f021 0104 	bic.w	r1, r1, #4
 800b7fe:	6021      	str	r1, [r4, #0]
 800b800:	d04b      	beq.n	800b89a <_printf_i+0x1a6>
 800b802:	4616      	mov	r6, r2
 800b804:	fbb5 f1f3 	udiv	r1, r5, r3
 800b808:	fb03 5711 	mls	r7, r3, r1, r5
 800b80c:	5dc7      	ldrb	r7, [r0, r7]
 800b80e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b812:	462f      	mov	r7, r5
 800b814:	42bb      	cmp	r3, r7
 800b816:	460d      	mov	r5, r1
 800b818:	d9f4      	bls.n	800b804 <_printf_i+0x110>
 800b81a:	2b08      	cmp	r3, #8
 800b81c:	d10b      	bne.n	800b836 <_printf_i+0x142>
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	07df      	lsls	r7, r3, #31
 800b822:	d508      	bpl.n	800b836 <_printf_i+0x142>
 800b824:	6923      	ldr	r3, [r4, #16]
 800b826:	6861      	ldr	r1, [r4, #4]
 800b828:	4299      	cmp	r1, r3
 800b82a:	bfde      	ittt	le
 800b82c:	2330      	movle	r3, #48	@ 0x30
 800b82e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b832:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b836:	1b92      	subs	r2, r2, r6
 800b838:	6122      	str	r2, [r4, #16]
 800b83a:	f8cd a000 	str.w	sl, [sp]
 800b83e:	464b      	mov	r3, r9
 800b840:	aa03      	add	r2, sp, #12
 800b842:	4621      	mov	r1, r4
 800b844:	4640      	mov	r0, r8
 800b846:	f7ff fee7 	bl	800b618 <_printf_common>
 800b84a:	3001      	adds	r0, #1
 800b84c:	d14a      	bne.n	800b8e4 <_printf_i+0x1f0>
 800b84e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b852:	b004      	add	sp, #16
 800b854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	f043 0320 	orr.w	r3, r3, #32
 800b85e:	6023      	str	r3, [r4, #0]
 800b860:	4832      	ldr	r0, [pc, #200]	@ (800b92c <_printf_i+0x238>)
 800b862:	2778      	movs	r7, #120	@ 0x78
 800b864:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	6831      	ldr	r1, [r6, #0]
 800b86c:	061f      	lsls	r7, r3, #24
 800b86e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b872:	d402      	bmi.n	800b87a <_printf_i+0x186>
 800b874:	065f      	lsls	r7, r3, #25
 800b876:	bf48      	it	mi
 800b878:	b2ad      	uxthmi	r5, r5
 800b87a:	6031      	str	r1, [r6, #0]
 800b87c:	07d9      	lsls	r1, r3, #31
 800b87e:	bf44      	itt	mi
 800b880:	f043 0320 	orrmi.w	r3, r3, #32
 800b884:	6023      	strmi	r3, [r4, #0]
 800b886:	b11d      	cbz	r5, 800b890 <_printf_i+0x19c>
 800b888:	2310      	movs	r3, #16
 800b88a:	e7ad      	b.n	800b7e8 <_printf_i+0xf4>
 800b88c:	4826      	ldr	r0, [pc, #152]	@ (800b928 <_printf_i+0x234>)
 800b88e:	e7e9      	b.n	800b864 <_printf_i+0x170>
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	f023 0320 	bic.w	r3, r3, #32
 800b896:	6023      	str	r3, [r4, #0]
 800b898:	e7f6      	b.n	800b888 <_printf_i+0x194>
 800b89a:	4616      	mov	r6, r2
 800b89c:	e7bd      	b.n	800b81a <_printf_i+0x126>
 800b89e:	6833      	ldr	r3, [r6, #0]
 800b8a0:	6825      	ldr	r5, [r4, #0]
 800b8a2:	6961      	ldr	r1, [r4, #20]
 800b8a4:	1d18      	adds	r0, r3, #4
 800b8a6:	6030      	str	r0, [r6, #0]
 800b8a8:	062e      	lsls	r6, r5, #24
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	d501      	bpl.n	800b8b2 <_printf_i+0x1be>
 800b8ae:	6019      	str	r1, [r3, #0]
 800b8b0:	e002      	b.n	800b8b8 <_printf_i+0x1c4>
 800b8b2:	0668      	lsls	r0, r5, #25
 800b8b4:	d5fb      	bpl.n	800b8ae <_printf_i+0x1ba>
 800b8b6:	8019      	strh	r1, [r3, #0]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	6123      	str	r3, [r4, #16]
 800b8bc:	4616      	mov	r6, r2
 800b8be:	e7bc      	b.n	800b83a <_printf_i+0x146>
 800b8c0:	6833      	ldr	r3, [r6, #0]
 800b8c2:	1d1a      	adds	r2, r3, #4
 800b8c4:	6032      	str	r2, [r6, #0]
 800b8c6:	681e      	ldr	r6, [r3, #0]
 800b8c8:	6862      	ldr	r2, [r4, #4]
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	4630      	mov	r0, r6
 800b8ce:	f7fc fc8f 	bl	80081f0 <memchr>
 800b8d2:	b108      	cbz	r0, 800b8d8 <_printf_i+0x1e4>
 800b8d4:	1b80      	subs	r0, r0, r6
 800b8d6:	6060      	str	r0, [r4, #4]
 800b8d8:	6863      	ldr	r3, [r4, #4]
 800b8da:	6123      	str	r3, [r4, #16]
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8e2:	e7aa      	b.n	800b83a <_printf_i+0x146>
 800b8e4:	6923      	ldr	r3, [r4, #16]
 800b8e6:	4632      	mov	r2, r6
 800b8e8:	4649      	mov	r1, r9
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	47d0      	blx	sl
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	d0ad      	beq.n	800b84e <_printf_i+0x15a>
 800b8f2:	6823      	ldr	r3, [r4, #0]
 800b8f4:	079b      	lsls	r3, r3, #30
 800b8f6:	d413      	bmi.n	800b920 <_printf_i+0x22c>
 800b8f8:	68e0      	ldr	r0, [r4, #12]
 800b8fa:	9b03      	ldr	r3, [sp, #12]
 800b8fc:	4298      	cmp	r0, r3
 800b8fe:	bfb8      	it	lt
 800b900:	4618      	movlt	r0, r3
 800b902:	e7a6      	b.n	800b852 <_printf_i+0x15e>
 800b904:	2301      	movs	r3, #1
 800b906:	4632      	mov	r2, r6
 800b908:	4649      	mov	r1, r9
 800b90a:	4640      	mov	r0, r8
 800b90c:	47d0      	blx	sl
 800b90e:	3001      	adds	r0, #1
 800b910:	d09d      	beq.n	800b84e <_printf_i+0x15a>
 800b912:	3501      	adds	r5, #1
 800b914:	68e3      	ldr	r3, [r4, #12]
 800b916:	9903      	ldr	r1, [sp, #12]
 800b918:	1a5b      	subs	r3, r3, r1
 800b91a:	42ab      	cmp	r3, r5
 800b91c:	dcf2      	bgt.n	800b904 <_printf_i+0x210>
 800b91e:	e7eb      	b.n	800b8f8 <_printf_i+0x204>
 800b920:	2500      	movs	r5, #0
 800b922:	f104 0619 	add.w	r6, r4, #25
 800b926:	e7f5      	b.n	800b914 <_printf_i+0x220>
 800b928:	0800bb39 	.word	0x0800bb39
 800b92c:	0800bb4a 	.word	0x0800bb4a

0800b930 <__malloc_lock>:
 800b930:	4801      	ldr	r0, [pc, #4]	@ (800b938 <__malloc_lock+0x8>)
 800b932:	f7ff bc75 	b.w	800b220 <__retarget_lock_acquire_recursive>
 800b936:	bf00      	nop
 800b938:	200002c8 	.word	0x200002c8

0800b93c <__malloc_unlock>:
 800b93c:	4801      	ldr	r0, [pc, #4]	@ (800b944 <__malloc_unlock+0x8>)
 800b93e:	f7ff bc70 	b.w	800b222 <__retarget_lock_release_recursive>
 800b942:	bf00      	nop
 800b944:	200002c8 	.word	0x200002c8

0800b948 <_realloc_r>:
 800b948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b94c:	4607      	mov	r7, r0
 800b94e:	4614      	mov	r4, r2
 800b950:	460d      	mov	r5, r1
 800b952:	b921      	cbnz	r1, 800b95e <_realloc_r+0x16>
 800b954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b958:	4611      	mov	r1, r2
 800b95a:	f7ff bddd 	b.w	800b518 <_malloc_r>
 800b95e:	b92a      	cbnz	r2, 800b96c <_realloc_r+0x24>
 800b960:	f000 f858 	bl	800ba14 <_free_r>
 800b964:	4625      	mov	r5, r4
 800b966:	4628      	mov	r0, r5
 800b968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b96c:	f000 f89c 	bl	800baa8 <_malloc_usable_size_r>
 800b970:	4284      	cmp	r4, r0
 800b972:	4606      	mov	r6, r0
 800b974:	d802      	bhi.n	800b97c <_realloc_r+0x34>
 800b976:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b97a:	d8f4      	bhi.n	800b966 <_realloc_r+0x1e>
 800b97c:	4621      	mov	r1, r4
 800b97e:	4638      	mov	r0, r7
 800b980:	f7ff fdca 	bl	800b518 <_malloc_r>
 800b984:	4680      	mov	r8, r0
 800b986:	b908      	cbnz	r0, 800b98c <_realloc_r+0x44>
 800b988:	4645      	mov	r5, r8
 800b98a:	e7ec      	b.n	800b966 <_realloc_r+0x1e>
 800b98c:	42b4      	cmp	r4, r6
 800b98e:	4622      	mov	r2, r4
 800b990:	4629      	mov	r1, r5
 800b992:	bf28      	it	cs
 800b994:	4632      	movcs	r2, r6
 800b996:	f000 f82f 	bl	800b9f8 <memcpy>
 800b99a:	4629      	mov	r1, r5
 800b99c:	4638      	mov	r0, r7
 800b99e:	f000 f839 	bl	800ba14 <_free_r>
 800b9a2:	e7f1      	b.n	800b988 <_realloc_r+0x40>

0800b9a4 <memmove>:
 800b9a4:	4288      	cmp	r0, r1
 800b9a6:	b510      	push	{r4, lr}
 800b9a8:	eb01 0402 	add.w	r4, r1, r2
 800b9ac:	d902      	bls.n	800b9b4 <memmove+0x10>
 800b9ae:	4284      	cmp	r4, r0
 800b9b0:	4623      	mov	r3, r4
 800b9b2:	d807      	bhi.n	800b9c4 <memmove+0x20>
 800b9b4:	1e43      	subs	r3, r0, #1
 800b9b6:	42a1      	cmp	r1, r4
 800b9b8:	d008      	beq.n	800b9cc <memmove+0x28>
 800b9ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9c2:	e7f8      	b.n	800b9b6 <memmove+0x12>
 800b9c4:	4402      	add	r2, r0
 800b9c6:	4601      	mov	r1, r0
 800b9c8:	428a      	cmp	r2, r1
 800b9ca:	d100      	bne.n	800b9ce <memmove+0x2a>
 800b9cc:	bd10      	pop	{r4, pc}
 800b9ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9d6:	e7f7      	b.n	800b9c8 <memmove+0x24>

0800b9d8 <_sbrk_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4d06      	ldr	r5, [pc, #24]	@ (800b9f4 <_sbrk_r+0x1c>)
 800b9dc:	2300      	movs	r3, #0
 800b9de:	4604      	mov	r4, r0
 800b9e0:	4608      	mov	r0, r1
 800b9e2:	602b      	str	r3, [r5, #0]
 800b9e4:	f7fc fea6 	bl	8008734 <_sbrk>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_sbrk_r+0x1a>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_sbrk_r+0x1a>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	200002d4 	.word	0x200002d4

0800b9f8 <memcpy>:
 800b9f8:	440a      	add	r2, r1
 800b9fa:	4291      	cmp	r1, r2
 800b9fc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ba00:	d100      	bne.n	800ba04 <memcpy+0xc>
 800ba02:	4770      	bx	lr
 800ba04:	b510      	push	{r4, lr}
 800ba06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba0e:	4291      	cmp	r1, r2
 800ba10:	d1f9      	bne.n	800ba06 <memcpy+0xe>
 800ba12:	bd10      	pop	{r4, pc}

0800ba14 <_free_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4605      	mov	r5, r0
 800ba18:	2900      	cmp	r1, #0
 800ba1a:	d041      	beq.n	800baa0 <_free_r+0x8c>
 800ba1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba20:	1f0c      	subs	r4, r1, #4
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	bfb8      	it	lt
 800ba26:	18e4      	addlt	r4, r4, r3
 800ba28:	f7ff ff82 	bl	800b930 <__malloc_lock>
 800ba2c:	4a1d      	ldr	r2, [pc, #116]	@ (800baa4 <_free_r+0x90>)
 800ba2e:	6813      	ldr	r3, [r2, #0]
 800ba30:	b933      	cbnz	r3, 800ba40 <_free_r+0x2c>
 800ba32:	6063      	str	r3, [r4, #4]
 800ba34:	6014      	str	r4, [r2, #0]
 800ba36:	4628      	mov	r0, r5
 800ba38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba3c:	f7ff bf7e 	b.w	800b93c <__malloc_unlock>
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	d908      	bls.n	800ba56 <_free_r+0x42>
 800ba44:	6820      	ldr	r0, [r4, #0]
 800ba46:	1821      	adds	r1, r4, r0
 800ba48:	428b      	cmp	r3, r1
 800ba4a:	bf01      	itttt	eq
 800ba4c:	6819      	ldreq	r1, [r3, #0]
 800ba4e:	685b      	ldreq	r3, [r3, #4]
 800ba50:	1809      	addeq	r1, r1, r0
 800ba52:	6021      	streq	r1, [r4, #0]
 800ba54:	e7ed      	b.n	800ba32 <_free_r+0x1e>
 800ba56:	461a      	mov	r2, r3
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	b10b      	cbz	r3, 800ba60 <_free_r+0x4c>
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	d9fa      	bls.n	800ba56 <_free_r+0x42>
 800ba60:	6811      	ldr	r1, [r2, #0]
 800ba62:	1850      	adds	r0, r2, r1
 800ba64:	42a0      	cmp	r0, r4
 800ba66:	d10b      	bne.n	800ba80 <_free_r+0x6c>
 800ba68:	6820      	ldr	r0, [r4, #0]
 800ba6a:	4401      	add	r1, r0
 800ba6c:	1850      	adds	r0, r2, r1
 800ba6e:	4283      	cmp	r3, r0
 800ba70:	6011      	str	r1, [r2, #0]
 800ba72:	d1e0      	bne.n	800ba36 <_free_r+0x22>
 800ba74:	6818      	ldr	r0, [r3, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	6053      	str	r3, [r2, #4]
 800ba7a:	4408      	add	r0, r1
 800ba7c:	6010      	str	r0, [r2, #0]
 800ba7e:	e7da      	b.n	800ba36 <_free_r+0x22>
 800ba80:	d902      	bls.n	800ba88 <_free_r+0x74>
 800ba82:	230c      	movs	r3, #12
 800ba84:	602b      	str	r3, [r5, #0]
 800ba86:	e7d6      	b.n	800ba36 <_free_r+0x22>
 800ba88:	6820      	ldr	r0, [r4, #0]
 800ba8a:	1821      	adds	r1, r4, r0
 800ba8c:	428b      	cmp	r3, r1
 800ba8e:	bf04      	itt	eq
 800ba90:	6819      	ldreq	r1, [r3, #0]
 800ba92:	685b      	ldreq	r3, [r3, #4]
 800ba94:	6063      	str	r3, [r4, #4]
 800ba96:	bf04      	itt	eq
 800ba98:	1809      	addeq	r1, r1, r0
 800ba9a:	6021      	streq	r1, [r4, #0]
 800ba9c:	6054      	str	r4, [r2, #4]
 800ba9e:	e7ca      	b.n	800ba36 <_free_r+0x22>
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
 800baa2:	bf00      	nop
 800baa4:	200002d0 	.word	0x200002d0

0800baa8 <_malloc_usable_size_r>:
 800baa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baac:	1f18      	subs	r0, r3, #4
 800baae:	2b00      	cmp	r3, #0
 800bab0:	bfbc      	itt	lt
 800bab2:	580b      	ldrlt	r3, [r1, r0]
 800bab4:	18c0      	addlt	r0, r0, r3
 800bab6:	4770      	bx	lr

0800bab8 <_init>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	bf00      	nop
 800babc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800babe:	bc08      	pop	{r3}
 800bac0:	469e      	mov	lr, r3
 800bac2:	4770      	bx	lr

0800bac4 <_fini>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	bf00      	nop
 800bac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baca:	bc08      	pop	{r3}
 800bacc:	469e      	mov	lr, r3
 800bace:	4770      	bx	lr
