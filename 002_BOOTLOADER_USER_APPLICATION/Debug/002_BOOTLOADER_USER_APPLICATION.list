
002_BOOTLOADER_USER_APPLICATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003938  080081a0  080081a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800bad8  0800bad8  00004ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb64  0800bb64  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bb64  0800bb64  00004b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb6c  0800bb6c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb6c  0800bb6c  00004b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb70  0800bb70  00004b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800bb74  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          0000027c  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d8  200002d8  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000091a7  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001675  00000000  00000000  0000e233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  0000f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050d  00000000  00000000  0000ff48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb59  00000000  00000000  00010455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000096a8  00000000  00000000  0002ffae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c01fa  00000000  00000000  00039656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f9850  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e9c  00000000  00000000  000f9894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  000fb730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	@ (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	@ (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	@ (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	2000005c 	.word	0x2000005c
 80081bc:	00000000 	.word	0x00000000
 80081c0:	0800bac0 	.word	0x0800bac0

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	@ (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	@ (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	@ (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	20000060 	.word	0x20000060
 80081dc:	0800bac0 	.word	0x0800bac0

080081e0 <strlen>:
 80081e0:	4603      	mov	r3, r0
 80081e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	d1fb      	bne.n	80081e2 <strlen+0x2>
 80081ea:	1a18      	subs	r0, r3, r0
 80081ec:	3801      	subs	r0, #1
 80081ee:	4770      	bx	lr

080081f0 <memchr>:
 80081f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80081f4:	2a10      	cmp	r2, #16
 80081f6:	db2b      	blt.n	8008250 <memchr+0x60>
 80081f8:	f010 0f07 	tst.w	r0, #7
 80081fc:	d008      	beq.n	8008210 <memchr+0x20>
 80081fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008202:	3a01      	subs	r2, #1
 8008204:	428b      	cmp	r3, r1
 8008206:	d02d      	beq.n	8008264 <memchr+0x74>
 8008208:	f010 0f07 	tst.w	r0, #7
 800820c:	b342      	cbz	r2, 8008260 <memchr+0x70>
 800820e:	d1f6      	bne.n	80081fe <memchr+0xe>
 8008210:	b4f0      	push	{r4, r5, r6, r7}
 8008212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800821a:	f022 0407 	bic.w	r4, r2, #7
 800821e:	f07f 0700 	mvns.w	r7, #0
 8008222:	2300      	movs	r3, #0
 8008224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008228:	3c08      	subs	r4, #8
 800822a:	ea85 0501 	eor.w	r5, r5, r1
 800822e:	ea86 0601 	eor.w	r6, r6, r1
 8008232:	fa85 f547 	uadd8	r5, r5, r7
 8008236:	faa3 f587 	sel	r5, r3, r7
 800823a:	fa86 f647 	uadd8	r6, r6, r7
 800823e:	faa5 f687 	sel	r6, r5, r7
 8008242:	b98e      	cbnz	r6, 8008268 <memchr+0x78>
 8008244:	d1ee      	bne.n	8008224 <memchr+0x34>
 8008246:	bcf0      	pop	{r4, r5, r6, r7}
 8008248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800824c:	f002 0207 	and.w	r2, r2, #7
 8008250:	b132      	cbz	r2, 8008260 <memchr+0x70>
 8008252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008256:	3a01      	subs	r2, #1
 8008258:	ea83 0301 	eor.w	r3, r3, r1
 800825c:	b113      	cbz	r3, 8008264 <memchr+0x74>
 800825e:	d1f8      	bne.n	8008252 <memchr+0x62>
 8008260:	2000      	movs	r0, #0
 8008262:	4770      	bx	lr
 8008264:	3801      	subs	r0, #1
 8008266:	4770      	bx	lr
 8008268:	2d00      	cmp	r5, #0
 800826a:	bf06      	itte	eq
 800826c:	4635      	moveq	r5, r6
 800826e:	3803      	subeq	r0, #3
 8008270:	3807      	subne	r0, #7
 8008272:	f015 0f01 	tst.w	r5, #1
 8008276:	d107      	bne.n	8008288 <memchr+0x98>
 8008278:	3001      	adds	r0, #1
 800827a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800827e:	bf02      	ittt	eq
 8008280:	3001      	addeq	r0, #1
 8008282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8008286:	3001      	addeq	r0, #1
 8008288:	bcf0      	pop	{r4, r5, r6, r7}
 800828a:	3801      	subs	r0, #1
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop

08008290 <print_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_message(char* format, ...){
 8008290:	b40f      	push	{r0, r1, r2, r3}
 8008292:	b580      	push	{r7, lr}
 8008294:	b09a      	sub	sp, #104	@ 0x68
 8008296:	af00      	add	r7, sp, #0

	char coming_message[100];

	va_list va_list;
	va_start(va_list, format);
 8008298:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800829c:	603b      	str	r3, [r7, #0]
	vsprintf(coming_message, format, va_list);
 800829e:	1d3b      	adds	r3, r7, #4
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80082a4:	4618      	mov	r0, r3
 80082a6:	f002 ff83 	bl	800b1b0 <vsiprintf>
	HAL_UART_Transmit(DEBUG_UART_PORT, (uint8_t*)coming_message, strlen(coming_message), HAL_MAX_DELAY);
 80082aa:	1d3b      	adds	r3, r7, #4
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7ff ff97 	bl	80081e0 <strlen>
 80082b2:	4603      	mov	r3, r0
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	1d39      	adds	r1, r7, #4
 80082b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80082bc:	4804      	ldr	r0, [pc, #16]	@ (80082d0 <print_message+0x40>)
 80082be:	f002 fae7 	bl	800a890 <HAL_UART_Transmit>
	va_end(va_list);
}
 80082c2:	bf00      	nop
 80082c4:	3768      	adds	r7, #104	@ 0x68
 80082c6:	46bd      	mov	sp, r7
 80082c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082cc:	b004      	add	sp, #16
 80082ce:	4770      	bx	lr
 80082d0:	20000078 	.word	0x20000078

080082d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80082d8:	f000 faa6 	bl	8008828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80082dc:	f000 f816 	bl	800830c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80082e0:	f000 f8c8 	bl	8008474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80082e4:	f000 f866 	bl	80083b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80082e8:	f000 f894 	bl	8008414 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  print_message("Hello from BL user application\n");
 80082ec:	4806      	ldr	r0, [pc, #24]	@ (8008308 <main+0x34>)
 80082ee:	f7ff ffcf 	bl	8008290 <print_message>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80082f2:	2120      	movs	r1, #32
 80082f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80082f8:	f000 fdec 	bl	8008ed4 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80082fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008300:	f000 faf8 	bl	80088f4 <HAL_Delay>
	  print_message("Hello from BL user application\n");
 8008304:	bf00      	nop
 8008306:	e7f1      	b.n	80082ec <main+0x18>
 8008308:	0800bad8 	.word	0x0800bad8

0800830c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b0a6      	sub	sp, #152	@ 0x98
 8008310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008312:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8008316:	2228      	movs	r2, #40	@ 0x28
 8008318:	2100      	movs	r1, #0
 800831a:	4618      	mov	r0, r3
 800831c:	f002 ff52 	bl	800b1c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008320:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	605a      	str	r2, [r3, #4]
 800832a:	609a      	str	r2, [r3, #8]
 800832c:	60da      	str	r2, [r3, #12]
 800832e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008330:	1d3b      	adds	r3, r7, #4
 8008332:	2258      	movs	r2, #88	@ 0x58
 8008334:	2100      	movs	r1, #0
 8008336:	4618      	mov	r0, r3
 8008338:	f002 ff44 	bl	800b1c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800833c:	2302      	movs	r3, #2
 800833e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008340:	2301      	movs	r3, #1
 8008342:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008344:	2310      	movs	r3, #16
 8008346:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800834a:	2300      	movs	r3, #0
 800834c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008350:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8008354:	4618      	mov	r0, r3
 8008356:	f000 fdfb 	bl	8008f50 <HAL_RCC_OscConfig>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008360:	f000 f8ea 	bl	8008538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008364:	230f      	movs	r3, #15
 8008366:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008368:	2300      	movs	r3, #0
 800836a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800836c:	2300      	movs	r3, #0
 800836e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008370:	2300      	movs	r3, #0
 8008372:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008374:	2300      	movs	r3, #0
 8008376:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008378:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800837c:	2100      	movs	r1, #0
 800837e:	4618      	mov	r0, r3
 8008380:	f001 fe0a 	bl	8009f98 <HAL_RCC_ClockConfig>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800838a:	f000 f8d5 	bl	8008538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800838e:	2306      	movs	r3, #6
 8008390:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008392:	2300      	movs	r3, #0
 8008394:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008396:	2300      	movs	r3, #0
 8008398:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800839a:	1d3b      	adds	r3, r7, #4
 800839c:	4618      	mov	r0, r3
 800839e:	f002 f80d 	bl	800a3bc <HAL_RCCEx_PeriphCLKConfig>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80083a8:	f000 f8c6 	bl	8008538 <Error_Handler>
  }
}
 80083ac:	bf00      	nop
 80083ae:	3798      	adds	r7, #152	@ 0x98
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80083b8:	4b14      	ldr	r3, [pc, #80]	@ (800840c <MX_USART2_UART_Init+0x58>)
 80083ba:	4a15      	ldr	r2, [pc, #84]	@ (8008410 <MX_USART2_UART_Init+0x5c>)
 80083bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80083be:	4b13      	ldr	r3, [pc, #76]	@ (800840c <MX_USART2_UART_Init+0x58>)
 80083c0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80083c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80083c6:	4b11      	ldr	r3, [pc, #68]	@ (800840c <MX_USART2_UART_Init+0x58>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80083cc:	4b0f      	ldr	r3, [pc, #60]	@ (800840c <MX_USART2_UART_Init+0x58>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80083d2:	4b0e      	ldr	r3, [pc, #56]	@ (800840c <MX_USART2_UART_Init+0x58>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80083d8:	4b0c      	ldr	r3, [pc, #48]	@ (800840c <MX_USART2_UART_Init+0x58>)
 80083da:	220c      	movs	r2, #12
 80083dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083de:	4b0b      	ldr	r3, [pc, #44]	@ (800840c <MX_USART2_UART_Init+0x58>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80083e4:	4b09      	ldr	r3, [pc, #36]	@ (800840c <MX_USART2_UART_Init+0x58>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80083ea:	4b08      	ldr	r3, [pc, #32]	@ (800840c <MX_USART2_UART_Init+0x58>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80083f0:	4b06      	ldr	r3, [pc, #24]	@ (800840c <MX_USART2_UART_Init+0x58>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80083f6:	4805      	ldr	r0, [pc, #20]	@ (800840c <MX_USART2_UART_Init+0x58>)
 80083f8:	f002 f9fc 	bl	800a7f4 <HAL_UART_Init>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8008402:	f000 f899 	bl	8008538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008406:	bf00      	nop
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20000078 	.word	0x20000078
 8008410:	40004400 	.word	0x40004400

08008414 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8008418:	4b14      	ldr	r3, [pc, #80]	@ (800846c <MX_USART3_UART_Init+0x58>)
 800841a:	4a15      	ldr	r2, [pc, #84]	@ (8008470 <MX_USART3_UART_Init+0x5c>)
 800841c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800841e:	4b13      	ldr	r3, [pc, #76]	@ (800846c <MX_USART3_UART_Init+0x58>)
 8008420:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8008424:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008426:	4b11      	ldr	r3, [pc, #68]	@ (800846c <MX_USART3_UART_Init+0x58>)
 8008428:	2200      	movs	r2, #0
 800842a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800842c:	4b0f      	ldr	r3, [pc, #60]	@ (800846c <MX_USART3_UART_Init+0x58>)
 800842e:	2200      	movs	r2, #0
 8008430:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008432:	4b0e      	ldr	r3, [pc, #56]	@ (800846c <MX_USART3_UART_Init+0x58>)
 8008434:	2200      	movs	r2, #0
 8008436:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008438:	4b0c      	ldr	r3, [pc, #48]	@ (800846c <MX_USART3_UART_Init+0x58>)
 800843a:	220c      	movs	r2, #12
 800843c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800843e:	4b0b      	ldr	r3, [pc, #44]	@ (800846c <MX_USART3_UART_Init+0x58>)
 8008440:	2200      	movs	r2, #0
 8008442:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008444:	4b09      	ldr	r3, [pc, #36]	@ (800846c <MX_USART3_UART_Init+0x58>)
 8008446:	2200      	movs	r2, #0
 8008448:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800844a:	4b08      	ldr	r3, [pc, #32]	@ (800846c <MX_USART3_UART_Init+0x58>)
 800844c:	2200      	movs	r2, #0
 800844e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008450:	4b06      	ldr	r3, [pc, #24]	@ (800846c <MX_USART3_UART_Init+0x58>)
 8008452:	2200      	movs	r2, #0
 8008454:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008456:	4805      	ldr	r0, [pc, #20]	@ (800846c <MX_USART3_UART_Init+0x58>)
 8008458:	f002 f9cc 	bl	800a7f4 <HAL_UART_Init>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8008462:	f000 f869 	bl	8008538 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008466:	bf00      	nop
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20000100 	.word	0x20000100
 8008470:	40004800 	.word	0x40004800

08008474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b088      	sub	sp, #32
 8008478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800847a:	f107 030c 	add.w	r3, r7, #12
 800847e:	2200      	movs	r2, #0
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	605a      	str	r2, [r3, #4]
 8008484:	609a      	str	r2, [r3, #8]
 8008486:	60da      	str	r2, [r3, #12]
 8008488:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800848a:	4b29      	ldr	r3, [pc, #164]	@ (8008530 <MX_GPIO_Init+0xbc>)
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	4a28      	ldr	r2, [pc, #160]	@ (8008530 <MX_GPIO_Init+0xbc>)
 8008490:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008494:	6153      	str	r3, [r2, #20]
 8008496:	4b26      	ldr	r3, [pc, #152]	@ (8008530 <MX_GPIO_Init+0xbc>)
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800849e:	60bb      	str	r3, [r7, #8]
 80084a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80084a2:	4b23      	ldr	r3, [pc, #140]	@ (8008530 <MX_GPIO_Init+0xbc>)
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	4a22      	ldr	r2, [pc, #136]	@ (8008530 <MX_GPIO_Init+0xbc>)
 80084a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084ac:	6153      	str	r3, [r2, #20]
 80084ae:	4b20      	ldr	r3, [pc, #128]	@ (8008530 <MX_GPIO_Init+0xbc>)
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084b6:	607b      	str	r3, [r7, #4]
 80084b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80084ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008530 <MX_GPIO_Init+0xbc>)
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	4a1c      	ldr	r2, [pc, #112]	@ (8008530 <MX_GPIO_Init+0xbc>)
 80084c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084c4:	6153      	str	r3, [r2, #20]
 80084c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008530 <MX_GPIO_Init+0xbc>)
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80084d2:	2200      	movs	r2, #0
 80084d4:	2120      	movs	r1, #32
 80084d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80084da:	f000 fce3 	bl	8008ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80084de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80084e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80084e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80084e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084ee:	f107 030c 	add.w	r3, r7, #12
 80084f2:	4619      	mov	r1, r3
 80084f4:	480f      	ldr	r0, [pc, #60]	@ (8008534 <MX_GPIO_Init+0xc0>)
 80084f6:	f000 fb33 	bl	8008b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80084fa:	2320      	movs	r3, #32
 80084fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084fe:	2301      	movs	r3, #1
 8008500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008502:	2300      	movs	r3, #0
 8008504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008506:	2300      	movs	r3, #0
 8008508:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800850a:	f107 030c 	add.w	r3, r7, #12
 800850e:	4619      	mov	r1, r3
 8008510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008514:	f000 fb24 	bl	8008b60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008518:	2200      	movs	r2, #0
 800851a:	2100      	movs	r1, #0
 800851c:	2028      	movs	r0, #40	@ 0x28
 800851e:	f000 fae8 	bl	8008af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008522:	2028      	movs	r0, #40	@ 0x28
 8008524:	f000 fb01 	bl	8008b2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8008528:	bf00      	nop
 800852a:	3720      	adds	r7, #32
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	40021000 	.word	0x40021000
 8008534:	48000800 	.word	0x48000800

08008538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800853c:	b672      	cpsid	i
}
 800853e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008540:	bf00      	nop
 8008542:	e7fd      	b.n	8008540 <Error_Handler+0x8>

08008544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800854a:	4b0f      	ldr	r3, [pc, #60]	@ (8008588 <HAL_MspInit+0x44>)
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	4a0e      	ldr	r2, [pc, #56]	@ (8008588 <HAL_MspInit+0x44>)
 8008550:	f043 0301 	orr.w	r3, r3, #1
 8008554:	6193      	str	r3, [r2, #24]
 8008556:	4b0c      	ldr	r3, [pc, #48]	@ (8008588 <HAL_MspInit+0x44>)
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	607b      	str	r3, [r7, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008562:	4b09      	ldr	r3, [pc, #36]	@ (8008588 <HAL_MspInit+0x44>)
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	4a08      	ldr	r2, [pc, #32]	@ (8008588 <HAL_MspInit+0x44>)
 8008568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800856c:	61d3      	str	r3, [r2, #28]
 800856e:	4b06      	ldr	r3, [pc, #24]	@ (8008588 <HAL_MspInit+0x44>)
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	40021000 	.word	0x40021000

0800858c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08c      	sub	sp, #48	@ 0x30
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008594:	f107 031c 	add.w	r3, r7, #28
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	609a      	str	r2, [r3, #8]
 80085a0:	60da      	str	r2, [r3, #12]
 80085a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a3d      	ldr	r2, [pc, #244]	@ (80086a0 <HAL_UART_MspInit+0x114>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d145      	bne.n	800863a <HAL_UART_MspInit+0xae>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80085ae:	4b3d      	ldr	r3, [pc, #244]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 80085b0:	69db      	ldr	r3, [r3, #28]
 80085b2:	4a3c      	ldr	r2, [pc, #240]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 80085b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085b8:	61d3      	str	r3, [r2, #28]
 80085ba:	4b3a      	ldr	r3, [pc, #232]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085c2:	61bb      	str	r3, [r7, #24]
 80085c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085c6:	4b37      	ldr	r3, [pc, #220]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	4a36      	ldr	r2, [pc, #216]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 80085cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085d0:	6153      	str	r3, [r2, #20]
 80085d2:	4b34      	ldr	r3, [pc, #208]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085de:	4b31      	ldr	r3, [pc, #196]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	4a30      	ldr	r2, [pc, #192]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 80085e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085e8:	6153      	str	r3, [r2, #20]
 80085ea:	4b2e      	ldr	r3, [pc, #184]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085f2:	613b      	str	r3, [r7, #16]
 80085f4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PB3     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80085f6:	2308      	movs	r3, #8
 80085f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085fa:	2302      	movs	r3, #2
 80085fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085fe:	2300      	movs	r3, #0
 8008600:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008602:	2303      	movs	r3, #3
 8008604:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008606:	2307      	movs	r3, #7
 8008608:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800860a:	f107 031c 	add.w	r3, r7, #28
 800860e:	4619      	mov	r1, r3
 8008610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008614:	f000 faa4 	bl	8008b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008618:	2308      	movs	r3, #8
 800861a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800861c:	2302      	movs	r3, #2
 800861e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008620:	2300      	movs	r3, #0
 8008622:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008624:	2303      	movs	r3, #3
 8008626:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008628:	2307      	movs	r3, #7
 800862a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800862c:	f107 031c 	add.w	r3, r7, #28
 8008630:	4619      	mov	r1, r3
 8008632:	481d      	ldr	r0, [pc, #116]	@ (80086a8 <HAL_UART_MspInit+0x11c>)
 8008634:	f000 fa94 	bl	8008b60 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8008638:	e02d      	b.n	8008696 <HAL_UART_MspInit+0x10a>
  else if(huart->Instance==USART3)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a1b      	ldr	r2, [pc, #108]	@ (80086ac <HAL_UART_MspInit+0x120>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d128      	bne.n	8008696 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008644:	4b17      	ldr	r3, [pc, #92]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	4a16      	ldr	r2, [pc, #88]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 800864a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800864e:	61d3      	str	r3, [r2, #28]
 8008650:	4b14      	ldr	r3, [pc, #80]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008658:	60fb      	str	r3, [r7, #12]
 800865a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800865c:	4b11      	ldr	r3, [pc, #68]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	4a10      	ldr	r2, [pc, #64]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 8008662:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008666:	6153      	str	r3, [r2, #20]
 8008668:	4b0e      	ldr	r3, [pc, #56]	@ (80086a4 <HAL_UART_MspInit+0x118>)
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008670:	60bb      	str	r3, [r7, #8]
 8008672:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008674:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800867a:	2302      	movs	r3, #2
 800867c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800867e:	2300      	movs	r3, #0
 8008680:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008682:	2303      	movs	r3, #3
 8008684:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008686:	2307      	movs	r3, #7
 8008688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800868a:	f107 031c 	add.w	r3, r7, #28
 800868e:	4619      	mov	r1, r3
 8008690:	4805      	ldr	r0, [pc, #20]	@ (80086a8 <HAL_UART_MspInit+0x11c>)
 8008692:	f000 fa65 	bl	8008b60 <HAL_GPIO_Init>
}
 8008696:	bf00      	nop
 8008698:	3730      	adds	r7, #48	@ 0x30
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	40004400 	.word	0x40004400
 80086a4:	40021000 	.word	0x40021000
 80086a8:	48000400 	.word	0x48000400
 80086ac:	40004800 	.word	0x40004800

080086b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80086b0:	b480      	push	{r7}
 80086b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80086b4:	bf00      	nop
 80086b6:	e7fd      	b.n	80086b4 <NMI_Handler+0x4>

080086b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80086bc:	bf00      	nop
 80086be:	e7fd      	b.n	80086bc <HardFault_Handler+0x4>

080086c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086c4:	bf00      	nop
 80086c6:	e7fd      	b.n	80086c4 <MemManage_Handler+0x4>

080086c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086c8:	b480      	push	{r7}
 80086ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086cc:	bf00      	nop
 80086ce:	e7fd      	b.n	80086cc <BusFault_Handler+0x4>

080086d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80086d4:	bf00      	nop
 80086d6:	e7fd      	b.n	80086d4 <UsageFault_Handler+0x4>

080086d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80086d8:	b480      	push	{r7}
 80086da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80086dc:	bf00      	nop
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80086e6:	b480      	push	{r7}
 80086e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80086ea:	bf00      	nop
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80086f8:	bf00      	nop
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008706:	f000 f8d5 	bl	80088b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800870a:	bf00      	nop
 800870c:	bd80      	pop	{r7, pc}

0800870e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == GPIO_PIN_SET){
 8008712:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800871a:	f000 fbab 	bl	8008e74 <HAL_GPIO_ReadPin>
 800871e:	4603      	mov	r3, r0
 8008720:	2b01      	cmp	r3, #1
 8008722:	d104      	bne.n	800872e <EXTI15_10_IRQHandler+0x20>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8008724:	2120      	movs	r1, #32
 8008726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800872a:	f000 fbd3 	bl	8008ed4 <HAL_GPIO_TogglePin>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800872e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008732:	f000 fbe9 	bl	8008f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008736:	bf00      	nop
 8008738:	bd80      	pop	{r7, pc}
	...

0800873c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008744:	4a14      	ldr	r2, [pc, #80]	@ (8008798 <_sbrk+0x5c>)
 8008746:	4b15      	ldr	r3, [pc, #84]	@ (800879c <_sbrk+0x60>)
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008750:	4b13      	ldr	r3, [pc, #76]	@ (80087a0 <_sbrk+0x64>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008758:	4b11      	ldr	r3, [pc, #68]	@ (80087a0 <_sbrk+0x64>)
 800875a:	4a12      	ldr	r2, [pc, #72]	@ (80087a4 <_sbrk+0x68>)
 800875c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800875e:	4b10      	ldr	r3, [pc, #64]	@ (80087a0 <_sbrk+0x64>)
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4413      	add	r3, r2
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	429a      	cmp	r2, r3
 800876a:	d207      	bcs.n	800877c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800876c:	f002 fd32 	bl	800b1d4 <__errno>
 8008770:	4603      	mov	r3, r0
 8008772:	220c      	movs	r2, #12
 8008774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800877a:	e009      	b.n	8008790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800877c:	4b08      	ldr	r3, [pc, #32]	@ (80087a0 <_sbrk+0x64>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008782:	4b07      	ldr	r3, [pc, #28]	@ (80087a0 <_sbrk+0x64>)
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4413      	add	r3, r2
 800878a:	4a05      	ldr	r2, [pc, #20]	@ (80087a0 <_sbrk+0x64>)
 800878c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800878e:	68fb      	ldr	r3, [r7, #12]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	20010000 	.word	0x20010000
 800879c:	00000400 	.word	0x00000400
 80087a0:	20000188 	.word	0x20000188
 80087a4:	200002d8 	.word	0x200002d8

080087a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80087ac:	4b07      	ldr	r3, [pc, #28]	@ (80087cc <SystemInit+0x24>)
 80087ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087b2:	4a06      	ldr	r2, [pc, #24]	@ (80087cc <SystemInit+0x24>)
 80087b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80087bc:	4b03      	ldr	r3, [pc, #12]	@ (80087cc <SystemInit+0x24>)
 80087be:	4a04      	ldr	r2, [pc, #16]	@ (80087d0 <SystemInit+0x28>)
 80087c0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80087c2:	bf00      	nop
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	e000ed00 	.word	0xe000ed00
 80087d0:	08008000 	.word	0x08008000

080087d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80087d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800880c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80087d8:	f7ff ffe6 	bl	80087a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80087dc:	480c      	ldr	r0, [pc, #48]	@ (8008810 <LoopForever+0x6>)
  ldr r1, =_edata
 80087de:	490d      	ldr	r1, [pc, #52]	@ (8008814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80087e0:	4a0d      	ldr	r2, [pc, #52]	@ (8008818 <LoopForever+0xe>)
  movs r3, #0
 80087e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80087e4:	e002      	b.n	80087ec <LoopCopyDataInit>

080087e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80087e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80087e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80087ea:	3304      	adds	r3, #4

080087ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80087ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80087ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80087f0:	d3f9      	bcc.n	80087e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80087f2:	4a0a      	ldr	r2, [pc, #40]	@ (800881c <LoopForever+0x12>)
  ldr r4, =_ebss
 80087f4:	4c0a      	ldr	r4, [pc, #40]	@ (8008820 <LoopForever+0x16>)
  movs r3, #0
 80087f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80087f8:	e001      	b.n	80087fe <LoopFillZerobss>

080087fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80087fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80087fc:	3204      	adds	r2, #4

080087fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80087fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008800:	d3fb      	bcc.n	80087fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008802:	f002 fced 	bl	800b1e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008806:	f7ff fd65 	bl	80082d4 <main>

0800880a <LoopForever>:

LoopForever:
    b LoopForever
 800880a:	e7fe      	b.n	800880a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800880c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008814:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8008818:	0800bb74 	.word	0x0800bb74
  ldr r2, =_sbss
 800881c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8008820:	200002d8 	.word	0x200002d8

08008824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008824:	e7fe      	b.n	8008824 <ADC1_2_IRQHandler>
	...

08008828 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800882c:	4b08      	ldr	r3, [pc, #32]	@ (8008850 <HAL_Init+0x28>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a07      	ldr	r2, [pc, #28]	@ (8008850 <HAL_Init+0x28>)
 8008832:	f043 0310 	orr.w	r3, r3, #16
 8008836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008838:	2003      	movs	r0, #3
 800883a:	f000 f94f 	bl	8008adc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800883e:	200f      	movs	r0, #15
 8008840:	f000 f808 	bl	8008854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008844:	f7ff fe7e 	bl	8008544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	40022000 	.word	0x40022000

08008854 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800885c:	4b12      	ldr	r3, [pc, #72]	@ (80088a8 <HAL_InitTick+0x54>)
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	4b12      	ldr	r3, [pc, #72]	@ (80088ac <HAL_InitTick+0x58>)
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	4619      	mov	r1, r3
 8008866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800886a:	fbb3 f3f1 	udiv	r3, r3, r1
 800886e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008872:	4618      	mov	r0, r3
 8008874:	f000 f967 	bl	8008b46 <HAL_SYSTICK_Config>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e00e      	b.n	80088a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b0f      	cmp	r3, #15
 8008886:	d80a      	bhi.n	800889e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008888:	2200      	movs	r2, #0
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008890:	f000 f92f 	bl	8008af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008894:	4a06      	ldr	r2, [pc, #24]	@ (80088b0 <HAL_InitTick+0x5c>)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	e000      	b.n	80088a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	20000000 	.word	0x20000000
 80088ac:	20000008 	.word	0x20000008
 80088b0:	20000004 	.word	0x20000004

080088b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80088b4:	b480      	push	{r7}
 80088b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80088b8:	4b06      	ldr	r3, [pc, #24]	@ (80088d4 <HAL_IncTick+0x20>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	4b06      	ldr	r3, [pc, #24]	@ (80088d8 <HAL_IncTick+0x24>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4413      	add	r3, r2
 80088c4:	4a04      	ldr	r2, [pc, #16]	@ (80088d8 <HAL_IncTick+0x24>)
 80088c6:	6013      	str	r3, [r2, #0]
}
 80088c8:	bf00      	nop
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	20000008 	.word	0x20000008
 80088d8:	2000018c 	.word	0x2000018c

080088dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80088dc:	b480      	push	{r7}
 80088de:	af00      	add	r7, sp, #0
  return uwTick;  
 80088e0:	4b03      	ldr	r3, [pc, #12]	@ (80088f0 <HAL_GetTick+0x14>)
 80088e2:	681b      	ldr	r3, [r3, #0]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	2000018c 	.word	0x2000018c

080088f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80088fc:	f7ff ffee 	bl	80088dc <HAL_GetTick>
 8008900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800890c:	d005      	beq.n	800891a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800890e:	4b0a      	ldr	r3, [pc, #40]	@ (8008938 <HAL_Delay+0x44>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4413      	add	r3, r2
 8008918:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800891a:	bf00      	nop
 800891c:	f7ff ffde 	bl	80088dc <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	429a      	cmp	r2, r3
 800892a:	d8f7      	bhi.n	800891c <HAL_Delay+0x28>
  {
  }
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20000008 	.word	0x20000008

0800893c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800894c:	4b0c      	ldr	r3, [pc, #48]	@ (8008980 <__NVIC_SetPriorityGrouping+0x44>)
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008958:	4013      	ands	r3, r2
 800895a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800896c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800896e:	4a04      	ldr	r2, [pc, #16]	@ (8008980 <__NVIC_SetPriorityGrouping+0x44>)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	60d3      	str	r3, [r2, #12]
}
 8008974:	bf00      	nop
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	e000ed00 	.word	0xe000ed00

08008984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008988:	4b04      	ldr	r3, [pc, #16]	@ (800899c <__NVIC_GetPriorityGrouping+0x18>)
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	0a1b      	lsrs	r3, r3, #8
 800898e:	f003 0307 	and.w	r3, r3, #7
}
 8008992:	4618      	mov	r0, r3
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	e000ed00 	.word	0xe000ed00

080089a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	db0b      	blt.n	80089ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	f003 021f 	and.w	r2, r3, #31
 80089b8:	4907      	ldr	r1, [pc, #28]	@ (80089d8 <__NVIC_EnableIRQ+0x38>)
 80089ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089be:	095b      	lsrs	r3, r3, #5
 80089c0:	2001      	movs	r0, #1
 80089c2:	fa00 f202 	lsl.w	r2, r0, r2
 80089c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	e000e100 	.word	0xe000e100

080089dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	db0a      	blt.n	8008a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	490c      	ldr	r1, [pc, #48]	@ (8008a28 <__NVIC_SetPriority+0x4c>)
 80089f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089fa:	0112      	lsls	r2, r2, #4
 80089fc:	b2d2      	uxtb	r2, r2
 80089fe:	440b      	add	r3, r1
 8008a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a04:	e00a      	b.n	8008a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	4908      	ldr	r1, [pc, #32]	@ (8008a2c <__NVIC_SetPriority+0x50>)
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	f003 030f 	and.w	r3, r3, #15
 8008a12:	3b04      	subs	r3, #4
 8008a14:	0112      	lsls	r2, r2, #4
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	440b      	add	r3, r1
 8008a1a:	761a      	strb	r2, [r3, #24]
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	e000e100 	.word	0xe000e100
 8008a2c:	e000ed00 	.word	0xe000ed00

08008a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b089      	sub	sp, #36	@ 0x24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	f1c3 0307 	rsb	r3, r3, #7
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	bf28      	it	cs
 8008a4e:	2304      	movcs	r3, #4
 8008a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	3304      	adds	r3, #4
 8008a56:	2b06      	cmp	r3, #6
 8008a58:	d902      	bls.n	8008a60 <NVIC_EncodePriority+0x30>
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	3b03      	subs	r3, #3
 8008a5e:	e000      	b.n	8008a62 <NVIC_EncodePriority+0x32>
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6e:	43da      	mvns	r2, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	401a      	ands	r2, r3
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a82:	43d9      	mvns	r1, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a88:	4313      	orrs	r3, r2
         );
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3724      	adds	r7, #36	@ 0x24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
	...

08008a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008aa8:	d301      	bcc.n	8008aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e00f      	b.n	8008ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008aae:	4a0a      	ldr	r2, [pc, #40]	@ (8008ad8 <SysTick_Config+0x40>)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ab6:	210f      	movs	r1, #15
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008abc:	f7ff ff8e 	bl	80089dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ac0:	4b05      	ldr	r3, [pc, #20]	@ (8008ad8 <SysTick_Config+0x40>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ac6:	4b04      	ldr	r3, [pc, #16]	@ (8008ad8 <SysTick_Config+0x40>)
 8008ac8:	2207      	movs	r2, #7
 8008aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	e000e010 	.word	0xe000e010

08008adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7ff ff29 	bl	800893c <__NVIC_SetPriorityGrouping>
}
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	4603      	mov	r3, r0
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	607a      	str	r2, [r7, #4]
 8008afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008b04:	f7ff ff3e 	bl	8008984 <__NVIC_GetPriorityGrouping>
 8008b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	68b9      	ldr	r1, [r7, #8]
 8008b0e:	6978      	ldr	r0, [r7, #20]
 8008b10:	f7ff ff8e 	bl	8008a30 <NVIC_EncodePriority>
 8008b14:	4602      	mov	r2, r0
 8008b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff ff5d 	bl	80089dc <__NVIC_SetPriority>
}
 8008b22:	bf00      	nop
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b082      	sub	sp, #8
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	4603      	mov	r3, r0
 8008b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff ff31 	bl	80089a0 <__NVIC_EnableIRQ>
}
 8008b3e:	bf00      	nop
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7ff ffa2 	bl	8008a98 <SysTick_Config>
 8008b54:	4603      	mov	r3, r0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b6e:	e160      	b.n	8008e32 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	2101      	movs	r1, #1
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 8152 	beq.w	8008e2c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f003 0303 	and.w	r3, r3, #3
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d005      	beq.n	8008ba0 <HAL_GPIO_Init+0x40>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f003 0303 	and.w	r3, r3, #3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d130      	bne.n	8008c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	2203      	movs	r2, #3
 8008bac:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb0:	43db      	mvns	r3, r3
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	68da      	ldr	r2, [r3, #12]
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	fa02 f303 	lsl.w	r3, r2, r3
 8008bde:	43db      	mvns	r3, r3
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	4013      	ands	r3, r2
 8008be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	091b      	lsrs	r3, r3, #4
 8008bec:	f003 0201 	and.w	r2, r3, #1
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f003 0303 	and.w	r3, r3, #3
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d017      	beq.n	8008c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	2203      	movs	r2, #3
 8008c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1e:	43db      	mvns	r3, r3
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	4013      	ands	r3, r2
 8008c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f003 0303 	and.w	r3, r3, #3
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d123      	bne.n	8008c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	08da      	lsrs	r2, r3, #3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3208      	adds	r2, #8
 8008c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	220f      	movs	r2, #15
 8008c62:	fa02 f303 	lsl.w	r3, r2, r3
 8008c66:	43db      	mvns	r3, r3
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	691a      	ldr	r2, [r3, #16]
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	f003 0307 	and.w	r3, r3, #7
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	08da      	lsrs	r2, r3, #3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3208      	adds	r2, #8
 8008c8c:	6939      	ldr	r1, [r7, #16]
 8008c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	2203      	movs	r2, #3
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	43db      	mvns	r3, r3
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f003 0203 	and.w	r2, r3, #3
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 80ac 	beq.w	8008e2c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cd4:	4b5e      	ldr	r3, [pc, #376]	@ (8008e50 <HAL_GPIO_Init+0x2f0>)
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	4a5d      	ldr	r2, [pc, #372]	@ (8008e50 <HAL_GPIO_Init+0x2f0>)
 8008cda:	f043 0301 	orr.w	r3, r3, #1
 8008cde:	6193      	str	r3, [r2, #24]
 8008ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8008e50 <HAL_GPIO_Init+0x2f0>)
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	60bb      	str	r3, [r7, #8]
 8008cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008cec:	4a59      	ldr	r2, [pc, #356]	@ (8008e54 <HAL_GPIO_Init+0x2f4>)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	089b      	lsrs	r3, r3, #2
 8008cf2:	3302      	adds	r3, #2
 8008cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f003 0303 	and.w	r3, r3, #3
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	220f      	movs	r2, #15
 8008d04:	fa02 f303 	lsl.w	r3, r2, r3
 8008d08:	43db      	mvns	r3, r3
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008d16:	d025      	beq.n	8008d64 <HAL_GPIO_Init+0x204>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a4f      	ldr	r2, [pc, #316]	@ (8008e58 <HAL_GPIO_Init+0x2f8>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d01f      	beq.n	8008d60 <HAL_GPIO_Init+0x200>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a4e      	ldr	r2, [pc, #312]	@ (8008e5c <HAL_GPIO_Init+0x2fc>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d019      	beq.n	8008d5c <HAL_GPIO_Init+0x1fc>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a4d      	ldr	r2, [pc, #308]	@ (8008e60 <HAL_GPIO_Init+0x300>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d013      	beq.n	8008d58 <HAL_GPIO_Init+0x1f8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a4c      	ldr	r2, [pc, #304]	@ (8008e64 <HAL_GPIO_Init+0x304>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d00d      	beq.n	8008d54 <HAL_GPIO_Init+0x1f4>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a4b      	ldr	r2, [pc, #300]	@ (8008e68 <HAL_GPIO_Init+0x308>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d007      	beq.n	8008d50 <HAL_GPIO_Init+0x1f0>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a4a      	ldr	r2, [pc, #296]	@ (8008e6c <HAL_GPIO_Init+0x30c>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d101      	bne.n	8008d4c <HAL_GPIO_Init+0x1ec>
 8008d48:	2306      	movs	r3, #6
 8008d4a:	e00c      	b.n	8008d66 <HAL_GPIO_Init+0x206>
 8008d4c:	2307      	movs	r3, #7
 8008d4e:	e00a      	b.n	8008d66 <HAL_GPIO_Init+0x206>
 8008d50:	2305      	movs	r3, #5
 8008d52:	e008      	b.n	8008d66 <HAL_GPIO_Init+0x206>
 8008d54:	2304      	movs	r3, #4
 8008d56:	e006      	b.n	8008d66 <HAL_GPIO_Init+0x206>
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e004      	b.n	8008d66 <HAL_GPIO_Init+0x206>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e002      	b.n	8008d66 <HAL_GPIO_Init+0x206>
 8008d60:	2301      	movs	r3, #1
 8008d62:	e000      	b.n	8008d66 <HAL_GPIO_Init+0x206>
 8008d64:	2300      	movs	r3, #0
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	f002 0203 	and.w	r2, r2, #3
 8008d6c:	0092      	lsls	r2, r2, #2
 8008d6e:	4093      	lsls	r3, r2
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008d76:	4937      	ldr	r1, [pc, #220]	@ (8008e54 <HAL_GPIO_Init+0x2f4>)
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	089b      	lsrs	r3, r3, #2
 8008d7c:	3302      	adds	r3, #2
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d84:	4b3a      	ldr	r3, [pc, #232]	@ (8008e70 <HAL_GPIO_Init+0x310>)
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	43db      	mvns	r3, r3
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	4013      	ands	r3, r2
 8008d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008da8:	4a31      	ldr	r2, [pc, #196]	@ (8008e70 <HAL_GPIO_Init+0x310>)
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008dae:	4b30      	ldr	r3, [pc, #192]	@ (8008e70 <HAL_GPIO_Init+0x310>)
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	43db      	mvns	r3, r3
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4013      	ands	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8008dca:	693a      	ldr	r2, [r7, #16]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008dd2:	4a27      	ldr	r2, [pc, #156]	@ (8008e70 <HAL_GPIO_Init+0x310>)
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008dd8:	4b25      	ldr	r3, [pc, #148]	@ (8008e70 <HAL_GPIO_Init+0x310>)
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	43db      	mvns	r3, r3
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	4013      	ands	r3, r2
 8008de6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8008e70 <HAL_GPIO_Init+0x310>)
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e02:	4b1b      	ldr	r3, [pc, #108]	@ (8008e70 <HAL_GPIO_Init+0x310>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	43db      	mvns	r3, r3
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008e26:	4a12      	ldr	r2, [pc, #72]	@ (8008e70 <HAL_GPIO_Init+0x310>)
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	fa22 f303 	lsr.w	r3, r2, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f47f ae97 	bne.w	8008b70 <HAL_GPIO_Init+0x10>
  }
}
 8008e42:	bf00      	nop
 8008e44:	bf00      	nop
 8008e46:	371c      	adds	r7, #28
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr
 8008e50:	40021000 	.word	0x40021000
 8008e54:	40010000 	.word	0x40010000
 8008e58:	48000400 	.word	0x48000400
 8008e5c:	48000800 	.word	0x48000800
 8008e60:	48000c00 	.word	0x48000c00
 8008e64:	48001000 	.word	0x48001000
 8008e68:	48001400 	.word	0x48001400
 8008e6c:	48001800 	.word	0x48001800
 8008e70:	40010400 	.word	0x40010400

08008e74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	691a      	ldr	r2, [r3, #16]
 8008e84:	887b      	ldrh	r3, [r7, #2]
 8008e86:	4013      	ands	r3, r2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]
 8008e90:	e001      	b.n	8008e96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e92:	2300      	movs	r3, #0
 8008e94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	807b      	strh	r3, [r7, #2]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008eb4:	787b      	ldrb	r3, [r7, #1]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008eba:	887a      	ldrh	r2, [r7, #2]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008ec0:	e002      	b.n	8008ec8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008ec2:	887a      	ldrh	r2, [r7, #2]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008ee6:	887a      	ldrh	r2, [r7, #2]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4013      	ands	r3, r2
 8008eec:	041a      	lsls	r2, r3, #16
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	43d9      	mvns	r1, r3
 8008ef2:	887b      	ldrh	r3, [r7, #2]
 8008ef4:	400b      	ands	r3, r1
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	619a      	str	r2, [r3, #24]
}
 8008efc:	bf00      	nop
 8008efe:	3714      	adds	r7, #20
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008f12:	4b08      	ldr	r3, [pc, #32]	@ (8008f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f14:	695a      	ldr	r2, [r3, #20]
 8008f16:	88fb      	ldrh	r3, [r7, #6]
 8008f18:	4013      	ands	r3, r2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d006      	beq.n	8008f2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008f1e:	4a05      	ldr	r2, [pc, #20]	@ (8008f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f20:	88fb      	ldrh	r3, [r7, #6]
 8008f22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008f24:	88fb      	ldrh	r3, [r7, #6]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 f806 	bl	8008f38 <HAL_GPIO_EXTI_Callback>
  }
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	40010400 	.word	0x40010400

08008f38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008f42:	bf00      	nop
 8008f44:	370c      	adds	r7, #12
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
	...

08008f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008f5c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008f60:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008f66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	f001 b80a 	b.w	8009f8a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8008f7a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 8161 	beq.w	800924e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008f8c:	4bae      	ldr	r3, [pc, #696]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f003 030c 	and.w	r3, r3, #12
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d00c      	beq.n	8008fb2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008f98:	4bab      	ldr	r3, [pc, #684]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f003 030c 	and.w	r3, r3, #12
 8008fa0:	2b08      	cmp	r3, #8
 8008fa2:	d157      	bne.n	8009054 <HAL_RCC_OscConfig+0x104>
 8008fa4:	4ba8      	ldr	r3, [pc, #672]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8008fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fb0:	d150      	bne.n	8009054 <HAL_RCC_OscConfig+0x104>
 8008fb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008fb6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8008fbe:	fa93 f3a3 	rbit	r3, r3
 8008fc2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008fc6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fca:	fab3 f383 	clz	r3, r3
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b3f      	cmp	r3, #63	@ 0x3f
 8008fd2:	d802      	bhi.n	8008fda <HAL_RCC_OscConfig+0x8a>
 8008fd4:	4b9c      	ldr	r3, [pc, #624]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	e015      	b.n	8009006 <HAL_RCC_OscConfig+0xb6>
 8008fda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008fde:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fe2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8008fe6:	fa93 f3a3 	rbit	r3, r3
 8008fea:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8008fee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008ff2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8008ff6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8008ffa:	fa93 f3a3 	rbit	r3, r3
 8008ffe:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8009002:	4b91      	ldr	r3, [pc, #580]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 8009004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009006:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800900a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800900e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8009012:	fa92 f2a2 	rbit	r2, r2
 8009016:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800901a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800901e:	fab2 f282 	clz	r2, r2
 8009022:	b2d2      	uxtb	r2, r2
 8009024:	f042 0220 	orr.w	r2, r2, #32
 8009028:	b2d2      	uxtb	r2, r2
 800902a:	f002 021f 	and.w	r2, r2, #31
 800902e:	2101      	movs	r1, #1
 8009030:	fa01 f202 	lsl.w	r2, r1, r2
 8009034:	4013      	ands	r3, r2
 8009036:	2b00      	cmp	r3, #0
 8009038:	f000 8108 	beq.w	800924c <HAL_RCC_OscConfig+0x2fc>
 800903c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009040:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	f040 80ff 	bne.w	800924c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	f000 bf9b 	b.w	8009f8a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009054:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009058:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009064:	d106      	bne.n	8009074 <HAL_RCC_OscConfig+0x124>
 8009066:	4b78      	ldr	r3, [pc, #480]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a77      	ldr	r2, [pc, #476]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 800906c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009070:	6013      	str	r3, [r2, #0]
 8009072:	e036      	b.n	80090e2 <HAL_RCC_OscConfig+0x192>
 8009074:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009078:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10c      	bne.n	800909e <HAL_RCC_OscConfig+0x14e>
 8009084:	4b70      	ldr	r3, [pc, #448]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a6f      	ldr	r2, [pc, #444]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 800908a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	4b6d      	ldr	r3, [pc, #436]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a6c      	ldr	r2, [pc, #432]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 8009096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	e021      	b.n	80090e2 <HAL_RCC_OscConfig+0x192>
 800909e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80090a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80090ae:	d10c      	bne.n	80090ca <HAL_RCC_OscConfig+0x17a>
 80090b0:	4b65      	ldr	r3, [pc, #404]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a64      	ldr	r2, [pc, #400]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 80090b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090ba:	6013      	str	r3, [r2, #0]
 80090bc:	4b62      	ldr	r3, [pc, #392]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a61      	ldr	r2, [pc, #388]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 80090c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	e00b      	b.n	80090e2 <HAL_RCC_OscConfig+0x192>
 80090ca:	4b5f      	ldr	r3, [pc, #380]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a5e      	ldr	r2, [pc, #376]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 80090d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	4b5c      	ldr	r3, [pc, #368]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a5b      	ldr	r2, [pc, #364]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 80090dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090e0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80090e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d054      	beq.n	800919c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090f2:	f7ff fbf3 	bl	80088dc <HAL_GetTick>
 80090f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090fa:	e00a      	b.n	8009112 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090fc:	f7ff fbee 	bl	80088dc <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	2b64      	cmp	r3, #100	@ 0x64
 800910a:	d902      	bls.n	8009112 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	f000 bf3c 	b.w	8009f8a <HAL_RCC_OscConfig+0x103a>
 8009112:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009116:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800911a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800911e:	fa93 f3a3 	rbit	r3, r3
 8009122:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8009126:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800912a:	fab3 f383 	clz	r3, r3
 800912e:	b2db      	uxtb	r3, r3
 8009130:	2b3f      	cmp	r3, #63	@ 0x3f
 8009132:	d802      	bhi.n	800913a <HAL_RCC_OscConfig+0x1ea>
 8009134:	4b44      	ldr	r3, [pc, #272]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	e015      	b.n	8009166 <HAL_RCC_OscConfig+0x216>
 800913a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800913e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009142:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8009146:	fa93 f3a3 	rbit	r3, r3
 800914a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800914e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009152:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8009156:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800915a:	fa93 f3a3 	rbit	r3, r3
 800915e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8009162:	4b39      	ldr	r3, [pc, #228]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 8009164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009166:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800916a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800916e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8009172:	fa92 f2a2 	rbit	r2, r2
 8009176:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800917a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800917e:	fab2 f282 	clz	r2, r2
 8009182:	b2d2      	uxtb	r2, r2
 8009184:	f042 0220 	orr.w	r2, r2, #32
 8009188:	b2d2      	uxtb	r2, r2
 800918a:	f002 021f 	and.w	r2, r2, #31
 800918e:	2101      	movs	r1, #1
 8009190:	fa01 f202 	lsl.w	r2, r1, r2
 8009194:	4013      	ands	r3, r2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0b0      	beq.n	80090fc <HAL_RCC_OscConfig+0x1ac>
 800919a:	e058      	b.n	800924e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800919c:	f7ff fb9e 	bl	80088dc <HAL_GetTick>
 80091a0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091a4:	e00a      	b.n	80091bc <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091a6:	f7ff fb99 	bl	80088dc <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	2b64      	cmp	r3, #100	@ 0x64
 80091b4:	d902      	bls.n	80091bc <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	f000 bee7 	b.w	8009f8a <HAL_RCC_OscConfig+0x103a>
 80091bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80091c0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80091c8:	fa93 f3a3 	rbit	r3, r3
 80091cc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80091d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091d4:	fab3 f383 	clz	r3, r3
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b3f      	cmp	r3, #63	@ 0x3f
 80091dc:	d802      	bhi.n	80091e4 <HAL_RCC_OscConfig+0x294>
 80091de:	4b1a      	ldr	r3, [pc, #104]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	e015      	b.n	8009210 <HAL_RCC_OscConfig+0x2c0>
 80091e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80091e8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80091f0:	fa93 f3a3 	rbit	r3, r3
 80091f4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80091f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80091fc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8009200:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8009204:	fa93 f3a3 	rbit	r3, r3
 8009208:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800920c:	4b0e      	ldr	r3, [pc, #56]	@ (8009248 <HAL_RCC_OscConfig+0x2f8>)
 800920e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009210:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009214:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8009218:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800921c:	fa92 f2a2 	rbit	r2, r2
 8009220:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8009224:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8009228:	fab2 f282 	clz	r2, r2
 800922c:	b2d2      	uxtb	r2, r2
 800922e:	f042 0220 	orr.w	r2, r2, #32
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	f002 021f 	and.w	r2, r2, #31
 8009238:	2101      	movs	r1, #1
 800923a:	fa01 f202 	lsl.w	r2, r1, r2
 800923e:	4013      	ands	r3, r2
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1b0      	bne.n	80091a6 <HAL_RCC_OscConfig+0x256>
 8009244:	e003      	b.n	800924e <HAL_RCC_OscConfig+0x2fe>
 8009246:	bf00      	nop
 8009248:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800924c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800924e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009252:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0302 	and.w	r3, r3, #2
 800925e:	2b00      	cmp	r3, #0
 8009260:	f000 816d 	beq.w	800953e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8009264:	4bcd      	ldr	r3, [pc, #820]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f003 030c 	and.w	r3, r3, #12
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00c      	beq.n	800928a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009270:	4bca      	ldr	r3, [pc, #808]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	f003 030c 	and.w	r3, r3, #12
 8009278:	2b08      	cmp	r3, #8
 800927a:	d16e      	bne.n	800935a <HAL_RCC_OscConfig+0x40a>
 800927c:	4bc7      	ldr	r3, [pc, #796]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8009284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009288:	d167      	bne.n	800935a <HAL_RCC_OscConfig+0x40a>
 800928a:	2302      	movs	r3, #2
 800928c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009290:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8009294:	fa93 f3a3 	rbit	r3, r3
 8009298:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800929c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092a0:	fab3 f383 	clz	r3, r3
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80092a8:	d802      	bhi.n	80092b0 <HAL_RCC_OscConfig+0x360>
 80092aa:	4bbc      	ldr	r3, [pc, #752]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	e013      	b.n	80092d8 <HAL_RCC_OscConfig+0x388>
 80092b0:	2302      	movs	r3, #2
 80092b2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80092ba:	fa93 f3a3 	rbit	r3, r3
 80092be:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80092c2:	2302      	movs	r3, #2
 80092c4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80092c8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80092cc:	fa93 f3a3 	rbit	r3, r3
 80092d0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80092d4:	4bb1      	ldr	r3, [pc, #708]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 80092d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d8:	2202      	movs	r2, #2
 80092da:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80092de:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80092e2:	fa92 f2a2 	rbit	r2, r2
 80092e6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80092ea:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80092ee:	fab2 f282 	clz	r2, r2
 80092f2:	b2d2      	uxtb	r2, r2
 80092f4:	f042 0220 	orr.w	r2, r2, #32
 80092f8:	b2d2      	uxtb	r2, r2
 80092fa:	f002 021f 	and.w	r2, r2, #31
 80092fe:	2101      	movs	r1, #1
 8009300:	fa01 f202 	lsl.w	r2, r1, r2
 8009304:	4013      	ands	r3, r2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00a      	beq.n	8009320 <HAL_RCC_OscConfig+0x3d0>
 800930a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800930e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d002      	beq.n	8009320 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	f000 be35 	b.w	8009f8a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009320:	4b9e      	ldr	r3, [pc, #632]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800932c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	21f8      	movs	r1, #248	@ 0xf8
 8009336:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800933a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800933e:	fa91 f1a1 	rbit	r1, r1
 8009342:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8009346:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800934a:	fab1 f181 	clz	r1, r1
 800934e:	b2c9      	uxtb	r1, r1
 8009350:	408b      	lsls	r3, r1
 8009352:	4992      	ldr	r1, [pc, #584]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 8009354:	4313      	orrs	r3, r2
 8009356:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009358:	e0f1      	b.n	800953e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800935a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800935e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 8083 	beq.w	8009472 <HAL_RCC_OscConfig+0x522>
 800936c:	2301      	movs	r3, #1
 800936e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009372:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009376:	fa93 f3a3 	rbit	r3, r3
 800937a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800937e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009382:	fab3 f383 	clz	r3, r3
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800938c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	461a      	mov	r2, r3
 8009394:	2301      	movs	r3, #1
 8009396:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009398:	f7ff faa0 	bl	80088dc <HAL_GetTick>
 800939c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093a0:	e00a      	b.n	80093b8 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093a2:	f7ff fa9b 	bl	80088dc <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d902      	bls.n	80093b8 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	f000 bde9 	b.w	8009f8a <HAL_RCC_OscConfig+0x103a>
 80093b8:	2302      	movs	r3, #2
 80093ba:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093be:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80093c2:	fa93 f3a3 	rbit	r3, r3
 80093c6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80093ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093ce:	fab3 f383 	clz	r3, r3
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80093d6:	d802      	bhi.n	80093de <HAL_RCC_OscConfig+0x48e>
 80093d8:	4b70      	ldr	r3, [pc, #448]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	e013      	b.n	8009406 <HAL_RCC_OscConfig+0x4b6>
 80093de:	2302      	movs	r3, #2
 80093e0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80093e8:	fa93 f3a3 	rbit	r3, r3
 80093ec:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80093f0:	2302      	movs	r3, #2
 80093f2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80093f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80093fa:	fa93 f3a3 	rbit	r3, r3
 80093fe:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8009402:	4b66      	ldr	r3, [pc, #408]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 8009404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009406:	2202      	movs	r2, #2
 8009408:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800940c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009410:	fa92 f2a2 	rbit	r2, r2
 8009414:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8009418:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800941c:	fab2 f282 	clz	r2, r2
 8009420:	b2d2      	uxtb	r2, r2
 8009422:	f042 0220 	orr.w	r2, r2, #32
 8009426:	b2d2      	uxtb	r2, r2
 8009428:	f002 021f 	and.w	r2, r2, #31
 800942c:	2101      	movs	r1, #1
 800942e:	fa01 f202 	lsl.w	r2, r1, r2
 8009432:	4013      	ands	r3, r2
 8009434:	2b00      	cmp	r3, #0
 8009436:	d0b4      	beq.n	80093a2 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009438:	4b58      	ldr	r3, [pc, #352]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009444:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	21f8      	movs	r1, #248	@ 0xf8
 800944e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009452:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8009456:	fa91 f1a1 	rbit	r1, r1
 800945a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800945e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8009462:	fab1 f181 	clz	r1, r1
 8009466:	b2c9      	uxtb	r1, r1
 8009468:	408b      	lsls	r3, r1
 800946a:	494c      	ldr	r1, [pc, #304]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 800946c:	4313      	orrs	r3, r2
 800946e:	600b      	str	r3, [r1, #0]
 8009470:	e065      	b.n	800953e <HAL_RCC_OscConfig+0x5ee>
 8009472:	2301      	movs	r3, #1
 8009474:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009478:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800947c:	fa93 f3a3 	rbit	r3, r3
 8009480:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8009484:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009488:	fab3 f383 	clz	r3, r3
 800948c:	b2db      	uxtb	r3, r3
 800948e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8009492:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	461a      	mov	r2, r3
 800949a:	2300      	movs	r3, #0
 800949c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800949e:	f7ff fa1d 	bl	80088dc <HAL_GetTick>
 80094a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094a6:	e00a      	b.n	80094be <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094a8:	f7ff fa18 	bl	80088dc <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d902      	bls.n	80094be <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	f000 bd66 	b.w	8009f8a <HAL_RCC_OscConfig+0x103a>
 80094be:	2302      	movs	r3, #2
 80094c0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094c8:	fa93 f3a3 	rbit	r3, r3
 80094cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80094d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094d4:	fab3 f383 	clz	r3, r3
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b3f      	cmp	r3, #63	@ 0x3f
 80094dc:	d802      	bhi.n	80094e4 <HAL_RCC_OscConfig+0x594>
 80094de:	4b2f      	ldr	r3, [pc, #188]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	e013      	b.n	800950c <HAL_RCC_OscConfig+0x5bc>
 80094e4:	2302      	movs	r3, #2
 80094e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80094ee:	fa93 f3a3 	rbit	r3, r3
 80094f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80094f6:	2302      	movs	r3, #2
 80094f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80094fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8009500:	fa93 f3a3 	rbit	r3, r3
 8009504:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8009508:	4b24      	ldr	r3, [pc, #144]	@ (800959c <HAL_RCC_OscConfig+0x64c>)
 800950a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800950c:	2202      	movs	r2, #2
 800950e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8009512:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8009516:	fa92 f2a2 	rbit	r2, r2
 800951a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800951e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009522:	fab2 f282 	clz	r2, r2
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	f042 0220 	orr.w	r2, r2, #32
 800952c:	b2d2      	uxtb	r2, r2
 800952e:	f002 021f 	and.w	r2, r2, #31
 8009532:	2101      	movs	r1, #1
 8009534:	fa01 f202 	lsl.w	r2, r1, r2
 8009538:	4013      	ands	r3, r2
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1b4      	bne.n	80094a8 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800953e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009542:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 0308 	and.w	r3, r3, #8
 800954e:	2b00      	cmp	r3, #0
 8009550:	f000 8119 	beq.w	8009786 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009558:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 8082 	beq.w	800966a <HAL_RCC_OscConfig+0x71a>
 8009566:	2301      	movs	r3, #1
 8009568:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800956c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009570:	fa93 f3a3 	rbit	r3, r3
 8009574:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8009578:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800957c:	fab3 f383 	clz	r3, r3
 8009580:	b2db      	uxtb	r3, r3
 8009582:	461a      	mov	r2, r3
 8009584:	4b06      	ldr	r3, [pc, #24]	@ (80095a0 <HAL_RCC_OscConfig+0x650>)
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	461a      	mov	r2, r3
 800958c:	2301      	movs	r3, #1
 800958e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009590:	f7ff f9a4 	bl	80088dc <HAL_GetTick>
 8009594:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009598:	e00f      	b.n	80095ba <HAL_RCC_OscConfig+0x66a>
 800959a:	bf00      	nop
 800959c:	40021000 	.word	0x40021000
 80095a0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095a4:	f7ff f99a 	bl	80088dc <HAL_GetTick>
 80095a8:	4602      	mov	r2, r0
 80095aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d902      	bls.n	80095ba <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	f000 bce8 	b.w	8009f8a <HAL_RCC_OscConfig+0x103a>
 80095ba:	2302      	movs	r3, #2
 80095bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095c4:	fa93 f2a3 	rbit	r2, r3
 80095c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80095cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80095d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095da:	2202      	movs	r2, #2
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80095e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	fa93 f2a3 	rbit	r2, r3
 80095ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80095f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80095fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80095fe:	2202      	movs	r2, #2
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009606:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	fa93 f2a3 	rbit	r2, r3
 8009610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009614:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009618:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800961a:	4bb0      	ldr	r3, [pc, #704]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 800961c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800961e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009622:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009626:	2102      	movs	r1, #2
 8009628:	6019      	str	r1, [r3, #0]
 800962a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800962e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	fa93 f1a3 	rbit	r1, r3
 8009638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800963c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8009640:	6019      	str	r1, [r3, #0]
  return result;
 8009642:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009646:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	fab3 f383 	clz	r3, r3
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009656:	b2db      	uxtb	r3, r3
 8009658:	f003 031f 	and.w	r3, r3, #31
 800965c:	2101      	movs	r1, #1
 800965e:	fa01 f303 	lsl.w	r3, r1, r3
 8009662:	4013      	ands	r3, r2
 8009664:	2b00      	cmp	r3, #0
 8009666:	d09d      	beq.n	80095a4 <HAL_RCC_OscConfig+0x654>
 8009668:	e08d      	b.n	8009786 <HAL_RCC_OscConfig+0x836>
 800966a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800966e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8009672:	2201      	movs	r2, #1
 8009674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009676:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800967a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	fa93 f2a3 	rbit	r2, r3
 8009684:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009688:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800968c:	601a      	str	r2, [r3, #0]
  return result;
 800968e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009692:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8009696:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009698:	fab3 f383 	clz	r3, r3
 800969c:	b2db      	uxtb	r3, r3
 800969e:	461a      	mov	r2, r3
 80096a0:	4b8f      	ldr	r3, [pc, #572]	@ (80098e0 <HAL_RCC_OscConfig+0x990>)
 80096a2:	4413      	add	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	461a      	mov	r2, r3
 80096a8:	2300      	movs	r3, #0
 80096aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096ac:	f7ff f916 	bl	80088dc <HAL_GetTick>
 80096b0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096b4:	e00a      	b.n	80096cc <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096b6:	f7ff f911 	bl	80088dc <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d902      	bls.n	80096cc <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80096c6:	2303      	movs	r3, #3
 80096c8:	f000 bc5f 	b.w	8009f8a <HAL_RCC_OscConfig+0x103a>
 80096cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80096d4:	2202      	movs	r2, #2
 80096d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	fa93 f2a3 	rbit	r2, r3
 80096e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80096ee:	601a      	str	r2, [r3, #0]
 80096f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80096f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80096f8:	2202      	movs	r2, #2
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009700:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	fa93 f2a3 	rbit	r2, r3
 800970a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800970e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009718:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800971c:	2202      	movs	r2, #2
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009724:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	fa93 f2a3 	rbit	r2, r3
 800972e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009732:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009736:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009738:	4b68      	ldr	r3, [pc, #416]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 800973a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800973c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009740:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8009744:	2102      	movs	r1, #2
 8009746:	6019      	str	r1, [r3, #0]
 8009748:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800974c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	fa93 f1a3 	rbit	r1, r3
 8009756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800975a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800975e:	6019      	str	r1, [r3, #0]
  return result;
 8009760:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009764:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	fab3 f383 	clz	r3, r3
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009774:	b2db      	uxtb	r3, r3
 8009776:	f003 031f 	and.w	r3, r3, #31
 800977a:	2101      	movs	r1, #1
 800977c:	fa01 f303 	lsl.w	r3, r1, r3
 8009780:	4013      	ands	r3, r2
 8009782:	2b00      	cmp	r3, #0
 8009784:	d197      	bne.n	80096b6 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800978a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0304 	and.w	r3, r3, #4
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 819c 	beq.w	8009ad4 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 800979c:	2300      	movs	r3, #0
 800979e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097a2:	4b4e      	ldr	r3, [pc, #312]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d116      	bne.n	80097dc <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097ae:	4b4b      	ldr	r3, [pc, #300]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	4a4a      	ldr	r2, [pc, #296]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 80097b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80097b8:	61d3      	str	r3, [r2, #28]
 80097ba:	4b48      	ldr	r3, [pc, #288]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80097c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80097c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80097d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80097d4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80097d6:	2301      	movs	r3, #1
 80097d8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097dc:	4b41      	ldr	r3, [pc, #260]	@ (80098e4 <HAL_RCC_OscConfig+0x994>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d11a      	bne.n	800981e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80097e8:	4b3e      	ldr	r3, [pc, #248]	@ (80098e4 <HAL_RCC_OscConfig+0x994>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a3d      	ldr	r2, [pc, #244]	@ (80098e4 <HAL_RCC_OscConfig+0x994>)
 80097ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097f2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097f4:	f7ff f872 	bl	80088dc <HAL_GetTick>
 80097f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097fc:	e009      	b.n	8009812 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097fe:	f7ff f86d 	bl	80088dc <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2b64      	cmp	r3, #100	@ 0x64
 800980c:	d901      	bls.n	8009812 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e3bb      	b.n	8009f8a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009812:	4b34      	ldr	r3, [pc, #208]	@ (80098e4 <HAL_RCC_OscConfig+0x994>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800981a:	2b00      	cmp	r3, #0
 800981c:	d0ef      	beq.n	80097fe <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800981e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009822:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d106      	bne.n	800983c <HAL_RCC_OscConfig+0x8ec>
 800982e:	4b2b      	ldr	r3, [pc, #172]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	4a2a      	ldr	r2, [pc, #168]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 8009834:	f043 0301 	orr.w	r3, r3, #1
 8009838:	6213      	str	r3, [r2, #32]
 800983a:	e035      	b.n	80098a8 <HAL_RCC_OscConfig+0x958>
 800983c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009840:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10c      	bne.n	8009866 <HAL_RCC_OscConfig+0x916>
 800984c:	4b23      	ldr	r3, [pc, #140]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	4a22      	ldr	r2, [pc, #136]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 8009852:	f023 0301 	bic.w	r3, r3, #1
 8009856:	6213      	str	r3, [r2, #32]
 8009858:	4b20      	ldr	r3, [pc, #128]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	4a1f      	ldr	r2, [pc, #124]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 800985e:	f023 0304 	bic.w	r3, r3, #4
 8009862:	6213      	str	r3, [r2, #32]
 8009864:	e020      	b.n	80098a8 <HAL_RCC_OscConfig+0x958>
 8009866:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800986a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	2b05      	cmp	r3, #5
 8009874:	d10c      	bne.n	8009890 <HAL_RCC_OscConfig+0x940>
 8009876:	4b19      	ldr	r3, [pc, #100]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	4a18      	ldr	r2, [pc, #96]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 800987c:	f043 0304 	orr.w	r3, r3, #4
 8009880:	6213      	str	r3, [r2, #32]
 8009882:	4b16      	ldr	r3, [pc, #88]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 8009884:	6a1b      	ldr	r3, [r3, #32]
 8009886:	4a15      	ldr	r2, [pc, #84]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 8009888:	f043 0301 	orr.w	r3, r3, #1
 800988c:	6213      	str	r3, [r2, #32]
 800988e:	e00b      	b.n	80098a8 <HAL_RCC_OscConfig+0x958>
 8009890:	4b12      	ldr	r3, [pc, #72]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 8009892:	6a1b      	ldr	r3, [r3, #32]
 8009894:	4a11      	ldr	r2, [pc, #68]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 8009896:	f023 0301 	bic.w	r3, r3, #1
 800989a:	6213      	str	r3, [r2, #32]
 800989c:	4b0f      	ldr	r3, [pc, #60]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	4a0e      	ldr	r2, [pc, #56]	@ (80098dc <HAL_RCC_OscConfig+0x98c>)
 80098a2:	f023 0304 	bic.w	r3, r3, #4
 80098a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80098a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80098ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f000 8085 	beq.w	80099c4 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098ba:	f7ff f80f 	bl	80088dc <HAL_GetTick>
 80098be:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098c2:	e011      	b.n	80098e8 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098c4:	f7ff f80a 	bl	80088dc <HAL_GetTick>
 80098c8:	4602      	mov	r2, r0
 80098ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d907      	bls.n	80098e8 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e356      	b.n	8009f8a <HAL_RCC_OscConfig+0x103a>
 80098dc:	40021000 	.word	0x40021000
 80098e0:	10908120 	.word	0x10908120
 80098e4:	40007000 	.word	0x40007000
 80098e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80098ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80098f0:	2202      	movs	r2, #2
 80098f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80098f8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	fa93 f2a3 	rbit	r2, r3
 8009902:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009906:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009910:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8009914:	2202      	movs	r2, #2
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800991c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	fa93 f2a3 	rbit	r2, r3
 8009926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800992a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800992e:	601a      	str	r2, [r3, #0]
  return result;
 8009930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009934:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8009938:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800993a:	fab3 f383 	clz	r3, r3
 800993e:	b2db      	uxtb	r3, r3
 8009940:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d102      	bne.n	8009950 <HAL_RCC_OscConfig+0xa00>
 800994a:	4b98      	ldr	r3, [pc, #608]	@ (8009bac <HAL_RCC_OscConfig+0xc5c>)
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	e013      	b.n	8009978 <HAL_RCC_OscConfig+0xa28>
 8009950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009954:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8009958:	2202      	movs	r2, #2
 800995a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800995c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009960:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	fa93 f2a3 	rbit	r2, r3
 800996a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800996e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	4b8d      	ldr	r3, [pc, #564]	@ (8009bac <HAL_RCC_OscConfig+0xc5c>)
 8009976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009978:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800997c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8009980:	2102      	movs	r1, #2
 8009982:	6011      	str	r1, [r2, #0]
 8009984:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009988:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800998c:	6812      	ldr	r2, [r2, #0]
 800998e:	fa92 f1a2 	rbit	r1, r2
 8009992:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009996:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800999a:	6011      	str	r1, [r2, #0]
  return result;
 800999c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80099a0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80099a4:	6812      	ldr	r2, [r2, #0]
 80099a6:	fab2 f282 	clz	r2, r2
 80099aa:	b2d2      	uxtb	r2, r2
 80099ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099b0:	b2d2      	uxtb	r2, r2
 80099b2:	f002 021f 	and.w	r2, r2, #31
 80099b6:	2101      	movs	r1, #1
 80099b8:	fa01 f202 	lsl.w	r2, r1, r2
 80099bc:	4013      	ands	r3, r2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d080      	beq.n	80098c4 <HAL_RCC_OscConfig+0x974>
 80099c2:	e07d      	b.n	8009ac0 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099c4:	f7fe ff8a 	bl	80088dc <HAL_GetTick>
 80099c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099cc:	e00b      	b.n	80099e6 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099ce:	f7fe ff85 	bl	80088dc <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099de:	4293      	cmp	r3, r2
 80099e0:	d901      	bls.n	80099e6 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e2d1      	b.n	8009f8a <HAL_RCC_OscConfig+0x103a>
 80099e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80099ea:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80099ee:	2202      	movs	r2, #2
 80099f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80099f6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	fa93 f2a3 	rbit	r2, r3
 8009a00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a04:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a0e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8009a12:	2202      	movs	r2, #2
 8009a14:	601a      	str	r2, [r3, #0]
 8009a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a1a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	fa93 f2a3 	rbit	r2, r3
 8009a24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a28:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8009a2c:	601a      	str	r2, [r3, #0]
  return result;
 8009a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a32:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8009a36:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a38:	fab3 f383 	clz	r3, r3
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d102      	bne.n	8009a4e <HAL_RCC_OscConfig+0xafe>
 8009a48:	4b58      	ldr	r3, [pc, #352]	@ (8009bac <HAL_RCC_OscConfig+0xc5c>)
 8009a4a:	6a1b      	ldr	r3, [r3, #32]
 8009a4c:	e013      	b.n	8009a76 <HAL_RCC_OscConfig+0xb26>
 8009a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a52:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8009a56:	2202      	movs	r2, #2
 8009a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a5e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	fa93 f2a3 	rbit	r2, r3
 8009a68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009a6c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	4b4e      	ldr	r3, [pc, #312]	@ (8009bac <HAL_RCC_OscConfig+0xc5c>)
 8009a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a76:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009a7a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8009a7e:	2102      	movs	r1, #2
 8009a80:	6011      	str	r1, [r2, #0]
 8009a82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009a86:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8009a8a:	6812      	ldr	r2, [r2, #0]
 8009a8c:	fa92 f1a2 	rbit	r1, r2
 8009a90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009a94:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8009a98:	6011      	str	r1, [r2, #0]
  return result;
 8009a9a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009a9e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8009aa2:	6812      	ldr	r2, [r2, #0]
 8009aa4:	fab2 f282 	clz	r2, r2
 8009aa8:	b2d2      	uxtb	r2, r2
 8009aaa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	f002 021f 	and.w	r2, r2, #31
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8009aba:	4013      	ands	r3, r2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d186      	bne.n	80099ce <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009ac0:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d105      	bne.n	8009ad4 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ac8:	4b38      	ldr	r3, [pc, #224]	@ (8009bac <HAL_RCC_OscConfig+0xc5c>)
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	4a37      	ldr	r2, [pc, #220]	@ (8009bac <HAL_RCC_OscConfig+0xc5c>)
 8009ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ad2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ad4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009ad8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 8251 	beq.w	8009f88 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ae6:	4b31      	ldr	r3, [pc, #196]	@ (8009bac <HAL_RCC_OscConfig+0xc5c>)
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f003 030c 	and.w	r3, r3, #12
 8009aee:	2b08      	cmp	r3, #8
 8009af0:	f000 820f 	beq.w	8009f12 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009af4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009af8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	f040 8165 	bne.w	8009dd0 <HAL_RCC_OscConfig+0xe80>
 8009b06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b0a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009b0e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b18:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	fa93 f2a3 	rbit	r2, r3
 8009b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b26:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009b2a:	601a      	str	r2, [r3, #0]
  return result;
 8009b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b30:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009b34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b36:	fab3 f383 	clz	r3, r3
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8009b40:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	461a      	mov	r2, r3
 8009b48:	2300      	movs	r3, #0
 8009b4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b4c:	f7fe fec6 	bl	80088dc <HAL_GetTick>
 8009b50:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b54:	e009      	b.n	8009b6a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b56:	f7fe fec1 	bl	80088dc <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e20f      	b.n	8009f8a <HAL_RCC_OscConfig+0x103a>
 8009b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b6e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009b72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009b76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b7c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	fa93 f2a3 	rbit	r2, r3
 8009b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b8a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009b8e:	601a      	str	r2, [r3, #0]
  return result;
 8009b90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009b94:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009b98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b9a:	fab3 f383 	clz	r3, r3
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b3f      	cmp	r3, #63	@ 0x3f
 8009ba2:	d805      	bhi.n	8009bb0 <HAL_RCC_OscConfig+0xc60>
 8009ba4:	4b01      	ldr	r3, [pc, #4]	@ (8009bac <HAL_RCC_OscConfig+0xc5c>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	e02a      	b.n	8009c00 <HAL_RCC_OscConfig+0xcb0>
 8009baa:	bf00      	nop
 8009bac:	40021000 	.word	0x40021000
 8009bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009bb4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009bb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009bc2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	fa93 f2a3 	rbit	r2, r3
 8009bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009bd0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009bda:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8009bde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009be8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	fa93 f2a3 	rbit	r2, r3
 8009bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009bf6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	4bca      	ldr	r3, [pc, #808]	@ (8009f28 <HAL_RCC_OscConfig+0xfd8>)
 8009bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009c04:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8009c08:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8009c0c:	6011      	str	r1, [r2, #0]
 8009c0e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009c12:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8009c16:	6812      	ldr	r2, [r2, #0]
 8009c18:	fa92 f1a2 	rbit	r1, r2
 8009c1c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009c20:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8009c24:	6011      	str	r1, [r2, #0]
  return result;
 8009c26:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009c2a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8009c2e:	6812      	ldr	r2, [r2, #0]
 8009c30:	fab2 f282 	clz	r2, r2
 8009c34:	b2d2      	uxtb	r2, r2
 8009c36:	f042 0220 	orr.w	r2, r2, #32
 8009c3a:	b2d2      	uxtb	r2, r2
 8009c3c:	f002 021f 	and.w	r2, r2, #31
 8009c40:	2101      	movs	r1, #1
 8009c42:	fa01 f202 	lsl.w	r2, r1, r2
 8009c46:	4013      	ands	r3, r2
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d184      	bne.n	8009b56 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c4c:	4bb6      	ldr	r3, [pc, #728]	@ (8009f28 <HAL_RCC_OscConfig+0xfd8>)
 8009c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c50:	f023 020f 	bic.w	r2, r3, #15
 8009c54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009c58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c60:	49b1      	ldr	r1, [pc, #708]	@ (8009f28 <HAL_RCC_OscConfig+0xfd8>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009c66:	4bb0      	ldr	r3, [pc, #704]	@ (8009f28 <HAL_RCC_OscConfig+0xfd8>)
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8009c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009c72:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6a19      	ldr	r1, [r3, #32]
 8009c7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009c7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	69db      	ldr	r3, [r3, #28]
 8009c86:	430b      	orrs	r3, r1
 8009c88:	49a7      	ldr	r1, [pc, #668]	@ (8009f28 <HAL_RCC_OscConfig+0xfd8>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	604b      	str	r3, [r1, #4]
 8009c8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009c92:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8009c96:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009ca0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	fa93 f2a3 	rbit	r2, r3
 8009caa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009cae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8009cb2:	601a      	str	r2, [r3, #0]
  return result;
 8009cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009cb8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8009cbc:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009cbe:	fab3 f383 	clz	r3, r3
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8009cc8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	461a      	mov	r2, r3
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cd4:	f7fe fe02 	bl	80088dc <HAL_GetTick>
 8009cd8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009cdc:	e009      	b.n	8009cf2 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cde:	f7fe fdfd 	bl	80088dc <HAL_GetTick>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d901      	bls.n	8009cf2 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	e14b      	b.n	8009f8a <HAL_RCC_OscConfig+0x103a>
 8009cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009cf6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8009cfa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d04:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	fa93 f2a3 	rbit	r2, r3
 8009d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d12:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8009d16:	601a      	str	r2, [r3, #0]
  return result;
 8009d18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d1c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8009d20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009d22:	fab3 f383 	clz	r3, r3
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b3f      	cmp	r3, #63	@ 0x3f
 8009d2a:	d802      	bhi.n	8009d32 <HAL_RCC_OscConfig+0xde2>
 8009d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8009f28 <HAL_RCC_OscConfig+0xfd8>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	e027      	b.n	8009d82 <HAL_RCC_OscConfig+0xe32>
 8009d32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d36:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8009d3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d44:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	fa93 f2a3 	rbit	r2, r3
 8009d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d52:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d5c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8009d60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d6a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	fa93 f2a3 	rbit	r2, r3
 8009d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009d78:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8009f28 <HAL_RCC_OscConfig+0xfd8>)
 8009d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009d86:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8009d8a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8009d8e:	6011      	str	r1, [r2, #0]
 8009d90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009d94:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8009d98:	6812      	ldr	r2, [r2, #0]
 8009d9a:	fa92 f1a2 	rbit	r1, r2
 8009d9e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009da2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8009da6:	6011      	str	r1, [r2, #0]
  return result;
 8009da8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009dac:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8009db0:	6812      	ldr	r2, [r2, #0]
 8009db2:	fab2 f282 	clz	r2, r2
 8009db6:	b2d2      	uxtb	r2, r2
 8009db8:	f042 0220 	orr.w	r2, r2, #32
 8009dbc:	b2d2      	uxtb	r2, r2
 8009dbe:	f002 021f 	and.w	r2, r2, #31
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8009dc8:	4013      	ands	r3, r2
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d087      	beq.n	8009cde <HAL_RCC_OscConfig+0xd8e>
 8009dce:	e0db      	b.n	8009f88 <HAL_RCC_OscConfig+0x1038>
 8009dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009dd4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8009dd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009de2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	fa93 f2a3 	rbit	r2, r3
 8009dec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009df0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8009df4:	601a      	str	r2, [r3, #0]
  return result;
 8009df6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009dfa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8009dfe:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e00:	fab3 f383 	clz	r3, r3
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8009e0a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	461a      	mov	r2, r3
 8009e12:	2300      	movs	r3, #0
 8009e14:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e16:	f7fe fd61 	bl	80088dc <HAL_GetTick>
 8009e1a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e1e:	e009      	b.n	8009e34 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e20:	f7fe fd5c 	bl	80088dc <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d901      	bls.n	8009e34 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8009e30:	2303      	movs	r3, #3
 8009e32:	e0aa      	b.n	8009f8a <HAL_RCC_OscConfig+0x103a>
 8009e34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e38:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8009e3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e46:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	fa93 f2a3 	rbit	r2, r3
 8009e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e54:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8009e58:	601a      	str	r2, [r3, #0]
  return result;
 8009e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e5e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8009e62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e64:	fab3 f383 	clz	r3, r3
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8009e6c:	d802      	bhi.n	8009e74 <HAL_RCC_OscConfig+0xf24>
 8009e6e:	4b2e      	ldr	r3, [pc, #184]	@ (8009f28 <HAL_RCC_OscConfig+0xfd8>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	e027      	b.n	8009ec4 <HAL_RCC_OscConfig+0xf74>
 8009e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e78:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8009e7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e86:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	fa93 f2a3 	rbit	r2, r3
 8009e90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e94:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009e9e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8009ea2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009ea6:	601a      	str	r2, [r3, #0]
 8009ea8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009eac:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	fa93 f2a3 	rbit	r2, r3
 8009eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009eba:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8009ebe:	601a      	str	r2, [r3, #0]
 8009ec0:	4b19      	ldr	r3, [pc, #100]	@ (8009f28 <HAL_RCC_OscConfig+0xfd8>)
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009ec8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8009ecc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8009ed0:	6011      	str	r1, [r2, #0]
 8009ed2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009ed6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8009eda:	6812      	ldr	r2, [r2, #0]
 8009edc:	fa92 f1a2 	rbit	r1, r2
 8009ee0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009ee4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8009ee8:	6011      	str	r1, [r2, #0]
  return result;
 8009eea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8009eee:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8009ef2:	6812      	ldr	r2, [r2, #0]
 8009ef4:	fab2 f282 	clz	r2, r2
 8009ef8:	b2d2      	uxtb	r2, r2
 8009efa:	f042 0220 	orr.w	r2, r2, #32
 8009efe:	b2d2      	uxtb	r2, r2
 8009f00:	f002 021f 	and.w	r2, r2, #31
 8009f04:	2101      	movs	r1, #1
 8009f06:	fa01 f202 	lsl.w	r2, r1, r2
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d187      	bne.n	8009e20 <HAL_RCC_OscConfig+0xed0>
 8009f10:	e03a      	b.n	8009f88 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009f16:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d104      	bne.n	8009f2c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e031      	b.n	8009f8a <HAL_RCC_OscConfig+0x103a>
 8009f26:	bf00      	nop
 8009f28:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009f2c:	4b19      	ldr	r3, [pc, #100]	@ (8009f94 <HAL_RCC_OscConfig+0x1044>)
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8009f34:	4b17      	ldr	r3, [pc, #92]	@ (8009f94 <HAL_RCC_OscConfig+0x1044>)
 8009f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f38:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009f3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009f40:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8009f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009f48:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d117      	bne.n	8009f84 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009f54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8009f58:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8009f5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009f60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d10b      	bne.n	8009f84 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8009f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8009f70:	f003 020f 	and.w	r2, r3, #15
 8009f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8009f78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d001      	beq.n	8009f88 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e000      	b.n	8009f8a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	40021000 	.word	0x40021000

08009f98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b09e      	sub	sp, #120	@ 0x78
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d101      	bne.n	8009fb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e154      	b.n	800a25a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009fb0:	4b89      	ldr	r3, [pc, #548]	@ (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 0307 	and.w	r3, r3, #7
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d910      	bls.n	8009fe0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fbe:	4b86      	ldr	r3, [pc, #536]	@ (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f023 0207 	bic.w	r2, r3, #7
 8009fc6:	4984      	ldr	r1, [pc, #528]	@ (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fce:	4b82      	ldr	r3, [pc, #520]	@ (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0307 	and.w	r3, r3, #7
 8009fd6:	683a      	ldr	r2, [r7, #0]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d001      	beq.n	8009fe0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e13c      	b.n	800a25a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d008      	beq.n	8009ffe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fec:	4b7b      	ldr	r3, [pc, #492]	@ (800a1dc <HAL_RCC_ClockConfig+0x244>)
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	4978      	ldr	r1, [pc, #480]	@ (800a1dc <HAL_RCC_ClockConfig+0x244>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	f000 80cd 	beq.w	800a1a6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d137      	bne.n	800a084 <HAL_RCC_ClockConfig+0xec>
 800a014:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a018:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a01a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a01c:	fa93 f3a3 	rbit	r3, r3
 800a020:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a024:	fab3 f383 	clz	r3, r3
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a02c:	d802      	bhi.n	800a034 <HAL_RCC_ClockConfig+0x9c>
 800a02e:	4b6b      	ldr	r3, [pc, #428]	@ (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	e00f      	b.n	800a054 <HAL_RCC_ClockConfig+0xbc>
 800a034:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a038:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a03a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a03c:	fa93 f3a3 	rbit	r3, r3
 800a040:	667b      	str	r3, [r7, #100]	@ 0x64
 800a042:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a046:	663b      	str	r3, [r7, #96]	@ 0x60
 800a048:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a04a:	fa93 f3a3 	rbit	r3, r3
 800a04e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a050:	4b62      	ldr	r3, [pc, #392]	@ (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a054:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a058:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a05a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a05c:	fa92 f2a2 	rbit	r2, r2
 800a060:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800a062:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a064:	fab2 f282 	clz	r2, r2
 800a068:	b2d2      	uxtb	r2, r2
 800a06a:	f042 0220 	orr.w	r2, r2, #32
 800a06e:	b2d2      	uxtb	r2, r2
 800a070:	f002 021f 	and.w	r2, r2, #31
 800a074:	2101      	movs	r1, #1
 800a076:	fa01 f202 	lsl.w	r2, r1, r2
 800a07a:	4013      	ands	r3, r2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d171      	bne.n	800a164 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e0ea      	b.n	800a25a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d137      	bne.n	800a0fc <HAL_RCC_ClockConfig+0x164>
 800a08c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a090:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a094:	fa93 f3a3 	rbit	r3, r3
 800a098:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800a09a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a09c:	fab3 f383 	clz	r3, r3
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b3f      	cmp	r3, #63	@ 0x3f
 800a0a4:	d802      	bhi.n	800a0ac <HAL_RCC_ClockConfig+0x114>
 800a0a6:	4b4d      	ldr	r3, [pc, #308]	@ (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	e00f      	b.n	800a0cc <HAL_RCC_ClockConfig+0x134>
 800a0ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a0b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0b4:	fa93 f3a3 	rbit	r3, r3
 800a0b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a0be:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0c2:	fa93 f3a3 	rbit	r3, r3
 800a0c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0c8:	4b44      	ldr	r3, [pc, #272]	@ (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800a0d0:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a0d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0d4:	fa92 f2a2 	rbit	r2, r2
 800a0d8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800a0da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0dc:	fab2 f282 	clz	r2, r2
 800a0e0:	b2d2      	uxtb	r2, r2
 800a0e2:	f042 0220 	orr.w	r2, r2, #32
 800a0e6:	b2d2      	uxtb	r2, r2
 800a0e8:	f002 021f 	and.w	r2, r2, #31
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	fa01 f202 	lsl.w	r2, r1, r2
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d135      	bne.n	800a164 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e0ae      	b.n	800a25a <HAL_RCC_ClockConfig+0x2c2>
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a102:	fa93 f3a3 	rbit	r3, r3
 800a106:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800a108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a10a:	fab3 f383 	clz	r3, r3
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b3f      	cmp	r3, #63	@ 0x3f
 800a112:	d802      	bhi.n	800a11a <HAL_RCC_ClockConfig+0x182>
 800a114:	4b31      	ldr	r3, [pc, #196]	@ (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	e00d      	b.n	800a136 <HAL_RCC_ClockConfig+0x19e>
 800a11a:	2302      	movs	r3, #2
 800a11c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a120:	fa93 f3a3 	rbit	r3, r3
 800a124:	627b      	str	r3, [r7, #36]	@ 0x24
 800a126:	2302      	movs	r3, #2
 800a128:	623b      	str	r3, [r7, #32]
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	fa93 f3a3 	rbit	r3, r3
 800a130:	61fb      	str	r3, [r7, #28]
 800a132:	4b2a      	ldr	r3, [pc, #168]	@ (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a136:	2202      	movs	r2, #2
 800a138:	61ba      	str	r2, [r7, #24]
 800a13a:	69ba      	ldr	r2, [r7, #24]
 800a13c:	fa92 f2a2 	rbit	r2, r2
 800a140:	617a      	str	r2, [r7, #20]
  return result;
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	fab2 f282 	clz	r2, r2
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	f042 0220 	orr.w	r2, r2, #32
 800a14e:	b2d2      	uxtb	r2, r2
 800a150:	f002 021f 	and.w	r2, r2, #31
 800a154:	2101      	movs	r1, #1
 800a156:	fa01 f202 	lsl.w	r2, r1, r2
 800a15a:	4013      	ands	r3, r2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e07a      	b.n	800a25a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a164:	4b1d      	ldr	r3, [pc, #116]	@ (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	f023 0203 	bic.w	r2, r3, #3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	491a      	ldr	r1, [pc, #104]	@ (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a172:	4313      	orrs	r3, r2
 800a174:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a176:	f7fe fbb1 	bl	80088dc <HAL_GetTick>
 800a17a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a17c:	e00a      	b.n	800a194 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a17e:	f7fe fbad 	bl	80088dc <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d901      	bls.n	800a194 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e062      	b.n	800a25a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a194:	4b11      	ldr	r3, [pc, #68]	@ (800a1dc <HAL_RCC_ClockConfig+0x244>)
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	f003 020c 	and.w	r2, r3, #12
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d1eb      	bne.n	800a17e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d215      	bcs.n	800a1e0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1b4:	4b08      	ldr	r3, [pc, #32]	@ (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f023 0207 	bic.w	r2, r3, #7
 800a1bc:	4906      	ldr	r1, [pc, #24]	@ (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1c4:	4b04      	ldr	r3, [pc, #16]	@ (800a1d8 <HAL_RCC_ClockConfig+0x240>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0307 	and.w	r3, r3, #7
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d006      	beq.n	800a1e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e041      	b.n	800a25a <HAL_RCC_ClockConfig+0x2c2>
 800a1d6:	bf00      	nop
 800a1d8:	40022000 	.word	0x40022000
 800a1dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0304 	and.w	r3, r3, #4
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d008      	beq.n	800a1fe <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1ec:	4b1d      	ldr	r3, [pc, #116]	@ (800a264 <HAL_RCC_ClockConfig+0x2cc>)
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	491a      	ldr	r1, [pc, #104]	@ (800a264 <HAL_RCC_ClockConfig+0x2cc>)
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0308 	and.w	r3, r3, #8
 800a206:	2b00      	cmp	r3, #0
 800a208:	d009      	beq.n	800a21e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a20a:	4b16      	ldr	r3, [pc, #88]	@ (800a264 <HAL_RCC_ClockConfig+0x2cc>)
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	4912      	ldr	r1, [pc, #72]	@ (800a264 <HAL_RCC_ClockConfig+0x2cc>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a21e:	f000 f829 	bl	800a274 <HAL_RCC_GetSysClockFreq>
 800a222:	4601      	mov	r1, r0
 800a224:	4b0f      	ldr	r3, [pc, #60]	@ (800a264 <HAL_RCC_ClockConfig+0x2cc>)
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a22c:	22f0      	movs	r2, #240	@ 0xf0
 800a22e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	fa92 f2a2 	rbit	r2, r2
 800a236:	60fa      	str	r2, [r7, #12]
  return result;
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	fab2 f282 	clz	r2, r2
 800a23e:	b2d2      	uxtb	r2, r2
 800a240:	40d3      	lsrs	r3, r2
 800a242:	4a09      	ldr	r2, [pc, #36]	@ (800a268 <HAL_RCC_ClockConfig+0x2d0>)
 800a244:	5cd3      	ldrb	r3, [r2, r3]
 800a246:	fa21 f303 	lsr.w	r3, r1, r3
 800a24a:	4a08      	ldr	r2, [pc, #32]	@ (800a26c <HAL_RCC_ClockConfig+0x2d4>)
 800a24c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a24e:	4b08      	ldr	r3, [pc, #32]	@ (800a270 <HAL_RCC_ClockConfig+0x2d8>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4618      	mov	r0, r3
 800a254:	f7fe fafe 	bl	8008854 <HAL_InitTick>
  
  return HAL_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3778      	adds	r7, #120	@ 0x78
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	40021000 	.word	0x40021000
 800a268:	0800baf8 	.word	0x0800baf8
 800a26c:	20000000 	.word	0x20000000
 800a270:	20000004 	.word	0x20000004

0800a274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a27a:	2300      	movs	r3, #0
 800a27c:	60fb      	str	r3, [r7, #12]
 800a27e:	2300      	movs	r3, #0
 800a280:	60bb      	str	r3, [r7, #8]
 800a282:	2300      	movs	r3, #0
 800a284:	617b      	str	r3, [r7, #20]
 800a286:	2300      	movs	r3, #0
 800a288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800a28e:	4b1f      	ldr	r3, [pc, #124]	@ (800a30c <HAL_RCC_GetSysClockFreq+0x98>)
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f003 030c 	and.w	r3, r3, #12
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	d002      	beq.n	800a2a4 <HAL_RCC_GetSysClockFreq+0x30>
 800a29e:	2b08      	cmp	r3, #8
 800a2a0:	d003      	beq.n	800a2aa <HAL_RCC_GetSysClockFreq+0x36>
 800a2a2:	e029      	b.n	800a2f8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a2a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a310 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a2a6:	613b      	str	r3, [r7, #16]
      break;
 800a2a8:	e029      	b.n	800a2fe <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	0c9b      	lsrs	r3, r3, #18
 800a2ae:	f003 030f 	and.w	r3, r3, #15
 800a2b2:	4a18      	ldr	r2, [pc, #96]	@ (800a314 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a2b4:	5cd3      	ldrb	r3, [r2, r3]
 800a2b6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800a2b8:	4b14      	ldr	r3, [pc, #80]	@ (800a30c <HAL_RCC_GetSysClockFreq+0x98>)
 800a2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2bc:	f003 030f 	and.w	r3, r3, #15
 800a2c0:	4a15      	ldr	r2, [pc, #84]	@ (800a318 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a2c2:	5cd3      	ldrb	r3, [r2, r3]
 800a2c4:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d008      	beq.n	800a2e2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a2d0:	4a0f      	ldr	r2, [pc, #60]	@ (800a310 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	fb02 f303 	mul.w	r3, r2, r3
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	e007      	b.n	800a2f2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a2e2:	4a0b      	ldr	r2, [pc, #44]	@ (800a310 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	fb02 f303 	mul.w	r3, r2, r3
 800a2f0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	613b      	str	r3, [r7, #16]
      break;
 800a2f6:	e002      	b.n	800a2fe <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a2f8:	4b05      	ldr	r3, [pc, #20]	@ (800a310 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a2fa:	613b      	str	r3, [r7, #16]
      break;
 800a2fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2fe:	693b      	ldr	r3, [r7, #16]
}
 800a300:	4618      	mov	r0, r3
 800a302:	371c      	adds	r7, #28
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	40021000 	.word	0x40021000
 800a310:	007a1200 	.word	0x007a1200
 800a314:	0800bb10 	.word	0x0800bb10
 800a318:	0800bb20 	.word	0x0800bb20

0800a31c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a320:	4b03      	ldr	r3, [pc, #12]	@ (800a330 <HAL_RCC_GetHCLKFreq+0x14>)
 800a322:	681b      	ldr	r3, [r3, #0]
}
 800a324:	4618      	mov	r0, r3
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	20000000 	.word	0x20000000

0800a334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800a33a:	f7ff ffef 	bl	800a31c <HAL_RCC_GetHCLKFreq>
 800a33e:	4601      	mov	r1, r0
 800a340:	4b0b      	ldr	r3, [pc, #44]	@ (800a370 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a348:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800a34c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	fa92 f2a2 	rbit	r2, r2
 800a354:	603a      	str	r2, [r7, #0]
  return result;
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	fab2 f282 	clz	r2, r2
 800a35c:	b2d2      	uxtb	r2, r2
 800a35e:	40d3      	lsrs	r3, r2
 800a360:	4a04      	ldr	r2, [pc, #16]	@ (800a374 <HAL_RCC_GetPCLK1Freq+0x40>)
 800a362:	5cd3      	ldrb	r3, [r2, r3]
 800a364:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a368:	4618      	mov	r0, r3
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	40021000 	.word	0x40021000
 800a374:	0800bb08 	.word	0x0800bb08

0800a378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800a37e:	f7ff ffcd 	bl	800a31c <HAL_RCC_GetHCLKFreq>
 800a382:	4601      	mov	r1, r0
 800a384:	4b0b      	ldr	r3, [pc, #44]	@ (800a3b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800a38c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800a390:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	fa92 f2a2 	rbit	r2, r2
 800a398:	603a      	str	r2, [r7, #0]
  return result;
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	fab2 f282 	clz	r2, r2
 800a3a0:	b2d2      	uxtb	r2, r2
 800a3a2:	40d3      	lsrs	r3, r2
 800a3a4:	4a04      	ldr	r2, [pc, #16]	@ (800a3b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 800a3a6:	5cd3      	ldrb	r3, [r2, r3]
 800a3a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	40021000 	.word	0x40021000
 800a3b8:	0800bb08 	.word	0x0800bb08

0800a3bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b092      	sub	sp, #72	@ 0x48
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 80d2 	beq.w	800a584 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3e0:	4b4d      	ldr	r3, [pc, #308]	@ (800a518 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a3e2:	69db      	ldr	r3, [r3, #28]
 800a3e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d10e      	bne.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3ec:	4b4a      	ldr	r3, [pc, #296]	@ (800a518 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a3ee:	69db      	ldr	r3, [r3, #28]
 800a3f0:	4a49      	ldr	r2, [pc, #292]	@ (800a518 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a3f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3f6:	61d3      	str	r3, [r2, #28]
 800a3f8:	4b47      	ldr	r3, [pc, #284]	@ (800a518 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a400:	60bb      	str	r3, [r7, #8]
 800a402:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a404:	2301      	movs	r3, #1
 800a406:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a40a:	4b44      	ldr	r3, [pc, #272]	@ (800a51c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a412:	2b00      	cmp	r3, #0
 800a414:	d118      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a416:	4b41      	ldr	r3, [pc, #260]	@ (800a51c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a40      	ldr	r2, [pc, #256]	@ (800a51c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a41c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a420:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a422:	f7fe fa5b 	bl	80088dc <HAL_GetTick>
 800a426:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a428:	e008      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a42a:	f7fe fa57 	bl	80088dc <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b64      	cmp	r3, #100	@ 0x64
 800a436:	d901      	bls.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	e1d4      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a43c:	4b37      	ldr	r3, [pc, #220]	@ (800a51c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a444:	2b00      	cmp	r3, #0
 800a446:	d0f0      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a448:	4b33      	ldr	r3, [pc, #204]	@ (800a518 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a44a:	6a1b      	ldr	r3, [r3, #32]
 800a44c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a450:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a454:	2b00      	cmp	r3, #0
 800a456:	f000 8082 	beq.w	800a55e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a462:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a464:	429a      	cmp	r2, r3
 800a466:	d07a      	beq.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a468:	4b2b      	ldr	r3, [pc, #172]	@ (800a518 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a46a:	6a1b      	ldr	r3, [r3, #32]
 800a46c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a472:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a476:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47a:	fa93 f3a3 	rbit	r3, r3
 800a47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800a480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a482:	fab3 f383 	clz	r3, r3
 800a486:	b2db      	uxtb	r3, r3
 800a488:	461a      	mov	r2, r3
 800a48a:	4b25      	ldr	r3, [pc, #148]	@ (800a520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a48c:	4413      	add	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	461a      	mov	r2, r3
 800a492:	2301      	movs	r3, #1
 800a494:	6013      	str	r3, [r2, #0]
 800a496:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a49a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49e:	fa93 f3a3 	rbit	r3, r3
 800a4a2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800a4a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a4a6:	fab3 f383 	clz	r3, r3
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	4b1c      	ldr	r3, [pc, #112]	@ (800a520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a4b0:	4413      	add	r3, r2
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a4ba:	4a17      	ldr	r2, [pc, #92]	@ (800a518 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a4bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a4c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d049      	beq.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4ca:	f7fe fa07 	bl	80088dc <HAL_GetTick>
 800a4ce:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4d0:	e00a      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4d2:	f7fe fa03 	bl	80088dc <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d901      	bls.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e17e      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ee:	fa93 f3a3 	rbit	r3, r3
 800a4f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	623b      	str	r3, [r7, #32]
 800a4f8:	6a3b      	ldr	r3, [r7, #32]
 800a4fa:	fa93 f3a3 	rbit	r3, r3
 800a4fe:	61fb      	str	r3, [r7, #28]
  return result;
 800a500:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a502:	fab3 f383 	clz	r3, r3
 800a506:	b2db      	uxtb	r3, r3
 800a508:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d108      	bne.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a512:	4b01      	ldr	r3, [pc, #4]	@ (800a518 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	e00d      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800a518:	40021000 	.word	0x40021000
 800a51c:	40007000 	.word	0x40007000
 800a520:	10908100 	.word	0x10908100
 800a524:	2302      	movs	r3, #2
 800a526:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	fa93 f3a3 	rbit	r3, r3
 800a52e:	617b      	str	r3, [r7, #20]
 800a530:	4b9a      	ldr	r3, [pc, #616]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a534:	2202      	movs	r2, #2
 800a536:	613a      	str	r2, [r7, #16]
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	fa92 f2a2 	rbit	r2, r2
 800a53e:	60fa      	str	r2, [r7, #12]
  return result;
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	fab2 f282 	clz	r2, r2
 800a546:	b2d2      	uxtb	r2, r2
 800a548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a54c:	b2d2      	uxtb	r2, r2
 800a54e:	f002 021f 	and.w	r2, r2, #31
 800a552:	2101      	movs	r1, #1
 800a554:	fa01 f202 	lsl.w	r2, r1, r2
 800a558:	4013      	ands	r3, r2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0b9      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800a55e:	4b8f      	ldr	r3, [pc, #572]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	498c      	ldr	r1, [pc, #560]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a56c:	4313      	orrs	r3, r2
 800a56e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a570:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a574:	2b01      	cmp	r3, #1
 800a576:	d105      	bne.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a578:	4b88      	ldr	r3, [pc, #544]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a57a:	69db      	ldr	r3, [r3, #28]
 800a57c:	4a87      	ldr	r2, [pc, #540]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a57e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a582:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0301 	and.w	r3, r3, #1
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d008      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a590:	4b82      	ldr	r3, [pc, #520]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a594:	f023 0203 	bic.w	r2, r3, #3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	497f      	ldr	r1, [pc, #508]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f003 0302 	and.w	r3, r3, #2
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d008      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a5ae:	4b7b      	ldr	r3, [pc, #492]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	4978      	ldr	r1, [pc, #480]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d008      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a5cc:	4b73      	ldr	r3, [pc, #460]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	4970      	ldr	r1, [pc, #448]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0320 	and.w	r3, r3, #32
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d008      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a5ea:	4b6c      	ldr	r3, [pc, #432]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ee:	f023 0210 	bic.w	r2, r3, #16
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	4969      	ldr	r1, [pc, #420]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d008      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800a608:	4b64      	ldr	r3, [pc, #400]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a614:	4961      	ldr	r1, [pc, #388]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a616:	4313      	orrs	r3, r2
 800a618:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a622:	2b00      	cmp	r3, #0
 800a624:	d008      	beq.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a626:	4b5d      	ldr	r3, [pc, #372]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a62a:	f023 0220 	bic.w	r2, r3, #32
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	495a      	ldr	r1, [pc, #360]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a634:	4313      	orrs	r3, r2
 800a636:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a640:	2b00      	cmp	r3, #0
 800a642:	d008      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a644:	4b55      	ldr	r3, [pc, #340]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a648:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a650:	4952      	ldr	r1, [pc, #328]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a652:	4313      	orrs	r3, r2
 800a654:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f003 0308 	and.w	r3, r3, #8
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d008      	beq.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a662:	4b4e      	ldr	r3, [pc, #312]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a666:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	494b      	ldr	r1, [pc, #300]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a670:	4313      	orrs	r3, r2
 800a672:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0310 	and.w	r3, r3, #16
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d008      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a680:	4b46      	ldr	r3, [pc, #280]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a684:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	4943      	ldr	r1, [pc, #268]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a68e:	4313      	orrs	r3, r2
 800a690:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d008      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a69e:	4b3f      	ldr	r3, [pc, #252]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6aa:	493c      	ldr	r1, [pc, #240]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d008      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a6bc:	4b37      	ldr	r3, [pc, #220]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c8:	4934      	ldr	r1, [pc, #208]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d008      	beq.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a6da:	4b30      	ldr	r3, [pc, #192]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6de:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e6:	492d      	ldr	r1, [pc, #180]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d008      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a6f8:	4b28      	ldr	r3, [pc, #160]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a704:	4925      	ldr	r1, [pc, #148]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a706:	4313      	orrs	r3, r2
 800a708:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d008      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a716:	4b21      	ldr	r3, [pc, #132]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a71a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a722:	491e      	ldr	r1, [pc, #120]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a724:	4313      	orrs	r3, r2
 800a726:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d008      	beq.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800a734:	4b19      	ldr	r3, [pc, #100]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a738:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a740:	4916      	ldr	r1, [pc, #88]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a742:	4313      	orrs	r3, r2
 800a744:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d008      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800a752:	4b12      	ldr	r3, [pc, #72]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a756:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a75e:	490f      	ldr	r1, [pc, #60]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a760:	4313      	orrs	r3, r2
 800a762:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d008      	beq.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a770:	4b0a      	ldr	r3, [pc, #40]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a774:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a77c:	4907      	ldr	r1, [pc, #28]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00c      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800a78e:	4b03      	ldr	r3, [pc, #12]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a792:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	e002      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a79a:	bf00      	nop
 800a79c:	40021000 	.word	0x40021000
 800a7a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a7a2:	4913      	ldr	r1, [pc, #76]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d008      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800a7b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7c0:	490b      	ldr	r1, [pc, #44]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d008      	beq.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800a7d2:	4b07      	ldr	r3, [pc, #28]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a7d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7d6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7de:	4904      	ldr	r1, [pc, #16]	@ (800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3748      	adds	r7, #72	@ 0x48
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	40021000 	.word	0x40021000

0800a7f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d101      	bne.n	800a806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e040      	b.n	800a888 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d106      	bne.n	800a81c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7fd feb8 	bl	800858c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2224      	movs	r2, #36	@ 0x24
 800a820:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f022 0201 	bic.w	r2, r2, #1
 800a830:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a836:	2b00      	cmp	r3, #0
 800a838:	d002      	beq.n	800a840 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fa86 	bl	800ad4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f8af 	bl	800a9a4 <UART_SetConfig>
 800a846:	4603      	mov	r3, r0
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d101      	bne.n	800a850 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e01b      	b.n	800a888 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	685a      	ldr	r2, [r3, #4]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a85e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	689a      	ldr	r2, [r3, #8]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a86e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f042 0201 	orr.w	r2, r2, #1
 800a87e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fb05 	bl	800ae90 <UART_CheckIdleState>
 800a886:	4603      	mov	r3, r0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b08a      	sub	sp, #40	@ 0x28
 800a894:	af02      	add	r7, sp, #8
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	603b      	str	r3, [r7, #0]
 800a89c:	4613      	mov	r3, r2
 800a89e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8a4:	2b20      	cmp	r3, #32
 800a8a6:	d177      	bne.n	800a998 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d002      	beq.n	800a8b4 <HAL_UART_Transmit+0x24>
 800a8ae:	88fb      	ldrh	r3, [r7, #6]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e070      	b.n	800a99a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2221      	movs	r2, #33	@ 0x21
 800a8c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8c6:	f7fe f809 	bl	80088dc <HAL_GetTick>
 800a8ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	88fa      	ldrh	r2, [r7, #6]
 800a8d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	88fa      	ldrh	r2, [r7, #6]
 800a8d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8e4:	d108      	bne.n	800a8f8 <HAL_UART_Transmit+0x68>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d104      	bne.n	800a8f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	61bb      	str	r3, [r7, #24]
 800a8f6:	e003      	b.n	800a900 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a900:	e02f      	b.n	800a962 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	2200      	movs	r2, #0
 800a90a:	2180      	movs	r1, #128	@ 0x80
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 fb67 	bl	800afe0 <UART_WaitOnFlagUntilTimeout>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d004      	beq.n	800a922 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2220      	movs	r2, #32
 800a91c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e03b      	b.n	800a99a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10b      	bne.n	800a940 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	881a      	ldrh	r2, [r3, #0]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a934:	b292      	uxth	r2, r2
 800a936:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	3302      	adds	r3, #2
 800a93c:	61bb      	str	r3, [r7, #24]
 800a93e:	e007      	b.n	800a950 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	781a      	ldrb	r2, [r3, #0]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	3301      	adds	r3, #1
 800a94e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a956:	b29b      	uxth	r3, r3
 800a958:	3b01      	subs	r3, #1
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a968:	b29b      	uxth	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1c9      	bne.n	800a902 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2200      	movs	r2, #0
 800a976:	2140      	movs	r1, #64	@ 0x40
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f000 fb31 	bl	800afe0 <UART_WaitOnFlagUntilTimeout>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d004      	beq.n	800a98e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2220      	movs	r2, #32
 800a988:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e005      	b.n	800a99a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2220      	movs	r2, #32
 800a992:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	e000      	b.n	800a99a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a998:	2302      	movs	r3, #2
  }
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3720      	adds	r7, #32
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
	...

0800a9a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b088      	sub	sp, #32
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	689a      	ldr	r2, [r3, #8]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	431a      	orrs	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	431a      	orrs	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	69db      	ldr	r3, [r3, #28]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	4b92      	ldr	r3, [pc, #584]	@ (800ac18 <UART_SetConfig+0x274>)
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	6812      	ldr	r2, [r2, #0]
 800a9d6:	6979      	ldr	r1, [r7, #20]
 800a9d8:	430b      	orrs	r3, r1
 800a9da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	68da      	ldr	r2, [r3, #12]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	430a      	orrs	r2, r1
 800aa14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a80      	ldr	r2, [pc, #512]	@ (800ac1c <UART_SetConfig+0x278>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d120      	bne.n	800aa62 <UART_SetConfig+0xbe>
 800aa20:	4b7f      	ldr	r3, [pc, #508]	@ (800ac20 <UART_SetConfig+0x27c>)
 800aa22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa24:	f003 0303 	and.w	r3, r3, #3
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	d817      	bhi.n	800aa5c <UART_SetConfig+0xb8>
 800aa2c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa34 <UART_SetConfig+0x90>)
 800aa2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa32:	bf00      	nop
 800aa34:	0800aa45 	.word	0x0800aa45
 800aa38:	0800aa51 	.word	0x0800aa51
 800aa3c:	0800aa57 	.word	0x0800aa57
 800aa40:	0800aa4b 	.word	0x0800aa4b
 800aa44:	2301      	movs	r3, #1
 800aa46:	77fb      	strb	r3, [r7, #31]
 800aa48:	e0b5      	b.n	800abb6 <UART_SetConfig+0x212>
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	77fb      	strb	r3, [r7, #31]
 800aa4e:	e0b2      	b.n	800abb6 <UART_SetConfig+0x212>
 800aa50:	2304      	movs	r3, #4
 800aa52:	77fb      	strb	r3, [r7, #31]
 800aa54:	e0af      	b.n	800abb6 <UART_SetConfig+0x212>
 800aa56:	2308      	movs	r3, #8
 800aa58:	77fb      	strb	r3, [r7, #31]
 800aa5a:	e0ac      	b.n	800abb6 <UART_SetConfig+0x212>
 800aa5c:	2310      	movs	r3, #16
 800aa5e:	77fb      	strb	r3, [r7, #31]
 800aa60:	e0a9      	b.n	800abb6 <UART_SetConfig+0x212>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a6f      	ldr	r2, [pc, #444]	@ (800ac24 <UART_SetConfig+0x280>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d124      	bne.n	800aab6 <UART_SetConfig+0x112>
 800aa6c:	4b6c      	ldr	r3, [pc, #432]	@ (800ac20 <UART_SetConfig+0x27c>)
 800aa6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aa74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa78:	d011      	beq.n	800aa9e <UART_SetConfig+0xfa>
 800aa7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa7e:	d817      	bhi.n	800aab0 <UART_SetConfig+0x10c>
 800aa80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa84:	d011      	beq.n	800aaaa <UART_SetConfig+0x106>
 800aa86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa8a:	d811      	bhi.n	800aab0 <UART_SetConfig+0x10c>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d003      	beq.n	800aa98 <UART_SetConfig+0xf4>
 800aa90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa94:	d006      	beq.n	800aaa4 <UART_SetConfig+0x100>
 800aa96:	e00b      	b.n	800aab0 <UART_SetConfig+0x10c>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	77fb      	strb	r3, [r7, #31]
 800aa9c:	e08b      	b.n	800abb6 <UART_SetConfig+0x212>
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	77fb      	strb	r3, [r7, #31]
 800aaa2:	e088      	b.n	800abb6 <UART_SetConfig+0x212>
 800aaa4:	2304      	movs	r3, #4
 800aaa6:	77fb      	strb	r3, [r7, #31]
 800aaa8:	e085      	b.n	800abb6 <UART_SetConfig+0x212>
 800aaaa:	2308      	movs	r3, #8
 800aaac:	77fb      	strb	r3, [r7, #31]
 800aaae:	e082      	b.n	800abb6 <UART_SetConfig+0x212>
 800aab0:	2310      	movs	r3, #16
 800aab2:	77fb      	strb	r3, [r7, #31]
 800aab4:	e07f      	b.n	800abb6 <UART_SetConfig+0x212>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a5b      	ldr	r2, [pc, #364]	@ (800ac28 <UART_SetConfig+0x284>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d124      	bne.n	800ab0a <UART_SetConfig+0x166>
 800aac0:	4b57      	ldr	r3, [pc, #348]	@ (800ac20 <UART_SetConfig+0x27c>)
 800aac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aac4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800aac8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800aacc:	d011      	beq.n	800aaf2 <UART_SetConfig+0x14e>
 800aace:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800aad2:	d817      	bhi.n	800ab04 <UART_SetConfig+0x160>
 800aad4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800aad8:	d011      	beq.n	800aafe <UART_SetConfig+0x15a>
 800aada:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800aade:	d811      	bhi.n	800ab04 <UART_SetConfig+0x160>
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d003      	beq.n	800aaec <UART_SetConfig+0x148>
 800aae4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aae8:	d006      	beq.n	800aaf8 <UART_SetConfig+0x154>
 800aaea:	e00b      	b.n	800ab04 <UART_SetConfig+0x160>
 800aaec:	2300      	movs	r3, #0
 800aaee:	77fb      	strb	r3, [r7, #31]
 800aaf0:	e061      	b.n	800abb6 <UART_SetConfig+0x212>
 800aaf2:	2302      	movs	r3, #2
 800aaf4:	77fb      	strb	r3, [r7, #31]
 800aaf6:	e05e      	b.n	800abb6 <UART_SetConfig+0x212>
 800aaf8:	2304      	movs	r3, #4
 800aafa:	77fb      	strb	r3, [r7, #31]
 800aafc:	e05b      	b.n	800abb6 <UART_SetConfig+0x212>
 800aafe:	2308      	movs	r3, #8
 800ab00:	77fb      	strb	r3, [r7, #31]
 800ab02:	e058      	b.n	800abb6 <UART_SetConfig+0x212>
 800ab04:	2310      	movs	r3, #16
 800ab06:	77fb      	strb	r3, [r7, #31]
 800ab08:	e055      	b.n	800abb6 <UART_SetConfig+0x212>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a47      	ldr	r2, [pc, #284]	@ (800ac2c <UART_SetConfig+0x288>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d124      	bne.n	800ab5e <UART_SetConfig+0x1ba>
 800ab14:	4b42      	ldr	r3, [pc, #264]	@ (800ac20 <UART_SetConfig+0x27c>)
 800ab16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab18:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ab1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab20:	d011      	beq.n	800ab46 <UART_SetConfig+0x1a2>
 800ab22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab26:	d817      	bhi.n	800ab58 <UART_SetConfig+0x1b4>
 800ab28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab2c:	d011      	beq.n	800ab52 <UART_SetConfig+0x1ae>
 800ab2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab32:	d811      	bhi.n	800ab58 <UART_SetConfig+0x1b4>
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <UART_SetConfig+0x19c>
 800ab38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab3c:	d006      	beq.n	800ab4c <UART_SetConfig+0x1a8>
 800ab3e:	e00b      	b.n	800ab58 <UART_SetConfig+0x1b4>
 800ab40:	2300      	movs	r3, #0
 800ab42:	77fb      	strb	r3, [r7, #31]
 800ab44:	e037      	b.n	800abb6 <UART_SetConfig+0x212>
 800ab46:	2302      	movs	r3, #2
 800ab48:	77fb      	strb	r3, [r7, #31]
 800ab4a:	e034      	b.n	800abb6 <UART_SetConfig+0x212>
 800ab4c:	2304      	movs	r3, #4
 800ab4e:	77fb      	strb	r3, [r7, #31]
 800ab50:	e031      	b.n	800abb6 <UART_SetConfig+0x212>
 800ab52:	2308      	movs	r3, #8
 800ab54:	77fb      	strb	r3, [r7, #31]
 800ab56:	e02e      	b.n	800abb6 <UART_SetConfig+0x212>
 800ab58:	2310      	movs	r3, #16
 800ab5a:	77fb      	strb	r3, [r7, #31]
 800ab5c:	e02b      	b.n	800abb6 <UART_SetConfig+0x212>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a33      	ldr	r2, [pc, #204]	@ (800ac30 <UART_SetConfig+0x28c>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d124      	bne.n	800abb2 <UART_SetConfig+0x20e>
 800ab68:	4b2d      	ldr	r3, [pc, #180]	@ (800ac20 <UART_SetConfig+0x27c>)
 800ab6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab6c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800ab70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ab74:	d011      	beq.n	800ab9a <UART_SetConfig+0x1f6>
 800ab76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ab7a:	d817      	bhi.n	800abac <UART_SetConfig+0x208>
 800ab7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ab80:	d011      	beq.n	800aba6 <UART_SetConfig+0x202>
 800ab82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ab86:	d811      	bhi.n	800abac <UART_SetConfig+0x208>
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d003      	beq.n	800ab94 <UART_SetConfig+0x1f0>
 800ab8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab90:	d006      	beq.n	800aba0 <UART_SetConfig+0x1fc>
 800ab92:	e00b      	b.n	800abac <UART_SetConfig+0x208>
 800ab94:	2300      	movs	r3, #0
 800ab96:	77fb      	strb	r3, [r7, #31]
 800ab98:	e00d      	b.n	800abb6 <UART_SetConfig+0x212>
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	77fb      	strb	r3, [r7, #31]
 800ab9e:	e00a      	b.n	800abb6 <UART_SetConfig+0x212>
 800aba0:	2304      	movs	r3, #4
 800aba2:	77fb      	strb	r3, [r7, #31]
 800aba4:	e007      	b.n	800abb6 <UART_SetConfig+0x212>
 800aba6:	2308      	movs	r3, #8
 800aba8:	77fb      	strb	r3, [r7, #31]
 800abaa:	e004      	b.n	800abb6 <UART_SetConfig+0x212>
 800abac:	2310      	movs	r3, #16
 800abae:	77fb      	strb	r3, [r7, #31]
 800abb0:	e001      	b.n	800abb6 <UART_SetConfig+0x212>
 800abb2:	2310      	movs	r3, #16
 800abb4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abbe:	d16b      	bne.n	800ac98 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800abc0:	7ffb      	ldrb	r3, [r7, #31]
 800abc2:	2b08      	cmp	r3, #8
 800abc4:	d838      	bhi.n	800ac38 <UART_SetConfig+0x294>
 800abc6:	a201      	add	r2, pc, #4	@ (adr r2, 800abcc <UART_SetConfig+0x228>)
 800abc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abcc:	0800abf1 	.word	0x0800abf1
 800abd0:	0800abf9 	.word	0x0800abf9
 800abd4:	0800ac01 	.word	0x0800ac01
 800abd8:	0800ac39 	.word	0x0800ac39
 800abdc:	0800ac07 	.word	0x0800ac07
 800abe0:	0800ac39 	.word	0x0800ac39
 800abe4:	0800ac39 	.word	0x0800ac39
 800abe8:	0800ac39 	.word	0x0800ac39
 800abec:	0800ac0f 	.word	0x0800ac0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abf0:	f7ff fba0 	bl	800a334 <HAL_RCC_GetPCLK1Freq>
 800abf4:	61b8      	str	r0, [r7, #24]
        break;
 800abf6:	e024      	b.n	800ac42 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abf8:	f7ff fbbe 	bl	800a378 <HAL_RCC_GetPCLK2Freq>
 800abfc:	61b8      	str	r0, [r7, #24]
        break;
 800abfe:	e020      	b.n	800ac42 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac00:	4b0c      	ldr	r3, [pc, #48]	@ (800ac34 <UART_SetConfig+0x290>)
 800ac02:	61bb      	str	r3, [r7, #24]
        break;
 800ac04:	e01d      	b.n	800ac42 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac06:	f7ff fb35 	bl	800a274 <HAL_RCC_GetSysClockFreq>
 800ac0a:	61b8      	str	r0, [r7, #24]
        break;
 800ac0c:	e019      	b.n	800ac42 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac12:	61bb      	str	r3, [r7, #24]
        break;
 800ac14:	e015      	b.n	800ac42 <UART_SetConfig+0x29e>
 800ac16:	bf00      	nop
 800ac18:	efff69f3 	.word	0xefff69f3
 800ac1c:	40013800 	.word	0x40013800
 800ac20:	40021000 	.word	0x40021000
 800ac24:	40004400 	.word	0x40004400
 800ac28:	40004800 	.word	0x40004800
 800ac2c:	40004c00 	.word	0x40004c00
 800ac30:	40005000 	.word	0x40005000
 800ac34:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	77bb      	strb	r3, [r7, #30]
        break;
 800ac40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d073      	beq.n	800ad30 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	005a      	lsls	r2, r3, #1
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	085b      	lsrs	r3, r3, #1
 800ac52:	441a      	add	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	2b0f      	cmp	r3, #15
 800ac62:	d916      	bls.n	800ac92 <UART_SetConfig+0x2ee>
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac6a:	d212      	bcs.n	800ac92 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	f023 030f 	bic.w	r3, r3, #15
 800ac74:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	085b      	lsrs	r3, r3, #1
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	f003 0307 	and.w	r3, r3, #7
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	89fb      	ldrh	r3, [r7, #14]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	89fa      	ldrh	r2, [r7, #14]
 800ac8e:	60da      	str	r2, [r3, #12]
 800ac90:	e04e      	b.n	800ad30 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	77bb      	strb	r3, [r7, #30]
 800ac96:	e04b      	b.n	800ad30 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac98:	7ffb      	ldrb	r3, [r7, #31]
 800ac9a:	2b08      	cmp	r3, #8
 800ac9c:	d827      	bhi.n	800acee <UART_SetConfig+0x34a>
 800ac9e:	a201      	add	r2, pc, #4	@ (adr r2, 800aca4 <UART_SetConfig+0x300>)
 800aca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca4:	0800acc9 	.word	0x0800acc9
 800aca8:	0800acd1 	.word	0x0800acd1
 800acac:	0800acd9 	.word	0x0800acd9
 800acb0:	0800acef 	.word	0x0800acef
 800acb4:	0800acdf 	.word	0x0800acdf
 800acb8:	0800acef 	.word	0x0800acef
 800acbc:	0800acef 	.word	0x0800acef
 800acc0:	0800acef 	.word	0x0800acef
 800acc4:	0800ace7 	.word	0x0800ace7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acc8:	f7ff fb34 	bl	800a334 <HAL_RCC_GetPCLK1Freq>
 800accc:	61b8      	str	r0, [r7, #24]
        break;
 800acce:	e013      	b.n	800acf8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acd0:	f7ff fb52 	bl	800a378 <HAL_RCC_GetPCLK2Freq>
 800acd4:	61b8      	str	r0, [r7, #24]
        break;
 800acd6:	e00f      	b.n	800acf8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acd8:	4b1b      	ldr	r3, [pc, #108]	@ (800ad48 <UART_SetConfig+0x3a4>)
 800acda:	61bb      	str	r3, [r7, #24]
        break;
 800acdc:	e00c      	b.n	800acf8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acde:	f7ff fac9 	bl	800a274 <HAL_RCC_GetSysClockFreq>
 800ace2:	61b8      	str	r0, [r7, #24]
        break;
 800ace4:	e008      	b.n	800acf8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ace6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acea:	61bb      	str	r3, [r7, #24]
        break;
 800acec:	e004      	b.n	800acf8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800acee:	2300      	movs	r3, #0
 800acf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	77bb      	strb	r3, [r7, #30]
        break;
 800acf6:	bf00      	nop
    }

    if (pclk != 0U)
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d018      	beq.n	800ad30 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	085a      	lsrs	r2, r3, #1
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	441a      	add	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	2b0f      	cmp	r3, #15
 800ad16:	d909      	bls.n	800ad2c <UART_SetConfig+0x388>
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad1e:	d205      	bcs.n	800ad2c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	60da      	str	r2, [r3, #12]
 800ad2a:	e001      	b.n	800ad30 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ad3c:	7fbb      	ldrb	r3, [r7, #30]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3720      	adds	r7, #32
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	007a1200 	.word	0x007a1200

0800ad4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad58:	f003 0308 	and.w	r3, r3, #8
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00a      	beq.n	800ad76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	430a      	orrs	r2, r1
 800ad74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	430a      	orrs	r2, r1
 800ad96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad9c:	f003 0302 	and.w	r3, r3, #2
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00a      	beq.n	800adba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adbe:	f003 0304 	and.w	r3, r3, #4
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00a      	beq.n	800addc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	430a      	orrs	r2, r1
 800adda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade0:	f003 0310 	and.w	r3, r3, #16
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00a      	beq.n	800adfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae02:	f003 0320 	and.w	r3, r3, #32
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00a      	beq.n	800ae20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d01a      	beq.n	800ae62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae4a:	d10a      	bne.n	800ae62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	430a      	orrs	r2, r1
 800ae60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00a      	beq.n	800ae84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	430a      	orrs	r2, r1
 800ae82:	605a      	str	r2, [r3, #4]
  }
}
 800ae84:	bf00      	nop
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b098      	sub	sp, #96	@ 0x60
 800ae94:	af02      	add	r7, sp, #8
 800ae96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aea0:	f7fd fd1c 	bl	80088dc <HAL_GetTick>
 800aea4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 0308 	and.w	r3, r3, #8
 800aeb0:	2b08      	cmp	r3, #8
 800aeb2:	d12e      	bne.n	800af12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aeb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aebc:	2200      	movs	r2, #0
 800aebe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f88c 	bl	800afe0 <UART_WaitOnFlagUntilTimeout>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d021      	beq.n	800af12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed6:	e853 3f00 	ldrex	r3, [r3]
 800aeda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aede:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aee2:	653b      	str	r3, [r7, #80]	@ 0x50
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	461a      	mov	r2, r3
 800aeea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aeec:	647b      	str	r3, [r7, #68]	@ 0x44
 800aeee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aef4:	e841 2300 	strex	r3, r2, [r1]
 800aef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aefa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1e6      	bne.n	800aece <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2220      	movs	r2, #32
 800af04:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af0e:	2303      	movs	r3, #3
 800af10:	e062      	b.n	800afd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0304 	and.w	r3, r3, #4
 800af1c:	2b04      	cmp	r3, #4
 800af1e:	d149      	bne.n	800afb4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af28:	2200      	movs	r2, #0
 800af2a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f856 	bl	800afe0 <UART_WaitOnFlagUntilTimeout>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d03c      	beq.n	800afb4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af42:	e853 3f00 	ldrex	r3, [r3]
 800af46:	623b      	str	r3, [r7, #32]
   return(result);
 800af48:	6a3b      	ldr	r3, [r7, #32]
 800af4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	461a      	mov	r2, r3
 800af56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af58:	633b      	str	r3, [r7, #48]	@ 0x30
 800af5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af60:	e841 2300 	strex	r3, r2, [r1]
 800af64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1e6      	bne.n	800af3a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3308      	adds	r3, #8
 800af72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	e853 3f00 	ldrex	r3, [r3]
 800af7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f023 0301 	bic.w	r3, r3, #1
 800af82:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3308      	adds	r3, #8
 800af8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af8c:	61fa      	str	r2, [r7, #28]
 800af8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af90:	69b9      	ldr	r1, [r7, #24]
 800af92:	69fa      	ldr	r2, [r7, #28]
 800af94:	e841 2300 	strex	r3, r2, [r1]
 800af98:	617b      	str	r3, [r7, #20]
   return(result);
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1e5      	bne.n	800af6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2220      	movs	r2, #32
 800afa4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e011      	b.n	800afd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2220      	movs	r2, #32
 800afb8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2220      	movs	r2, #32
 800afbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3758      	adds	r7, #88	@ 0x58
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	603b      	str	r3, [r7, #0]
 800afec:	4613      	mov	r3, r2
 800afee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aff0:	e04f      	b.n	800b092 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aff8:	d04b      	beq.n	800b092 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800affa:	f7fd fc6f 	bl	80088dc <HAL_GetTick>
 800affe:	4602      	mov	r2, r0
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	69ba      	ldr	r2, [r7, #24]
 800b006:	429a      	cmp	r2, r3
 800b008:	d302      	bcc.n	800b010 <UART_WaitOnFlagUntilTimeout+0x30>
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b010:	2303      	movs	r3, #3
 800b012:	e04e      	b.n	800b0b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f003 0304 	and.w	r3, r3, #4
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d037      	beq.n	800b092 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2b80      	cmp	r3, #128	@ 0x80
 800b026:	d034      	beq.n	800b092 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b40      	cmp	r3, #64	@ 0x40
 800b02c:	d031      	beq.n	800b092 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	69db      	ldr	r3, [r3, #28]
 800b034:	f003 0308 	and.w	r3, r3, #8
 800b038:	2b08      	cmp	r3, #8
 800b03a:	d110      	bne.n	800b05e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2208      	movs	r2, #8
 800b042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f000 f838 	bl	800b0ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2208      	movs	r2, #8
 800b04e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2200      	movs	r2, #0
 800b056:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e029      	b.n	800b0b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b06c:	d111      	bne.n	800b092 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f000 f81e 	bl	800b0ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2220      	movs	r2, #32
 800b082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b08e:	2303      	movs	r3, #3
 800b090:	e00f      	b.n	800b0b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	69da      	ldr	r2, [r3, #28]
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	4013      	ands	r3, r2
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	bf0c      	ite	eq
 800b0a2:	2301      	moveq	r3, #1
 800b0a4:	2300      	movne	r3, #0
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	79fb      	ldrb	r3, [r7, #7]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d0a0      	beq.n	800aff2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b095      	sub	sp, #84	@ 0x54
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0ca:	e853 3f00 	ldrex	r3, [r3]
 800b0ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0e8:	e841 2300 	strex	r3, r2, [r1]
 800b0ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1e6      	bne.n	800b0c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	3308      	adds	r3, #8
 800b0fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	e853 3f00 	ldrex	r3, [r3]
 800b102:	61fb      	str	r3, [r7, #28]
   return(result);
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	f023 0301 	bic.w	r3, r3, #1
 800b10a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	3308      	adds	r3, #8
 800b112:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b114:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b116:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b11a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b11c:	e841 2300 	strex	r3, r2, [r1]
 800b120:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b124:	2b00      	cmp	r3, #0
 800b126:	d1e5      	bne.n	800b0f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d118      	bne.n	800b162 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	e853 3f00 	ldrex	r3, [r3]
 800b13c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	f023 0310 	bic.w	r3, r3, #16
 800b144:	647b      	str	r3, [r7, #68]	@ 0x44
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b14e:	61bb      	str	r3, [r7, #24]
 800b150:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b152:	6979      	ldr	r1, [r7, #20]
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	e841 2300 	strex	r3, r2, [r1]
 800b15a:	613b      	str	r3, [r7, #16]
   return(result);
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1e6      	bne.n	800b130 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2220      	movs	r2, #32
 800b166:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b176:	bf00      	nop
 800b178:	3754      	adds	r7, #84	@ 0x54
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
	...

0800b184 <_vsiprintf_r>:
 800b184:	b510      	push	{r4, lr}
 800b186:	b09a      	sub	sp, #104	@ 0x68
 800b188:	2400      	movs	r4, #0
 800b18a:	9100      	str	r1, [sp, #0]
 800b18c:	9104      	str	r1, [sp, #16]
 800b18e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b192:	9105      	str	r1, [sp, #20]
 800b194:	9102      	str	r1, [sp, #8]
 800b196:	4905      	ldr	r1, [pc, #20]	@ (800b1ac <_vsiprintf_r+0x28>)
 800b198:	9103      	str	r1, [sp, #12]
 800b19a:	4669      	mov	r1, sp
 800b19c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b19e:	f000 f8a1 	bl	800b2e4 <_svfiprintf_r>
 800b1a2:	9b00      	ldr	r3, [sp, #0]
 800b1a4:	701c      	strb	r4, [r3, #0]
 800b1a6:	b01a      	add	sp, #104	@ 0x68
 800b1a8:	bd10      	pop	{r4, pc}
 800b1aa:	bf00      	nop
 800b1ac:	ffff0208 	.word	0xffff0208

0800b1b0 <vsiprintf>:
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	460a      	mov	r2, r1
 800b1b4:	4601      	mov	r1, r0
 800b1b6:	4802      	ldr	r0, [pc, #8]	@ (800b1c0 <vsiprintf+0x10>)
 800b1b8:	6800      	ldr	r0, [r0, #0]
 800b1ba:	f7ff bfe3 	b.w	800b184 <_vsiprintf_r>
 800b1be:	bf00      	nop
 800b1c0:	2000000c 	.word	0x2000000c

0800b1c4 <memset>:
 800b1c4:	4402      	add	r2, r0
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d100      	bne.n	800b1ce <memset+0xa>
 800b1cc:	4770      	bx	lr
 800b1ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b1d2:	e7f9      	b.n	800b1c8 <memset+0x4>

0800b1d4 <__errno>:
 800b1d4:	4b01      	ldr	r3, [pc, #4]	@ (800b1dc <__errno+0x8>)
 800b1d6:	6818      	ldr	r0, [r3, #0]
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	2000000c 	.word	0x2000000c

0800b1e0 <__libc_init_array>:
 800b1e0:	b570      	push	{r4, r5, r6, lr}
 800b1e2:	4d0d      	ldr	r5, [pc, #52]	@ (800b218 <__libc_init_array+0x38>)
 800b1e4:	4c0d      	ldr	r4, [pc, #52]	@ (800b21c <__libc_init_array+0x3c>)
 800b1e6:	1b64      	subs	r4, r4, r5
 800b1e8:	10a4      	asrs	r4, r4, #2
 800b1ea:	2600      	movs	r6, #0
 800b1ec:	42a6      	cmp	r6, r4
 800b1ee:	d109      	bne.n	800b204 <__libc_init_array+0x24>
 800b1f0:	4d0b      	ldr	r5, [pc, #44]	@ (800b220 <__libc_init_array+0x40>)
 800b1f2:	4c0c      	ldr	r4, [pc, #48]	@ (800b224 <__libc_init_array+0x44>)
 800b1f4:	f000 fc64 	bl	800bac0 <_init>
 800b1f8:	1b64      	subs	r4, r4, r5
 800b1fa:	10a4      	asrs	r4, r4, #2
 800b1fc:	2600      	movs	r6, #0
 800b1fe:	42a6      	cmp	r6, r4
 800b200:	d105      	bne.n	800b20e <__libc_init_array+0x2e>
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	f855 3b04 	ldr.w	r3, [r5], #4
 800b208:	4798      	blx	r3
 800b20a:	3601      	adds	r6, #1
 800b20c:	e7ee      	b.n	800b1ec <__libc_init_array+0xc>
 800b20e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b212:	4798      	blx	r3
 800b214:	3601      	adds	r6, #1
 800b216:	e7f2      	b.n	800b1fe <__libc_init_array+0x1e>
 800b218:	0800bb6c 	.word	0x0800bb6c
 800b21c:	0800bb6c 	.word	0x0800bb6c
 800b220:	0800bb6c 	.word	0x0800bb6c
 800b224:	0800bb70 	.word	0x0800bb70

0800b228 <__retarget_lock_acquire_recursive>:
 800b228:	4770      	bx	lr

0800b22a <__retarget_lock_release_recursive>:
 800b22a:	4770      	bx	lr

0800b22c <__ssputs_r>:
 800b22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b230:	688e      	ldr	r6, [r1, #8]
 800b232:	461f      	mov	r7, r3
 800b234:	42be      	cmp	r6, r7
 800b236:	680b      	ldr	r3, [r1, #0]
 800b238:	4682      	mov	sl, r0
 800b23a:	460c      	mov	r4, r1
 800b23c:	4690      	mov	r8, r2
 800b23e:	d82d      	bhi.n	800b29c <__ssputs_r+0x70>
 800b240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b244:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b248:	d026      	beq.n	800b298 <__ssputs_r+0x6c>
 800b24a:	6965      	ldr	r5, [r4, #20]
 800b24c:	6909      	ldr	r1, [r1, #16]
 800b24e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b252:	eba3 0901 	sub.w	r9, r3, r1
 800b256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b25a:	1c7b      	adds	r3, r7, #1
 800b25c:	444b      	add	r3, r9
 800b25e:	106d      	asrs	r5, r5, #1
 800b260:	429d      	cmp	r5, r3
 800b262:	bf38      	it	cc
 800b264:	461d      	movcc	r5, r3
 800b266:	0553      	lsls	r3, r2, #21
 800b268:	d527      	bpl.n	800b2ba <__ssputs_r+0x8e>
 800b26a:	4629      	mov	r1, r5
 800b26c:	f000 f958 	bl	800b520 <_malloc_r>
 800b270:	4606      	mov	r6, r0
 800b272:	b360      	cbz	r0, 800b2ce <__ssputs_r+0xa2>
 800b274:	6921      	ldr	r1, [r4, #16]
 800b276:	464a      	mov	r2, r9
 800b278:	f000 fbc2 	bl	800ba00 <memcpy>
 800b27c:	89a3      	ldrh	r3, [r4, #12]
 800b27e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b286:	81a3      	strh	r3, [r4, #12]
 800b288:	6126      	str	r6, [r4, #16]
 800b28a:	6165      	str	r5, [r4, #20]
 800b28c:	444e      	add	r6, r9
 800b28e:	eba5 0509 	sub.w	r5, r5, r9
 800b292:	6026      	str	r6, [r4, #0]
 800b294:	60a5      	str	r5, [r4, #8]
 800b296:	463e      	mov	r6, r7
 800b298:	42be      	cmp	r6, r7
 800b29a:	d900      	bls.n	800b29e <__ssputs_r+0x72>
 800b29c:	463e      	mov	r6, r7
 800b29e:	6820      	ldr	r0, [r4, #0]
 800b2a0:	4632      	mov	r2, r6
 800b2a2:	4641      	mov	r1, r8
 800b2a4:	f000 fb82 	bl	800b9ac <memmove>
 800b2a8:	68a3      	ldr	r3, [r4, #8]
 800b2aa:	1b9b      	subs	r3, r3, r6
 800b2ac:	60a3      	str	r3, [r4, #8]
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	4433      	add	r3, r6
 800b2b2:	6023      	str	r3, [r4, #0]
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ba:	462a      	mov	r2, r5
 800b2bc:	f000 fb48 	bl	800b950 <_realloc_r>
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	d1e0      	bne.n	800b288 <__ssputs_r+0x5c>
 800b2c6:	6921      	ldr	r1, [r4, #16]
 800b2c8:	4650      	mov	r0, sl
 800b2ca:	f000 fba7 	bl	800ba1c <_free_r>
 800b2ce:	230c      	movs	r3, #12
 800b2d0:	f8ca 3000 	str.w	r3, [sl]
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2da:	81a3      	strh	r3, [r4, #12]
 800b2dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2e0:	e7e9      	b.n	800b2b6 <__ssputs_r+0x8a>
	...

0800b2e4 <_svfiprintf_r>:
 800b2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	4698      	mov	r8, r3
 800b2ea:	898b      	ldrh	r3, [r1, #12]
 800b2ec:	061b      	lsls	r3, r3, #24
 800b2ee:	b09d      	sub	sp, #116	@ 0x74
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	4614      	mov	r4, r2
 800b2f6:	d510      	bpl.n	800b31a <_svfiprintf_r+0x36>
 800b2f8:	690b      	ldr	r3, [r1, #16]
 800b2fa:	b973      	cbnz	r3, 800b31a <_svfiprintf_r+0x36>
 800b2fc:	2140      	movs	r1, #64	@ 0x40
 800b2fe:	f000 f90f 	bl	800b520 <_malloc_r>
 800b302:	6028      	str	r0, [r5, #0]
 800b304:	6128      	str	r0, [r5, #16]
 800b306:	b930      	cbnz	r0, 800b316 <_svfiprintf_r+0x32>
 800b308:	230c      	movs	r3, #12
 800b30a:	603b      	str	r3, [r7, #0]
 800b30c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b310:	b01d      	add	sp, #116	@ 0x74
 800b312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b316:	2340      	movs	r3, #64	@ 0x40
 800b318:	616b      	str	r3, [r5, #20]
 800b31a:	2300      	movs	r3, #0
 800b31c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b31e:	2320      	movs	r3, #32
 800b320:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b324:	f8cd 800c 	str.w	r8, [sp, #12]
 800b328:	2330      	movs	r3, #48	@ 0x30
 800b32a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b4c8 <_svfiprintf_r+0x1e4>
 800b32e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b332:	f04f 0901 	mov.w	r9, #1
 800b336:	4623      	mov	r3, r4
 800b338:	469a      	mov	sl, r3
 800b33a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b33e:	b10a      	cbz	r2, 800b344 <_svfiprintf_r+0x60>
 800b340:	2a25      	cmp	r2, #37	@ 0x25
 800b342:	d1f9      	bne.n	800b338 <_svfiprintf_r+0x54>
 800b344:	ebba 0b04 	subs.w	fp, sl, r4
 800b348:	d00b      	beq.n	800b362 <_svfiprintf_r+0x7e>
 800b34a:	465b      	mov	r3, fp
 800b34c:	4622      	mov	r2, r4
 800b34e:	4629      	mov	r1, r5
 800b350:	4638      	mov	r0, r7
 800b352:	f7ff ff6b 	bl	800b22c <__ssputs_r>
 800b356:	3001      	adds	r0, #1
 800b358:	f000 80a7 	beq.w	800b4aa <_svfiprintf_r+0x1c6>
 800b35c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b35e:	445a      	add	r2, fp
 800b360:	9209      	str	r2, [sp, #36]	@ 0x24
 800b362:	f89a 3000 	ldrb.w	r3, [sl]
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 809f 	beq.w	800b4aa <_svfiprintf_r+0x1c6>
 800b36c:	2300      	movs	r3, #0
 800b36e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b376:	f10a 0a01 	add.w	sl, sl, #1
 800b37a:	9304      	str	r3, [sp, #16]
 800b37c:	9307      	str	r3, [sp, #28]
 800b37e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b382:	931a      	str	r3, [sp, #104]	@ 0x68
 800b384:	4654      	mov	r4, sl
 800b386:	2205      	movs	r2, #5
 800b388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b38c:	484e      	ldr	r0, [pc, #312]	@ (800b4c8 <_svfiprintf_r+0x1e4>)
 800b38e:	f7fc ff2f 	bl	80081f0 <memchr>
 800b392:	9a04      	ldr	r2, [sp, #16]
 800b394:	b9d8      	cbnz	r0, 800b3ce <_svfiprintf_r+0xea>
 800b396:	06d0      	lsls	r0, r2, #27
 800b398:	bf44      	itt	mi
 800b39a:	2320      	movmi	r3, #32
 800b39c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3a0:	0711      	lsls	r1, r2, #28
 800b3a2:	bf44      	itt	mi
 800b3a4:	232b      	movmi	r3, #43	@ 0x2b
 800b3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3b0:	d015      	beq.n	800b3de <_svfiprintf_r+0xfa>
 800b3b2:	9a07      	ldr	r2, [sp, #28]
 800b3b4:	4654      	mov	r4, sl
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	f04f 0c0a 	mov.w	ip, #10
 800b3bc:	4621      	mov	r1, r4
 800b3be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3c2:	3b30      	subs	r3, #48	@ 0x30
 800b3c4:	2b09      	cmp	r3, #9
 800b3c6:	d94b      	bls.n	800b460 <_svfiprintf_r+0x17c>
 800b3c8:	b1b0      	cbz	r0, 800b3f8 <_svfiprintf_r+0x114>
 800b3ca:	9207      	str	r2, [sp, #28]
 800b3cc:	e014      	b.n	800b3f8 <_svfiprintf_r+0x114>
 800b3ce:	eba0 0308 	sub.w	r3, r0, r8
 800b3d2:	fa09 f303 	lsl.w	r3, r9, r3
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	9304      	str	r3, [sp, #16]
 800b3da:	46a2      	mov	sl, r4
 800b3dc:	e7d2      	b.n	800b384 <_svfiprintf_r+0xa0>
 800b3de:	9b03      	ldr	r3, [sp, #12]
 800b3e0:	1d19      	adds	r1, r3, #4
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	9103      	str	r1, [sp, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	bfbb      	ittet	lt
 800b3ea:	425b      	neglt	r3, r3
 800b3ec:	f042 0202 	orrlt.w	r2, r2, #2
 800b3f0:	9307      	strge	r3, [sp, #28]
 800b3f2:	9307      	strlt	r3, [sp, #28]
 800b3f4:	bfb8      	it	lt
 800b3f6:	9204      	strlt	r2, [sp, #16]
 800b3f8:	7823      	ldrb	r3, [r4, #0]
 800b3fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3fc:	d10a      	bne.n	800b414 <_svfiprintf_r+0x130>
 800b3fe:	7863      	ldrb	r3, [r4, #1]
 800b400:	2b2a      	cmp	r3, #42	@ 0x2a
 800b402:	d132      	bne.n	800b46a <_svfiprintf_r+0x186>
 800b404:	9b03      	ldr	r3, [sp, #12]
 800b406:	1d1a      	adds	r2, r3, #4
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	9203      	str	r2, [sp, #12]
 800b40c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b410:	3402      	adds	r4, #2
 800b412:	9305      	str	r3, [sp, #20]
 800b414:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b4d8 <_svfiprintf_r+0x1f4>
 800b418:	7821      	ldrb	r1, [r4, #0]
 800b41a:	2203      	movs	r2, #3
 800b41c:	4650      	mov	r0, sl
 800b41e:	f7fc fee7 	bl	80081f0 <memchr>
 800b422:	b138      	cbz	r0, 800b434 <_svfiprintf_r+0x150>
 800b424:	9b04      	ldr	r3, [sp, #16]
 800b426:	eba0 000a 	sub.w	r0, r0, sl
 800b42a:	2240      	movs	r2, #64	@ 0x40
 800b42c:	4082      	lsls	r2, r0
 800b42e:	4313      	orrs	r3, r2
 800b430:	3401      	adds	r4, #1
 800b432:	9304      	str	r3, [sp, #16]
 800b434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b438:	4824      	ldr	r0, [pc, #144]	@ (800b4cc <_svfiprintf_r+0x1e8>)
 800b43a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b43e:	2206      	movs	r2, #6
 800b440:	f7fc fed6 	bl	80081f0 <memchr>
 800b444:	2800      	cmp	r0, #0
 800b446:	d036      	beq.n	800b4b6 <_svfiprintf_r+0x1d2>
 800b448:	4b21      	ldr	r3, [pc, #132]	@ (800b4d0 <_svfiprintf_r+0x1ec>)
 800b44a:	bb1b      	cbnz	r3, 800b494 <_svfiprintf_r+0x1b0>
 800b44c:	9b03      	ldr	r3, [sp, #12]
 800b44e:	3307      	adds	r3, #7
 800b450:	f023 0307 	bic.w	r3, r3, #7
 800b454:	3308      	adds	r3, #8
 800b456:	9303      	str	r3, [sp, #12]
 800b458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b45a:	4433      	add	r3, r6
 800b45c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b45e:	e76a      	b.n	800b336 <_svfiprintf_r+0x52>
 800b460:	fb0c 3202 	mla	r2, ip, r2, r3
 800b464:	460c      	mov	r4, r1
 800b466:	2001      	movs	r0, #1
 800b468:	e7a8      	b.n	800b3bc <_svfiprintf_r+0xd8>
 800b46a:	2300      	movs	r3, #0
 800b46c:	3401      	adds	r4, #1
 800b46e:	9305      	str	r3, [sp, #20]
 800b470:	4619      	mov	r1, r3
 800b472:	f04f 0c0a 	mov.w	ip, #10
 800b476:	4620      	mov	r0, r4
 800b478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b47c:	3a30      	subs	r2, #48	@ 0x30
 800b47e:	2a09      	cmp	r2, #9
 800b480:	d903      	bls.n	800b48a <_svfiprintf_r+0x1a6>
 800b482:	2b00      	cmp	r3, #0
 800b484:	d0c6      	beq.n	800b414 <_svfiprintf_r+0x130>
 800b486:	9105      	str	r1, [sp, #20]
 800b488:	e7c4      	b.n	800b414 <_svfiprintf_r+0x130>
 800b48a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b48e:	4604      	mov	r4, r0
 800b490:	2301      	movs	r3, #1
 800b492:	e7f0      	b.n	800b476 <_svfiprintf_r+0x192>
 800b494:	ab03      	add	r3, sp, #12
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	462a      	mov	r2, r5
 800b49a:	4b0e      	ldr	r3, [pc, #56]	@ (800b4d4 <_svfiprintf_r+0x1f0>)
 800b49c:	a904      	add	r1, sp, #16
 800b49e:	4638      	mov	r0, r7
 800b4a0:	f3af 8000 	nop.w
 800b4a4:	1c42      	adds	r2, r0, #1
 800b4a6:	4606      	mov	r6, r0
 800b4a8:	d1d6      	bne.n	800b458 <_svfiprintf_r+0x174>
 800b4aa:	89ab      	ldrh	r3, [r5, #12]
 800b4ac:	065b      	lsls	r3, r3, #25
 800b4ae:	f53f af2d 	bmi.w	800b30c <_svfiprintf_r+0x28>
 800b4b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4b4:	e72c      	b.n	800b310 <_svfiprintf_r+0x2c>
 800b4b6:	ab03      	add	r3, sp, #12
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	462a      	mov	r2, r5
 800b4bc:	4b05      	ldr	r3, [pc, #20]	@ (800b4d4 <_svfiprintf_r+0x1f0>)
 800b4be:	a904      	add	r1, sp, #16
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	f000 f91b 	bl	800b6fc <_printf_i>
 800b4c6:	e7ed      	b.n	800b4a4 <_svfiprintf_r+0x1c0>
 800b4c8:	0800bb30 	.word	0x0800bb30
 800b4cc:	0800bb3a 	.word	0x0800bb3a
 800b4d0:	00000000 	.word	0x00000000
 800b4d4:	0800b22d 	.word	0x0800b22d
 800b4d8:	0800bb36 	.word	0x0800bb36

0800b4dc <sbrk_aligned>:
 800b4dc:	b570      	push	{r4, r5, r6, lr}
 800b4de:	4e0f      	ldr	r6, [pc, #60]	@ (800b51c <sbrk_aligned+0x40>)
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	6831      	ldr	r1, [r6, #0]
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	b911      	cbnz	r1, 800b4ee <sbrk_aligned+0x12>
 800b4e8:	f000 fa7a 	bl	800b9e0 <_sbrk_r>
 800b4ec:	6030      	str	r0, [r6, #0]
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	f000 fa75 	bl	800b9e0 <_sbrk_r>
 800b4f6:	1c43      	adds	r3, r0, #1
 800b4f8:	d103      	bne.n	800b502 <sbrk_aligned+0x26>
 800b4fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b4fe:	4620      	mov	r0, r4
 800b500:	bd70      	pop	{r4, r5, r6, pc}
 800b502:	1cc4      	adds	r4, r0, #3
 800b504:	f024 0403 	bic.w	r4, r4, #3
 800b508:	42a0      	cmp	r0, r4
 800b50a:	d0f8      	beq.n	800b4fe <sbrk_aligned+0x22>
 800b50c:	1a21      	subs	r1, r4, r0
 800b50e:	4628      	mov	r0, r5
 800b510:	f000 fa66 	bl	800b9e0 <_sbrk_r>
 800b514:	3001      	adds	r0, #1
 800b516:	d1f2      	bne.n	800b4fe <sbrk_aligned+0x22>
 800b518:	e7ef      	b.n	800b4fa <sbrk_aligned+0x1e>
 800b51a:	bf00      	nop
 800b51c:	200002cc 	.word	0x200002cc

0800b520 <_malloc_r>:
 800b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b524:	1ccd      	adds	r5, r1, #3
 800b526:	f025 0503 	bic.w	r5, r5, #3
 800b52a:	3508      	adds	r5, #8
 800b52c:	2d0c      	cmp	r5, #12
 800b52e:	bf38      	it	cc
 800b530:	250c      	movcc	r5, #12
 800b532:	2d00      	cmp	r5, #0
 800b534:	4606      	mov	r6, r0
 800b536:	db01      	blt.n	800b53c <_malloc_r+0x1c>
 800b538:	42a9      	cmp	r1, r5
 800b53a:	d904      	bls.n	800b546 <_malloc_r+0x26>
 800b53c:	230c      	movs	r3, #12
 800b53e:	6033      	str	r3, [r6, #0]
 800b540:	2000      	movs	r0, #0
 800b542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b546:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b61c <_malloc_r+0xfc>
 800b54a:	f000 f9f5 	bl	800b938 <__malloc_lock>
 800b54e:	f8d8 3000 	ldr.w	r3, [r8]
 800b552:	461c      	mov	r4, r3
 800b554:	bb44      	cbnz	r4, 800b5a8 <_malloc_r+0x88>
 800b556:	4629      	mov	r1, r5
 800b558:	4630      	mov	r0, r6
 800b55a:	f7ff ffbf 	bl	800b4dc <sbrk_aligned>
 800b55e:	1c43      	adds	r3, r0, #1
 800b560:	4604      	mov	r4, r0
 800b562:	d158      	bne.n	800b616 <_malloc_r+0xf6>
 800b564:	f8d8 4000 	ldr.w	r4, [r8]
 800b568:	4627      	mov	r7, r4
 800b56a:	2f00      	cmp	r7, #0
 800b56c:	d143      	bne.n	800b5f6 <_malloc_r+0xd6>
 800b56e:	2c00      	cmp	r4, #0
 800b570:	d04b      	beq.n	800b60a <_malloc_r+0xea>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	4639      	mov	r1, r7
 800b576:	4630      	mov	r0, r6
 800b578:	eb04 0903 	add.w	r9, r4, r3
 800b57c:	f000 fa30 	bl	800b9e0 <_sbrk_r>
 800b580:	4581      	cmp	r9, r0
 800b582:	d142      	bne.n	800b60a <_malloc_r+0xea>
 800b584:	6821      	ldr	r1, [r4, #0]
 800b586:	1a6d      	subs	r5, r5, r1
 800b588:	4629      	mov	r1, r5
 800b58a:	4630      	mov	r0, r6
 800b58c:	f7ff ffa6 	bl	800b4dc <sbrk_aligned>
 800b590:	3001      	adds	r0, #1
 800b592:	d03a      	beq.n	800b60a <_malloc_r+0xea>
 800b594:	6823      	ldr	r3, [r4, #0]
 800b596:	442b      	add	r3, r5
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	f8d8 3000 	ldr.w	r3, [r8]
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	bb62      	cbnz	r2, 800b5fc <_malloc_r+0xdc>
 800b5a2:	f8c8 7000 	str.w	r7, [r8]
 800b5a6:	e00f      	b.n	800b5c8 <_malloc_r+0xa8>
 800b5a8:	6822      	ldr	r2, [r4, #0]
 800b5aa:	1b52      	subs	r2, r2, r5
 800b5ac:	d420      	bmi.n	800b5f0 <_malloc_r+0xd0>
 800b5ae:	2a0b      	cmp	r2, #11
 800b5b0:	d917      	bls.n	800b5e2 <_malloc_r+0xc2>
 800b5b2:	1961      	adds	r1, r4, r5
 800b5b4:	42a3      	cmp	r3, r4
 800b5b6:	6025      	str	r5, [r4, #0]
 800b5b8:	bf18      	it	ne
 800b5ba:	6059      	strne	r1, [r3, #4]
 800b5bc:	6863      	ldr	r3, [r4, #4]
 800b5be:	bf08      	it	eq
 800b5c0:	f8c8 1000 	streq.w	r1, [r8]
 800b5c4:	5162      	str	r2, [r4, r5]
 800b5c6:	604b      	str	r3, [r1, #4]
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f000 f9bb 	bl	800b944 <__malloc_unlock>
 800b5ce:	f104 000b 	add.w	r0, r4, #11
 800b5d2:	1d23      	adds	r3, r4, #4
 800b5d4:	f020 0007 	bic.w	r0, r0, #7
 800b5d8:	1ac2      	subs	r2, r0, r3
 800b5da:	bf1c      	itt	ne
 800b5dc:	1a1b      	subne	r3, r3, r0
 800b5de:	50a3      	strne	r3, [r4, r2]
 800b5e0:	e7af      	b.n	800b542 <_malloc_r+0x22>
 800b5e2:	6862      	ldr	r2, [r4, #4]
 800b5e4:	42a3      	cmp	r3, r4
 800b5e6:	bf0c      	ite	eq
 800b5e8:	f8c8 2000 	streq.w	r2, [r8]
 800b5ec:	605a      	strne	r2, [r3, #4]
 800b5ee:	e7eb      	b.n	800b5c8 <_malloc_r+0xa8>
 800b5f0:	4623      	mov	r3, r4
 800b5f2:	6864      	ldr	r4, [r4, #4]
 800b5f4:	e7ae      	b.n	800b554 <_malloc_r+0x34>
 800b5f6:	463c      	mov	r4, r7
 800b5f8:	687f      	ldr	r7, [r7, #4]
 800b5fa:	e7b6      	b.n	800b56a <_malloc_r+0x4a>
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	42a3      	cmp	r3, r4
 800b602:	d1fb      	bne.n	800b5fc <_malloc_r+0xdc>
 800b604:	2300      	movs	r3, #0
 800b606:	6053      	str	r3, [r2, #4]
 800b608:	e7de      	b.n	800b5c8 <_malloc_r+0xa8>
 800b60a:	230c      	movs	r3, #12
 800b60c:	6033      	str	r3, [r6, #0]
 800b60e:	4630      	mov	r0, r6
 800b610:	f000 f998 	bl	800b944 <__malloc_unlock>
 800b614:	e794      	b.n	800b540 <_malloc_r+0x20>
 800b616:	6005      	str	r5, [r0, #0]
 800b618:	e7d6      	b.n	800b5c8 <_malloc_r+0xa8>
 800b61a:	bf00      	nop
 800b61c:	200002d0 	.word	0x200002d0

0800b620 <_printf_common>:
 800b620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b624:	4616      	mov	r6, r2
 800b626:	4698      	mov	r8, r3
 800b628:	688a      	ldr	r2, [r1, #8]
 800b62a:	690b      	ldr	r3, [r1, #16]
 800b62c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b630:	4293      	cmp	r3, r2
 800b632:	bfb8      	it	lt
 800b634:	4613      	movlt	r3, r2
 800b636:	6033      	str	r3, [r6, #0]
 800b638:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b63c:	4607      	mov	r7, r0
 800b63e:	460c      	mov	r4, r1
 800b640:	b10a      	cbz	r2, 800b646 <_printf_common+0x26>
 800b642:	3301      	adds	r3, #1
 800b644:	6033      	str	r3, [r6, #0]
 800b646:	6823      	ldr	r3, [r4, #0]
 800b648:	0699      	lsls	r1, r3, #26
 800b64a:	bf42      	ittt	mi
 800b64c:	6833      	ldrmi	r3, [r6, #0]
 800b64e:	3302      	addmi	r3, #2
 800b650:	6033      	strmi	r3, [r6, #0]
 800b652:	6825      	ldr	r5, [r4, #0]
 800b654:	f015 0506 	ands.w	r5, r5, #6
 800b658:	d106      	bne.n	800b668 <_printf_common+0x48>
 800b65a:	f104 0a19 	add.w	sl, r4, #25
 800b65e:	68e3      	ldr	r3, [r4, #12]
 800b660:	6832      	ldr	r2, [r6, #0]
 800b662:	1a9b      	subs	r3, r3, r2
 800b664:	42ab      	cmp	r3, r5
 800b666:	dc26      	bgt.n	800b6b6 <_printf_common+0x96>
 800b668:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b66c:	6822      	ldr	r2, [r4, #0]
 800b66e:	3b00      	subs	r3, #0
 800b670:	bf18      	it	ne
 800b672:	2301      	movne	r3, #1
 800b674:	0692      	lsls	r2, r2, #26
 800b676:	d42b      	bmi.n	800b6d0 <_printf_common+0xb0>
 800b678:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b67c:	4641      	mov	r1, r8
 800b67e:	4638      	mov	r0, r7
 800b680:	47c8      	blx	r9
 800b682:	3001      	adds	r0, #1
 800b684:	d01e      	beq.n	800b6c4 <_printf_common+0xa4>
 800b686:	6823      	ldr	r3, [r4, #0]
 800b688:	6922      	ldr	r2, [r4, #16]
 800b68a:	f003 0306 	and.w	r3, r3, #6
 800b68e:	2b04      	cmp	r3, #4
 800b690:	bf02      	ittt	eq
 800b692:	68e5      	ldreq	r5, [r4, #12]
 800b694:	6833      	ldreq	r3, [r6, #0]
 800b696:	1aed      	subeq	r5, r5, r3
 800b698:	68a3      	ldr	r3, [r4, #8]
 800b69a:	bf0c      	ite	eq
 800b69c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6a0:	2500      	movne	r5, #0
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	bfc4      	itt	gt
 800b6a6:	1a9b      	subgt	r3, r3, r2
 800b6a8:	18ed      	addgt	r5, r5, r3
 800b6aa:	2600      	movs	r6, #0
 800b6ac:	341a      	adds	r4, #26
 800b6ae:	42b5      	cmp	r5, r6
 800b6b0:	d11a      	bne.n	800b6e8 <_printf_common+0xc8>
 800b6b2:	2000      	movs	r0, #0
 800b6b4:	e008      	b.n	800b6c8 <_printf_common+0xa8>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	4652      	mov	r2, sl
 800b6ba:	4641      	mov	r1, r8
 800b6bc:	4638      	mov	r0, r7
 800b6be:	47c8      	blx	r9
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d103      	bne.n	800b6cc <_printf_common+0xac>
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6cc:	3501      	adds	r5, #1
 800b6ce:	e7c6      	b.n	800b65e <_printf_common+0x3e>
 800b6d0:	18e1      	adds	r1, r4, r3
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	2030      	movs	r0, #48	@ 0x30
 800b6d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6da:	4422      	add	r2, r4
 800b6dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6e4:	3302      	adds	r3, #2
 800b6e6:	e7c7      	b.n	800b678 <_printf_common+0x58>
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	4641      	mov	r1, r8
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	47c8      	blx	r9
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	d0e6      	beq.n	800b6c4 <_printf_common+0xa4>
 800b6f6:	3601      	adds	r6, #1
 800b6f8:	e7d9      	b.n	800b6ae <_printf_common+0x8e>
	...

0800b6fc <_printf_i>:
 800b6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b700:	7e0f      	ldrb	r7, [r1, #24]
 800b702:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b704:	2f78      	cmp	r7, #120	@ 0x78
 800b706:	4691      	mov	r9, r2
 800b708:	4680      	mov	r8, r0
 800b70a:	460c      	mov	r4, r1
 800b70c:	469a      	mov	sl, r3
 800b70e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b712:	d807      	bhi.n	800b724 <_printf_i+0x28>
 800b714:	2f62      	cmp	r7, #98	@ 0x62
 800b716:	d80a      	bhi.n	800b72e <_printf_i+0x32>
 800b718:	2f00      	cmp	r7, #0
 800b71a:	f000 80d1 	beq.w	800b8c0 <_printf_i+0x1c4>
 800b71e:	2f58      	cmp	r7, #88	@ 0x58
 800b720:	f000 80b8 	beq.w	800b894 <_printf_i+0x198>
 800b724:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b728:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b72c:	e03a      	b.n	800b7a4 <_printf_i+0xa8>
 800b72e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b732:	2b15      	cmp	r3, #21
 800b734:	d8f6      	bhi.n	800b724 <_printf_i+0x28>
 800b736:	a101      	add	r1, pc, #4	@ (adr r1, 800b73c <_printf_i+0x40>)
 800b738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b73c:	0800b795 	.word	0x0800b795
 800b740:	0800b7a9 	.word	0x0800b7a9
 800b744:	0800b725 	.word	0x0800b725
 800b748:	0800b725 	.word	0x0800b725
 800b74c:	0800b725 	.word	0x0800b725
 800b750:	0800b725 	.word	0x0800b725
 800b754:	0800b7a9 	.word	0x0800b7a9
 800b758:	0800b725 	.word	0x0800b725
 800b75c:	0800b725 	.word	0x0800b725
 800b760:	0800b725 	.word	0x0800b725
 800b764:	0800b725 	.word	0x0800b725
 800b768:	0800b8a7 	.word	0x0800b8a7
 800b76c:	0800b7d3 	.word	0x0800b7d3
 800b770:	0800b861 	.word	0x0800b861
 800b774:	0800b725 	.word	0x0800b725
 800b778:	0800b725 	.word	0x0800b725
 800b77c:	0800b8c9 	.word	0x0800b8c9
 800b780:	0800b725 	.word	0x0800b725
 800b784:	0800b7d3 	.word	0x0800b7d3
 800b788:	0800b725 	.word	0x0800b725
 800b78c:	0800b725 	.word	0x0800b725
 800b790:	0800b869 	.word	0x0800b869
 800b794:	6833      	ldr	r3, [r6, #0]
 800b796:	1d1a      	adds	r2, r3, #4
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	6032      	str	r2, [r6, #0]
 800b79c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e09c      	b.n	800b8e2 <_printf_i+0x1e6>
 800b7a8:	6833      	ldr	r3, [r6, #0]
 800b7aa:	6820      	ldr	r0, [r4, #0]
 800b7ac:	1d19      	adds	r1, r3, #4
 800b7ae:	6031      	str	r1, [r6, #0]
 800b7b0:	0606      	lsls	r6, r0, #24
 800b7b2:	d501      	bpl.n	800b7b8 <_printf_i+0xbc>
 800b7b4:	681d      	ldr	r5, [r3, #0]
 800b7b6:	e003      	b.n	800b7c0 <_printf_i+0xc4>
 800b7b8:	0645      	lsls	r5, r0, #25
 800b7ba:	d5fb      	bpl.n	800b7b4 <_printf_i+0xb8>
 800b7bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7c0:	2d00      	cmp	r5, #0
 800b7c2:	da03      	bge.n	800b7cc <_printf_i+0xd0>
 800b7c4:	232d      	movs	r3, #45	@ 0x2d
 800b7c6:	426d      	negs	r5, r5
 800b7c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7cc:	4858      	ldr	r0, [pc, #352]	@ (800b930 <_printf_i+0x234>)
 800b7ce:	230a      	movs	r3, #10
 800b7d0:	e011      	b.n	800b7f6 <_printf_i+0xfa>
 800b7d2:	6821      	ldr	r1, [r4, #0]
 800b7d4:	6833      	ldr	r3, [r6, #0]
 800b7d6:	0608      	lsls	r0, r1, #24
 800b7d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7dc:	d402      	bmi.n	800b7e4 <_printf_i+0xe8>
 800b7de:	0649      	lsls	r1, r1, #25
 800b7e0:	bf48      	it	mi
 800b7e2:	b2ad      	uxthmi	r5, r5
 800b7e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7e6:	4852      	ldr	r0, [pc, #328]	@ (800b930 <_printf_i+0x234>)
 800b7e8:	6033      	str	r3, [r6, #0]
 800b7ea:	bf14      	ite	ne
 800b7ec:	230a      	movne	r3, #10
 800b7ee:	2308      	moveq	r3, #8
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7f6:	6866      	ldr	r6, [r4, #4]
 800b7f8:	60a6      	str	r6, [r4, #8]
 800b7fa:	2e00      	cmp	r6, #0
 800b7fc:	db05      	blt.n	800b80a <_printf_i+0x10e>
 800b7fe:	6821      	ldr	r1, [r4, #0]
 800b800:	432e      	orrs	r6, r5
 800b802:	f021 0104 	bic.w	r1, r1, #4
 800b806:	6021      	str	r1, [r4, #0]
 800b808:	d04b      	beq.n	800b8a2 <_printf_i+0x1a6>
 800b80a:	4616      	mov	r6, r2
 800b80c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b810:	fb03 5711 	mls	r7, r3, r1, r5
 800b814:	5dc7      	ldrb	r7, [r0, r7]
 800b816:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b81a:	462f      	mov	r7, r5
 800b81c:	42bb      	cmp	r3, r7
 800b81e:	460d      	mov	r5, r1
 800b820:	d9f4      	bls.n	800b80c <_printf_i+0x110>
 800b822:	2b08      	cmp	r3, #8
 800b824:	d10b      	bne.n	800b83e <_printf_i+0x142>
 800b826:	6823      	ldr	r3, [r4, #0]
 800b828:	07df      	lsls	r7, r3, #31
 800b82a:	d508      	bpl.n	800b83e <_printf_i+0x142>
 800b82c:	6923      	ldr	r3, [r4, #16]
 800b82e:	6861      	ldr	r1, [r4, #4]
 800b830:	4299      	cmp	r1, r3
 800b832:	bfde      	ittt	le
 800b834:	2330      	movle	r3, #48	@ 0x30
 800b836:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b83a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b83e:	1b92      	subs	r2, r2, r6
 800b840:	6122      	str	r2, [r4, #16]
 800b842:	f8cd a000 	str.w	sl, [sp]
 800b846:	464b      	mov	r3, r9
 800b848:	aa03      	add	r2, sp, #12
 800b84a:	4621      	mov	r1, r4
 800b84c:	4640      	mov	r0, r8
 800b84e:	f7ff fee7 	bl	800b620 <_printf_common>
 800b852:	3001      	adds	r0, #1
 800b854:	d14a      	bne.n	800b8ec <_printf_i+0x1f0>
 800b856:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b85a:	b004      	add	sp, #16
 800b85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b860:	6823      	ldr	r3, [r4, #0]
 800b862:	f043 0320 	orr.w	r3, r3, #32
 800b866:	6023      	str	r3, [r4, #0]
 800b868:	4832      	ldr	r0, [pc, #200]	@ (800b934 <_printf_i+0x238>)
 800b86a:	2778      	movs	r7, #120	@ 0x78
 800b86c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	6831      	ldr	r1, [r6, #0]
 800b874:	061f      	lsls	r7, r3, #24
 800b876:	f851 5b04 	ldr.w	r5, [r1], #4
 800b87a:	d402      	bmi.n	800b882 <_printf_i+0x186>
 800b87c:	065f      	lsls	r7, r3, #25
 800b87e:	bf48      	it	mi
 800b880:	b2ad      	uxthmi	r5, r5
 800b882:	6031      	str	r1, [r6, #0]
 800b884:	07d9      	lsls	r1, r3, #31
 800b886:	bf44      	itt	mi
 800b888:	f043 0320 	orrmi.w	r3, r3, #32
 800b88c:	6023      	strmi	r3, [r4, #0]
 800b88e:	b11d      	cbz	r5, 800b898 <_printf_i+0x19c>
 800b890:	2310      	movs	r3, #16
 800b892:	e7ad      	b.n	800b7f0 <_printf_i+0xf4>
 800b894:	4826      	ldr	r0, [pc, #152]	@ (800b930 <_printf_i+0x234>)
 800b896:	e7e9      	b.n	800b86c <_printf_i+0x170>
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	f023 0320 	bic.w	r3, r3, #32
 800b89e:	6023      	str	r3, [r4, #0]
 800b8a0:	e7f6      	b.n	800b890 <_printf_i+0x194>
 800b8a2:	4616      	mov	r6, r2
 800b8a4:	e7bd      	b.n	800b822 <_printf_i+0x126>
 800b8a6:	6833      	ldr	r3, [r6, #0]
 800b8a8:	6825      	ldr	r5, [r4, #0]
 800b8aa:	6961      	ldr	r1, [r4, #20]
 800b8ac:	1d18      	adds	r0, r3, #4
 800b8ae:	6030      	str	r0, [r6, #0]
 800b8b0:	062e      	lsls	r6, r5, #24
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	d501      	bpl.n	800b8ba <_printf_i+0x1be>
 800b8b6:	6019      	str	r1, [r3, #0]
 800b8b8:	e002      	b.n	800b8c0 <_printf_i+0x1c4>
 800b8ba:	0668      	lsls	r0, r5, #25
 800b8bc:	d5fb      	bpl.n	800b8b6 <_printf_i+0x1ba>
 800b8be:	8019      	strh	r1, [r3, #0]
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	6123      	str	r3, [r4, #16]
 800b8c4:	4616      	mov	r6, r2
 800b8c6:	e7bc      	b.n	800b842 <_printf_i+0x146>
 800b8c8:	6833      	ldr	r3, [r6, #0]
 800b8ca:	1d1a      	adds	r2, r3, #4
 800b8cc:	6032      	str	r2, [r6, #0]
 800b8ce:	681e      	ldr	r6, [r3, #0]
 800b8d0:	6862      	ldr	r2, [r4, #4]
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f7fc fc8b 	bl	80081f0 <memchr>
 800b8da:	b108      	cbz	r0, 800b8e0 <_printf_i+0x1e4>
 800b8dc:	1b80      	subs	r0, r0, r6
 800b8de:	6060      	str	r0, [r4, #4]
 800b8e0:	6863      	ldr	r3, [r4, #4]
 800b8e2:	6123      	str	r3, [r4, #16]
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8ea:	e7aa      	b.n	800b842 <_printf_i+0x146>
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	4632      	mov	r2, r6
 800b8f0:	4649      	mov	r1, r9
 800b8f2:	4640      	mov	r0, r8
 800b8f4:	47d0      	blx	sl
 800b8f6:	3001      	adds	r0, #1
 800b8f8:	d0ad      	beq.n	800b856 <_printf_i+0x15a>
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	079b      	lsls	r3, r3, #30
 800b8fe:	d413      	bmi.n	800b928 <_printf_i+0x22c>
 800b900:	68e0      	ldr	r0, [r4, #12]
 800b902:	9b03      	ldr	r3, [sp, #12]
 800b904:	4298      	cmp	r0, r3
 800b906:	bfb8      	it	lt
 800b908:	4618      	movlt	r0, r3
 800b90a:	e7a6      	b.n	800b85a <_printf_i+0x15e>
 800b90c:	2301      	movs	r3, #1
 800b90e:	4632      	mov	r2, r6
 800b910:	4649      	mov	r1, r9
 800b912:	4640      	mov	r0, r8
 800b914:	47d0      	blx	sl
 800b916:	3001      	adds	r0, #1
 800b918:	d09d      	beq.n	800b856 <_printf_i+0x15a>
 800b91a:	3501      	adds	r5, #1
 800b91c:	68e3      	ldr	r3, [r4, #12]
 800b91e:	9903      	ldr	r1, [sp, #12]
 800b920:	1a5b      	subs	r3, r3, r1
 800b922:	42ab      	cmp	r3, r5
 800b924:	dcf2      	bgt.n	800b90c <_printf_i+0x210>
 800b926:	e7eb      	b.n	800b900 <_printf_i+0x204>
 800b928:	2500      	movs	r5, #0
 800b92a:	f104 0619 	add.w	r6, r4, #25
 800b92e:	e7f5      	b.n	800b91c <_printf_i+0x220>
 800b930:	0800bb41 	.word	0x0800bb41
 800b934:	0800bb52 	.word	0x0800bb52

0800b938 <__malloc_lock>:
 800b938:	4801      	ldr	r0, [pc, #4]	@ (800b940 <__malloc_lock+0x8>)
 800b93a:	f7ff bc75 	b.w	800b228 <__retarget_lock_acquire_recursive>
 800b93e:	bf00      	nop
 800b940:	200002c8 	.word	0x200002c8

0800b944 <__malloc_unlock>:
 800b944:	4801      	ldr	r0, [pc, #4]	@ (800b94c <__malloc_unlock+0x8>)
 800b946:	f7ff bc70 	b.w	800b22a <__retarget_lock_release_recursive>
 800b94a:	bf00      	nop
 800b94c:	200002c8 	.word	0x200002c8

0800b950 <_realloc_r>:
 800b950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b954:	4607      	mov	r7, r0
 800b956:	4614      	mov	r4, r2
 800b958:	460d      	mov	r5, r1
 800b95a:	b921      	cbnz	r1, 800b966 <_realloc_r+0x16>
 800b95c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b960:	4611      	mov	r1, r2
 800b962:	f7ff bddd 	b.w	800b520 <_malloc_r>
 800b966:	b92a      	cbnz	r2, 800b974 <_realloc_r+0x24>
 800b968:	f000 f858 	bl	800ba1c <_free_r>
 800b96c:	4625      	mov	r5, r4
 800b96e:	4628      	mov	r0, r5
 800b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b974:	f000 f89c 	bl	800bab0 <_malloc_usable_size_r>
 800b978:	4284      	cmp	r4, r0
 800b97a:	4606      	mov	r6, r0
 800b97c:	d802      	bhi.n	800b984 <_realloc_r+0x34>
 800b97e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b982:	d8f4      	bhi.n	800b96e <_realloc_r+0x1e>
 800b984:	4621      	mov	r1, r4
 800b986:	4638      	mov	r0, r7
 800b988:	f7ff fdca 	bl	800b520 <_malloc_r>
 800b98c:	4680      	mov	r8, r0
 800b98e:	b908      	cbnz	r0, 800b994 <_realloc_r+0x44>
 800b990:	4645      	mov	r5, r8
 800b992:	e7ec      	b.n	800b96e <_realloc_r+0x1e>
 800b994:	42b4      	cmp	r4, r6
 800b996:	4622      	mov	r2, r4
 800b998:	4629      	mov	r1, r5
 800b99a:	bf28      	it	cs
 800b99c:	4632      	movcs	r2, r6
 800b99e:	f000 f82f 	bl	800ba00 <memcpy>
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	f000 f839 	bl	800ba1c <_free_r>
 800b9aa:	e7f1      	b.n	800b990 <_realloc_r+0x40>

0800b9ac <memmove>:
 800b9ac:	4288      	cmp	r0, r1
 800b9ae:	b510      	push	{r4, lr}
 800b9b0:	eb01 0402 	add.w	r4, r1, r2
 800b9b4:	d902      	bls.n	800b9bc <memmove+0x10>
 800b9b6:	4284      	cmp	r4, r0
 800b9b8:	4623      	mov	r3, r4
 800b9ba:	d807      	bhi.n	800b9cc <memmove+0x20>
 800b9bc:	1e43      	subs	r3, r0, #1
 800b9be:	42a1      	cmp	r1, r4
 800b9c0:	d008      	beq.n	800b9d4 <memmove+0x28>
 800b9c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9ca:	e7f8      	b.n	800b9be <memmove+0x12>
 800b9cc:	4402      	add	r2, r0
 800b9ce:	4601      	mov	r1, r0
 800b9d0:	428a      	cmp	r2, r1
 800b9d2:	d100      	bne.n	800b9d6 <memmove+0x2a>
 800b9d4:	bd10      	pop	{r4, pc}
 800b9d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9de:	e7f7      	b.n	800b9d0 <memmove+0x24>

0800b9e0 <_sbrk_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d06      	ldr	r5, [pc, #24]	@ (800b9fc <_sbrk_r+0x1c>)
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4608      	mov	r0, r1
 800b9ea:	602b      	str	r3, [r5, #0]
 800b9ec:	f7fc fea6 	bl	800873c <_sbrk>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d102      	bne.n	800b9fa <_sbrk_r+0x1a>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	b103      	cbz	r3, 800b9fa <_sbrk_r+0x1a>
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	200002d4 	.word	0x200002d4

0800ba00 <memcpy>:
 800ba00:	440a      	add	r2, r1
 800ba02:	4291      	cmp	r1, r2
 800ba04:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ba08:	d100      	bne.n	800ba0c <memcpy+0xc>
 800ba0a:	4770      	bx	lr
 800ba0c:	b510      	push	{r4, lr}
 800ba0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba16:	4291      	cmp	r1, r2
 800ba18:	d1f9      	bne.n	800ba0e <memcpy+0xe>
 800ba1a:	bd10      	pop	{r4, pc}

0800ba1c <_free_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4605      	mov	r5, r0
 800ba20:	2900      	cmp	r1, #0
 800ba22:	d041      	beq.n	800baa8 <_free_r+0x8c>
 800ba24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba28:	1f0c      	subs	r4, r1, #4
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	bfb8      	it	lt
 800ba2e:	18e4      	addlt	r4, r4, r3
 800ba30:	f7ff ff82 	bl	800b938 <__malloc_lock>
 800ba34:	4a1d      	ldr	r2, [pc, #116]	@ (800baac <_free_r+0x90>)
 800ba36:	6813      	ldr	r3, [r2, #0]
 800ba38:	b933      	cbnz	r3, 800ba48 <_free_r+0x2c>
 800ba3a:	6063      	str	r3, [r4, #4]
 800ba3c:	6014      	str	r4, [r2, #0]
 800ba3e:	4628      	mov	r0, r5
 800ba40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba44:	f7ff bf7e 	b.w	800b944 <__malloc_unlock>
 800ba48:	42a3      	cmp	r3, r4
 800ba4a:	d908      	bls.n	800ba5e <_free_r+0x42>
 800ba4c:	6820      	ldr	r0, [r4, #0]
 800ba4e:	1821      	adds	r1, r4, r0
 800ba50:	428b      	cmp	r3, r1
 800ba52:	bf01      	itttt	eq
 800ba54:	6819      	ldreq	r1, [r3, #0]
 800ba56:	685b      	ldreq	r3, [r3, #4]
 800ba58:	1809      	addeq	r1, r1, r0
 800ba5a:	6021      	streq	r1, [r4, #0]
 800ba5c:	e7ed      	b.n	800ba3a <_free_r+0x1e>
 800ba5e:	461a      	mov	r2, r3
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	b10b      	cbz	r3, 800ba68 <_free_r+0x4c>
 800ba64:	42a3      	cmp	r3, r4
 800ba66:	d9fa      	bls.n	800ba5e <_free_r+0x42>
 800ba68:	6811      	ldr	r1, [r2, #0]
 800ba6a:	1850      	adds	r0, r2, r1
 800ba6c:	42a0      	cmp	r0, r4
 800ba6e:	d10b      	bne.n	800ba88 <_free_r+0x6c>
 800ba70:	6820      	ldr	r0, [r4, #0]
 800ba72:	4401      	add	r1, r0
 800ba74:	1850      	adds	r0, r2, r1
 800ba76:	4283      	cmp	r3, r0
 800ba78:	6011      	str	r1, [r2, #0]
 800ba7a:	d1e0      	bne.n	800ba3e <_free_r+0x22>
 800ba7c:	6818      	ldr	r0, [r3, #0]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	6053      	str	r3, [r2, #4]
 800ba82:	4408      	add	r0, r1
 800ba84:	6010      	str	r0, [r2, #0]
 800ba86:	e7da      	b.n	800ba3e <_free_r+0x22>
 800ba88:	d902      	bls.n	800ba90 <_free_r+0x74>
 800ba8a:	230c      	movs	r3, #12
 800ba8c:	602b      	str	r3, [r5, #0]
 800ba8e:	e7d6      	b.n	800ba3e <_free_r+0x22>
 800ba90:	6820      	ldr	r0, [r4, #0]
 800ba92:	1821      	adds	r1, r4, r0
 800ba94:	428b      	cmp	r3, r1
 800ba96:	bf04      	itt	eq
 800ba98:	6819      	ldreq	r1, [r3, #0]
 800ba9a:	685b      	ldreq	r3, [r3, #4]
 800ba9c:	6063      	str	r3, [r4, #4]
 800ba9e:	bf04      	itt	eq
 800baa0:	1809      	addeq	r1, r1, r0
 800baa2:	6021      	streq	r1, [r4, #0]
 800baa4:	6054      	str	r4, [r2, #4]
 800baa6:	e7ca      	b.n	800ba3e <_free_r+0x22>
 800baa8:	bd38      	pop	{r3, r4, r5, pc}
 800baaa:	bf00      	nop
 800baac:	200002d0 	.word	0x200002d0

0800bab0 <_malloc_usable_size_r>:
 800bab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bab4:	1f18      	subs	r0, r3, #4
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	bfbc      	itt	lt
 800baba:	580b      	ldrlt	r3, [r1, r0]
 800babc:	18c0      	addlt	r0, r0, r3
 800babe:	4770      	bx	lr

0800bac0 <_init>:
 800bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac2:	bf00      	nop
 800bac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bac6:	bc08      	pop	{r3}
 800bac8:	469e      	mov	lr, r3
 800baca:	4770      	bx	lr

0800bacc <_fini>:
 800bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bace:	bf00      	nop
 800bad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad2:	bc08      	pop	{r3}
 800bad4:	469e      	mov	lr, r3
 800bad6:	4770      	bx	lr
